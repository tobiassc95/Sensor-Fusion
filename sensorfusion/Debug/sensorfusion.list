
sensorfusion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052f8  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005490  08005490  00015490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054c8  080054c8  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080054c8  080054c8  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080054c8  080054c8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054c8  080054c8  000154c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054cc  080054cc  000154cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080054d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  20000018  080054e4  00020018  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  080054e4  00020200  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bc62  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c6e  00000000  00000000  0002bca6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a18  00000000  00000000  0002d918  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000920  00000000  00000000  0002e330  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ca14  00000000  00000000  0002ec50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000096a9  00000000  00000000  0004b664  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a7cfe  00000000  00000000  00054d0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fca0b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002988  00000000  00000000  000fca88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000018 	.word	0x20000018
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005478 	.word	0x08005478

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000001c 	.word	0x2000001c
 80001d4:	08005478 	.word	0x08005478

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <MadgwickAHRSupdateIMU>:
}

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b09c      	sub	sp, #112	; 0x70
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	ed87 0a05 	vstr	s0, [r7, #20]
 8000a1e:	edc7 0a04 	vstr	s1, [r7, #16]
 8000a22:	ed87 1a03 	vstr	s2, [r7, #12]
 8000a26:	edc7 1a02 	vstr	s3, [r7, #8]
 8000a2a:	ed87 2a01 	vstr	s4, [r7, #4]
 8000a2e:	edc7 2a00 	vstr	s5, [r7]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8000a32:	4bee      	ldr	r3, [pc, #952]	; (8000dec <MadgwickAHRSupdateIMU+0x3d8>)
 8000a34:	edd3 7a00 	vldr	s15, [r3]
 8000a38:	eeb1 7a67 	vneg.f32	s14, s15
 8000a3c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a44:	4bea      	ldr	r3, [pc, #936]	; (8000df0 <MadgwickAHRSupdateIMU+0x3dc>)
 8000a46:	edd3 6a00 	vldr	s13, [r3]
 8000a4a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000a4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a52:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000a56:	4be7      	ldr	r3, [pc, #924]	; (8000df4 <MadgwickAHRSupdateIMU+0x3e0>)
 8000a58:	edd3 6a00 	vldr	s13, [r3]
 8000a5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a68:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000a6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a70:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8000a74:	4be0      	ldr	r3, [pc, #896]	; (8000df8 <MadgwickAHRSupdateIMU+0x3e4>)
 8000a76:	ed93 7a00 	vldr	s14, [r3]
 8000a7a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a82:	4bdb      	ldr	r3, [pc, #876]	; (8000df0 <MadgwickAHRSupdateIMU+0x3dc>)
 8000a84:	edd3 6a00 	vldr	s13, [r3]
 8000a88:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000a94:	4bd7      	ldr	r3, [pc, #860]	; (8000df4 <MadgwickAHRSupdateIMU+0x3e0>)
 8000a96:	edd3 6a00 	vldr	s13, [r3]
 8000a9a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000a9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000aa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000aa6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000aaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000aae:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8000ab2:	4bd1      	ldr	r3, [pc, #836]	; (8000df8 <MadgwickAHRSupdateIMU+0x3e4>)
 8000ab4:	ed93 7a00 	vldr	s14, [r3]
 8000ab8:	edd7 7a04 	vldr	s15, [r7, #16]
 8000abc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ac0:	4bca      	ldr	r3, [pc, #808]	; (8000dec <MadgwickAHRSupdateIMU+0x3d8>)
 8000ac2:	edd3 6a00 	vldr	s13, [r3]
 8000ac6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000aca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ace:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ad2:	4bc8      	ldr	r3, [pc, #800]	; (8000df4 <MadgwickAHRSupdateIMU+0x3e0>)
 8000ad4:	edd3 6a00 	vldr	s13, [r3]
 8000ad8:	edd7 7a05 	vldr	s15, [r7, #20]
 8000adc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ae0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ae4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000ae8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000aec:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8000af0:	4bc1      	ldr	r3, [pc, #772]	; (8000df8 <MadgwickAHRSupdateIMU+0x3e4>)
 8000af2:	ed93 7a00 	vldr	s14, [r3]
 8000af6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000afa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000afe:	4bbb      	ldr	r3, [pc, #748]	; (8000dec <MadgwickAHRSupdateIMU+0x3d8>)
 8000b00:	edd3 6a00 	vldr	s13, [r3]
 8000b04:	edd7 7a04 	vldr	s15, [r7, #16]
 8000b08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000b10:	4bb7      	ldr	r3, [pc, #732]	; (8000df0 <MadgwickAHRSupdateIMU+0x3dc>)
 8000b12:	edd3 6a00 	vldr	s13, [r3]
 8000b16:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b22:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000b26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b2a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8000b2e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000b32:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b3a:	d10e      	bne.n	8000b5a <MadgwickAHRSupdateIMU+0x146>
 8000b3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b40:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b48:	d107      	bne.n	8000b5a <MadgwickAHRSupdateIMU+0x146>
 8000b4a:	edd7 7a00 	vldr	s15, [r7]
 8000b4e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b56:	f000 81f3 	beq.w	8000f40 <MadgwickAHRSupdateIMU+0x52c>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8000b5a:	ed97 7a02 	vldr	s14, [r7, #8]
 8000b5e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000b62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b66:	edd7 6a01 	vldr	s13, [r7, #4]
 8000b6a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b72:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000b76:	edd7 6a00 	vldr	s13, [r7]
 8000b7a:	edd7 7a00 	vldr	s15, [r7]
 8000b7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b86:	eeb0 0a67 	vmov.f32	s0, s15
 8000b8a:	f000 fa75 	bl	8001078 <invSqrt>
 8000b8e:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		ax *= recipNorm;
 8000b92:	ed97 7a02 	vldr	s14, [r7, #8]
 8000b96:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8000b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b9e:	edc7 7a02 	vstr	s15, [r7, #8]
		ay *= recipNorm;
 8000ba2:	ed97 7a01 	vldr	s14, [r7, #4]
 8000ba6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8000baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bae:	edc7 7a01 	vstr	s15, [r7, #4]
		az *= recipNorm;   
 8000bb2:	ed97 7a00 	vldr	s14, [r7]
 8000bb6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8000bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bbe:	edc7 7a00 	vstr	s15, [r7]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 8000bc2:	4b8d      	ldr	r3, [pc, #564]	; (8000df8 <MadgwickAHRSupdateIMU+0x3e4>)
 8000bc4:	edd3 7a00 	vldr	s15, [r3]
 8000bc8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000bcc:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		_2q1 = 2.0f * q1;
 8000bd0:	4b86      	ldr	r3, [pc, #536]	; (8000dec <MadgwickAHRSupdateIMU+0x3d8>)
 8000bd2:	edd3 7a00 	vldr	s15, [r3]
 8000bd6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000bda:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		_2q2 = 2.0f * q2;
 8000bde:	4b84      	ldr	r3, [pc, #528]	; (8000df0 <MadgwickAHRSupdateIMU+0x3dc>)
 8000be0:	edd3 7a00 	vldr	s15, [r3]
 8000be4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000be8:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		_2q3 = 2.0f * q3;
 8000bec:	4b81      	ldr	r3, [pc, #516]	; (8000df4 <MadgwickAHRSupdateIMU+0x3e0>)
 8000bee:	edd3 7a00 	vldr	s15, [r3]
 8000bf2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000bf6:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_4q0 = 4.0f * q0;
 8000bfa:	4b7f      	ldr	r3, [pc, #508]	; (8000df8 <MadgwickAHRSupdateIMU+0x3e4>)
 8000bfc:	edd3 7a00 	vldr	s15, [r3]
 8000c00:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000c04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c08:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_4q1 = 4.0f * q1;
 8000c0c:	4b77      	ldr	r3, [pc, #476]	; (8000dec <MadgwickAHRSupdateIMU+0x3d8>)
 8000c0e:	edd3 7a00 	vldr	s15, [r3]
 8000c12:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000c16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c1a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4q2 = 4.0f * q2;
 8000c1e:	4b74      	ldr	r3, [pc, #464]	; (8000df0 <MadgwickAHRSupdateIMU+0x3dc>)
 8000c20:	edd3 7a00 	vldr	s15, [r3]
 8000c24:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000c28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c2c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_8q1 = 8.0f * q1;
 8000c30:	4b6e      	ldr	r3, [pc, #440]	; (8000dec <MadgwickAHRSupdateIMU+0x3d8>)
 8000c32:	edd3 7a00 	vldr	s15, [r3]
 8000c36:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8000c3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c3e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		_8q2 = 8.0f * q2;
 8000c42:	4b6b      	ldr	r3, [pc, #428]	; (8000df0 <MadgwickAHRSupdateIMU+0x3dc>)
 8000c44:	edd3 7a00 	vldr	s15, [r3]
 8000c48:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8000c4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c50:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		q0q0 = q0 * q0;
 8000c54:	4b68      	ldr	r3, [pc, #416]	; (8000df8 <MadgwickAHRSupdateIMU+0x3e4>)
 8000c56:	ed93 7a00 	vldr	s14, [r3]
 8000c5a:	4b67      	ldr	r3, [pc, #412]	; (8000df8 <MadgwickAHRSupdateIMU+0x3e4>)
 8000c5c:	edd3 7a00 	vldr	s15, [r3]
 8000c60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c64:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		q1q1 = q1 * q1;
 8000c68:	4b60      	ldr	r3, [pc, #384]	; (8000dec <MadgwickAHRSupdateIMU+0x3d8>)
 8000c6a:	ed93 7a00 	vldr	s14, [r3]
 8000c6e:	4b5f      	ldr	r3, [pc, #380]	; (8000dec <MadgwickAHRSupdateIMU+0x3d8>)
 8000c70:	edd3 7a00 	vldr	s15, [r3]
 8000c74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c78:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		q2q2 = q2 * q2;
 8000c7c:	4b5c      	ldr	r3, [pc, #368]	; (8000df0 <MadgwickAHRSupdateIMU+0x3dc>)
 8000c7e:	ed93 7a00 	vldr	s14, [r3]
 8000c82:	4b5b      	ldr	r3, [pc, #364]	; (8000df0 <MadgwickAHRSupdateIMU+0x3dc>)
 8000c84:	edd3 7a00 	vldr	s15, [r3]
 8000c88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c8c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		q3q3 = q3 * q3;
 8000c90:	4b58      	ldr	r3, [pc, #352]	; (8000df4 <MadgwickAHRSupdateIMU+0x3e0>)
 8000c92:	ed93 7a00 	vldr	s14, [r3]
 8000c96:	4b57      	ldr	r3, [pc, #348]	; (8000df4 <MadgwickAHRSupdateIMU+0x3e0>)
 8000c98:	edd3 7a00 	vldr	s15, [r3]
 8000c9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ca0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8000ca4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8000ca8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000cac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000cb0:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8000cb4:	edd7 7a02 	vldr	s15, [r7, #8]
 8000cb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000cbc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000cc0:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8000cc4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000cc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ccc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000cd0:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8000cd4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000cdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ce0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8000ce4:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000ce8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000cec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000cf0:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8000cf4:	edd7 7a02 	vldr	s15, [r7, #8]
 8000cf8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000cfc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d00:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000d04:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8000d08:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000d0c:	4b37      	ldr	r3, [pc, #220]	; (8000dec <MadgwickAHRSupdateIMU+0x3d8>)
 8000d0e:	edd3 7a00 	vldr	s15, [r3]
 8000d12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d1a:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8000d1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d26:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d2a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000d2e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d32:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8000d36:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000d3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d42:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8000d46:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000d4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d52:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8000d56:	edd7 7a00 	vldr	s15, [r7]
 8000d5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d62:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8000d66:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000d6a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000d6e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d72:	4b1f      	ldr	r3, [pc, #124]	; (8000df0 <MadgwickAHRSupdateIMU+0x3dc>)
 8000d74:	edd3 7a00 	vldr	s15, [r3]
 8000d78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d7c:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8000d80:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d8c:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8000d90:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000d94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d9c:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8000da0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000da4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000da8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000dac:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000db0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000db4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8000db8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000dbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000dc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000dc4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8000dc8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000dcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000dd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000dd4:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8000dd8:	edd7 7a00 	vldr	s15, [r7]
 8000ddc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000de0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000de4:	edc7 7a07 	vstr	s15, [r7, #28]
 8000de8:	e008      	b.n	8000dfc <MadgwickAHRSupdateIMU+0x3e8>
 8000dea:	bf00      	nop
 8000dec:	20000034 	.word	0x20000034
 8000df0:	20000038 	.word	0x20000038
 8000df4:	2000003c 	.word	0x2000003c
 8000df8:	20000004 	.word	0x20000004
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8000dfc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000e00:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000e04:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000e08:	4b95      	ldr	r3, [pc, #596]	; (8001060 <MadgwickAHRSupdateIMU+0x64c>)
 8000e0a:	edd3 7a00 	vldr	s15, [r3]
 8000e0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e12:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8000e16:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e1e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e22:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000e26:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8000e2a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000e2e:	4b8c      	ldr	r3, [pc, #560]	; (8001060 <MadgwickAHRSupdateIMU+0x64c>)
 8000e30:	edd3 7a00 	vldr	s15, [r3]
 8000e34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e3c:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8000e40:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e4c:	edc7 7a06 	vstr	s15, [r7, #24]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8000e50:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000e54:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000e58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e5c:	edd7 6a08 	vldr	s13, [r7, #32]
 8000e60:	edd7 7a08 	vldr	s15, [r7, #32]
 8000e64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8000e70:	edd7 7a07 	vldr	s15, [r7, #28]
 8000e74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e7c:	edd7 6a06 	vldr	s13, [r7, #24]
 8000e80:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e8c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e90:	f000 f8f2 	bl	8001078 <invSqrt>
 8000e94:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		s0 *= recipNorm;
 8000e98:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000e9c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8000ea0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ea4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 *= recipNorm;
 8000ea8:	ed97 7a08 	vldr	s14, [r7, #32]
 8000eac:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8000eb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000eb4:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 *= recipNorm;
 8000eb8:	ed97 7a07 	vldr	s14, [r7, #28]
 8000ebc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8000ec0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ec4:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 *= recipNorm;
 8000ec8:	ed97 7a06 	vldr	s14, [r7, #24]
 8000ecc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8000ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ed4:	edc7 7a06 	vstr	s15, [r7, #24]

		// Apply feedback step
		qDot1 -= beta * s0;
 8000ed8:	4b62      	ldr	r3, [pc, #392]	; (8001064 <MadgwickAHRSupdateIMU+0x650>)
 8000eda:	ed93 7a00 	vldr	s14, [r3]
 8000ede:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ee6:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8000eea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000eee:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		qDot2 -= beta * s1;
 8000ef2:	4b5c      	ldr	r3, [pc, #368]	; (8001064 <MadgwickAHRSupdateIMU+0x650>)
 8000ef4:	ed93 7a00 	vldr	s14, [r3]
 8000ef8:	edd7 7a08 	vldr	s15, [r7, #32]
 8000efc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f00:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8000f04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f08:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		qDot3 -= beta * s2;
 8000f0c:	4b55      	ldr	r3, [pc, #340]	; (8001064 <MadgwickAHRSupdateIMU+0x650>)
 8000f0e:	ed93 7a00 	vldr	s14, [r3]
 8000f12:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f1a:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8000f1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f22:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		qDot4 -= beta * s3;
 8000f26:	4b4f      	ldr	r3, [pc, #316]	; (8001064 <MadgwickAHRSupdateIMU+0x650>)
 8000f28:	ed93 7a00 	vldr	s14, [r3]
 8000f2c:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f34:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8000f38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f3c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8000f40:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8000f44:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8001068 <MadgwickAHRSupdateIMU+0x654>
 8000f48:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f4c:	4b47      	ldr	r3, [pc, #284]	; (800106c <MadgwickAHRSupdateIMU+0x658>)
 8000f4e:	edd3 7a00 	vldr	s15, [r3]
 8000f52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f56:	4b45      	ldr	r3, [pc, #276]	; (800106c <MadgwickAHRSupdateIMU+0x658>)
 8000f58:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 8000f5c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8000f60:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8001068 <MadgwickAHRSupdateIMU+0x654>
 8000f64:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f68:	4b41      	ldr	r3, [pc, #260]	; (8001070 <MadgwickAHRSupdateIMU+0x65c>)
 8000f6a:	edd3 7a00 	vldr	s15, [r3]
 8000f6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f72:	4b3f      	ldr	r3, [pc, #252]	; (8001070 <MadgwickAHRSupdateIMU+0x65c>)
 8000f74:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 8000f78:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8000f7c:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001068 <MadgwickAHRSupdateIMU+0x654>
 8000f80:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f84:	4b3b      	ldr	r3, [pc, #236]	; (8001074 <MadgwickAHRSupdateIMU+0x660>)
 8000f86:	edd3 7a00 	vldr	s15, [r3]
 8000f8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f8e:	4b39      	ldr	r3, [pc, #228]	; (8001074 <MadgwickAHRSupdateIMU+0x660>)
 8000f90:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 8000f94:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8000f98:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001068 <MadgwickAHRSupdateIMU+0x654>
 8000f9c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000fa0:	4b2f      	ldr	r3, [pc, #188]	; (8001060 <MadgwickAHRSupdateIMU+0x64c>)
 8000fa2:	edd3 7a00 	vldr	s15, [r3]
 8000fa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000faa:	4b2d      	ldr	r3, [pc, #180]	; (8001060 <MadgwickAHRSupdateIMU+0x64c>)
 8000fac:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8000fb0:	4b2e      	ldr	r3, [pc, #184]	; (800106c <MadgwickAHRSupdateIMU+0x658>)
 8000fb2:	ed93 7a00 	vldr	s14, [r3]
 8000fb6:	4b2d      	ldr	r3, [pc, #180]	; (800106c <MadgwickAHRSupdateIMU+0x658>)
 8000fb8:	edd3 7a00 	vldr	s15, [r3]
 8000fbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fc0:	4b2b      	ldr	r3, [pc, #172]	; (8001070 <MadgwickAHRSupdateIMU+0x65c>)
 8000fc2:	edd3 6a00 	vldr	s13, [r3]
 8000fc6:	4b2a      	ldr	r3, [pc, #168]	; (8001070 <MadgwickAHRSupdateIMU+0x65c>)
 8000fc8:	edd3 7a00 	vldr	s15, [r3]
 8000fcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fd4:	4b27      	ldr	r3, [pc, #156]	; (8001074 <MadgwickAHRSupdateIMU+0x660>)
 8000fd6:	edd3 6a00 	vldr	s13, [r3]
 8000fda:	4b26      	ldr	r3, [pc, #152]	; (8001074 <MadgwickAHRSupdateIMU+0x660>)
 8000fdc:	edd3 7a00 	vldr	s15, [r3]
 8000fe0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fe4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fe8:	4b1d      	ldr	r3, [pc, #116]	; (8001060 <MadgwickAHRSupdateIMU+0x64c>)
 8000fea:	edd3 6a00 	vldr	s13, [r3]
 8000fee:	4b1c      	ldr	r3, [pc, #112]	; (8001060 <MadgwickAHRSupdateIMU+0x64c>)
 8000ff0:	edd3 7a00 	vldr	s15, [r3]
 8000ff4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ff8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ffc:	eeb0 0a67 	vmov.f32	s0, s15
 8001000:	f000 f83a 	bl	8001078 <invSqrt>
 8001004:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
	q0 *= recipNorm;
 8001008:	4b18      	ldr	r3, [pc, #96]	; (800106c <MadgwickAHRSupdateIMU+0x658>)
 800100a:	ed93 7a00 	vldr	s14, [r3]
 800100e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001016:	4b15      	ldr	r3, [pc, #84]	; (800106c <MadgwickAHRSupdateIMU+0x658>)
 8001018:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 800101c:	4b14      	ldr	r3, [pc, #80]	; (8001070 <MadgwickAHRSupdateIMU+0x65c>)
 800101e:	ed93 7a00 	vldr	s14, [r3]
 8001022:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800102a:	4b11      	ldr	r3, [pc, #68]	; (8001070 <MadgwickAHRSupdateIMU+0x65c>)
 800102c:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8001030:	4b10      	ldr	r3, [pc, #64]	; (8001074 <MadgwickAHRSupdateIMU+0x660>)
 8001032:	ed93 7a00 	vldr	s14, [r3]
 8001036:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800103a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800103e:	4b0d      	ldr	r3, [pc, #52]	; (8001074 <MadgwickAHRSupdateIMU+0x660>)
 8001040:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <MadgwickAHRSupdateIMU+0x64c>)
 8001046:	ed93 7a00 	vldr	s14, [r3]
 800104a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800104e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001052:	4b03      	ldr	r3, [pc, #12]	; (8001060 <MadgwickAHRSupdateIMU+0x64c>)
 8001054:	edc3 7a00 	vstr	s15, [r3]
}
 8001058:	bf00      	nop
 800105a:	3770      	adds	r7, #112	; 0x70
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	2000003c 	.word	0x2000003c
 8001064:	20000000 	.word	0x20000000
 8001068:	3b000000 	.word	0x3b000000
 800106c:	20000004 	.word	0x20000004
 8001070:	20000034 	.word	0x20000034
 8001074:	20000038 	.word	0x20000038

08001078 <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 8001078:	b480      	push	{r7}
 800107a:	b087      	sub	sp, #28
 800107c:	af00      	add	r7, sp, #0
 800107e:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8001082:	edd7 7a01 	vldr	s15, [r7, #4]
 8001086:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800108a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800108e:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8001096:	f107 0310 	add.w	r3, r7, #16
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	105a      	asrs	r2, r3, #1
 80010a2:	4b12      	ldr	r3, [pc, #72]	; (80010ec <invSqrt+0x74>)
 80010a4:	1a9b      	subs	r3, r3, r2
 80010a6:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 80010b0:	ed97 7a04 	vldr	s14, [r7, #16]
 80010b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80010b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80010c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010c4:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80010c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80010d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010d4:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	ee07 3a90 	vmov	s15, r3
}
 80010de:	eeb0 0a67 	vmov.f32	s0, s15
 80010e2:	371c      	adds	r7, #28
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	5f3759df 	.word	0x5f3759df

080010f0 <MX_I2C1_Init>:
  * @retval None
  */
void Error_Handler(void);

void MX_I2C1_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
void MX_I2C1_Init(void)
 80010f6:	f107 0310 	add.w	r3, r7, #16
 80010fa:	607b      	str	r3, [r7, #4]
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80010fc:	4b1c      	ldr	r3, [pc, #112]	; (8001170 <MX_I2C1_Init+0x80>)
 80010fe:	4a1d      	ldr	r2, [pc, #116]	; (8001174 <MX_I2C1_Init+0x84>)
 8001100:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x0000020B;
 8001102:	4b1b      	ldr	r3, [pc, #108]	; (8001170 <MX_I2C1_Init+0x80>)
 8001104:	f240 220b 	movw	r2, #523	; 0x20b
 8001108:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 800110a:	4b19      	ldr	r3, [pc, #100]	; (8001170 <MX_I2C1_Init+0x80>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001110:	4b17      	ldr	r3, [pc, #92]	; (8001170 <MX_I2C1_Init+0x80>)
 8001112:	2201      	movs	r2, #1
 8001114:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001116:	4b16      	ldr	r3, [pc, #88]	; (8001170 <MX_I2C1_Init+0x80>)
 8001118:	2200      	movs	r2, #0
 800111a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 800111c:	4b14      	ldr	r3, [pc, #80]	; (8001170 <MX_I2C1_Init+0x80>)
 800111e:	2200      	movs	r2, #0
 8001120:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001122:	4b13      	ldr	r3, [pc, #76]	; (8001170 <MX_I2C1_Init+0x80>)
 8001124:	2200      	movs	r2, #0
 8001126:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001128:	4b11      	ldr	r3, [pc, #68]	; (8001170 <MX_I2C1_Init+0x80>)
 800112a:	2200      	movs	r2, #0
 800112c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800112e:	4b10      	ldr	r3, [pc, #64]	; (8001170 <MX_I2C1_Init+0x80>)
 8001130:	2200      	movs	r2, #0
 8001132:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001134:	480e      	ldr	r0, [pc, #56]	; (8001170 <MX_I2C1_Init+0x80>)
 8001136:	f001 fbed 	bl	8002914 <HAL_I2C_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_I2C1_Init+0x54>
  {
	Error_Handler();
 8001140:	f000 f9d8 	bl	80014f4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001144:	2100      	movs	r1, #0
 8001146:	480a      	ldr	r0, [pc, #40]	; (8001170 <MX_I2C1_Init+0x80>)
 8001148:	f002 f83e 	bl	80031c8 <HAL_I2CEx_ConfigAnalogFilter>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_I2C1_Init+0x66>
  {
    Error_Handler();
 8001152:	f000 f9cf 	bl	80014f4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001156:	2100      	movs	r1, #0
 8001158:	4805      	ldr	r0, [pc, #20]	; (8001170 <MX_I2C1_Init+0x80>)
 800115a:	f002 f880 	bl	800325e <HAL_I2CEx_ConfigDigitalFilter>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_I2C1_Init+0x78>
  {
    Error_Handler();
 8001164:	f000 f9c6 	bl	80014f4 <Error_Handler>
    /* User can add his own implementation to report the HAL error return state */

    /* USER CODE END Error_Handler_Debug */
  }

}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000130 	.word	0x20000130
 8001174:	40005400 	.word	0x40005400

08001178 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001178:	b590      	push	{r4, r7, lr}
 800117a:	b08f      	sub	sp, #60	; 0x3c
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800117e:	f001 f89f 	bl	80022c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001182:	f000 f8bf 	bl	8001304 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001186:	f000 f94d 	bl	8001424 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800118a:	f000 f91b 	bl	80013c4 <MX_USART2_UART_Init>
  imustatus = mpu6500Init(MPU6500_ADDRESS_0);
 800118e:	2068      	movs	r0, #104	; 0x68
 8001190:	f000 fcaa 	bl	8001ae8 <mpu6500Init>
 8001194:	4603      	mov	r3, r0
 8001196:	637b      	str	r3, [r7, #52]	; 0x34
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (imustatus == 1) {
 8001198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800119a:	2b01      	cmp	r3, #1
 800119c:	f040 8098 	bne.w	80012d0 <main+0x158>
		  mpu6500Read();
 80011a0:	f000 fd70 	bl	8001c84 <mpu6500Read>
		  data[0] = mpu6500GetGyroX_rads()*(180/3.14159);
 80011a4:	f000 ff4a 	bl	800203c <mpu6500GetGyroX_rads>
 80011a8:	ee10 3a10 	vmov	r3, s0
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff f977 	bl	80004a0 <__aeabi_f2d>
 80011b2:	a352      	add	r3, pc, #328	; (adr r3, 80012fc <main+0x184>)
 80011b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b8:	f7ff f9ca 	bl	8000550 <__aeabi_dmul>
 80011bc:	4603      	mov	r3, r0
 80011be:	460c      	mov	r4, r1
 80011c0:	4618      	mov	r0, r3
 80011c2:	4621      	mov	r1, r4
 80011c4:	f7ff fbd6 	bl	8000974 <__aeabi_d2f>
 80011c8:	4603      	mov	r3, r0
 80011ca:	60bb      	str	r3, [r7, #8]
		  data[1] = mpu6500GetGyroY_rads()*(180/3.14159);
 80011cc:	f000 ff44 	bl	8002058 <mpu6500GetGyroY_rads>
 80011d0:	ee10 3a10 	vmov	r3, s0
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff f963 	bl	80004a0 <__aeabi_f2d>
 80011da:	a348      	add	r3, pc, #288	; (adr r3, 80012fc <main+0x184>)
 80011dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e0:	f7ff f9b6 	bl	8000550 <__aeabi_dmul>
 80011e4:	4603      	mov	r3, r0
 80011e6:	460c      	mov	r4, r1
 80011e8:	4618      	mov	r0, r3
 80011ea:	4621      	mov	r1, r4
 80011ec:	f7ff fbc2 	bl	8000974 <__aeabi_d2f>
 80011f0:	4603      	mov	r3, r0
 80011f2:	60fb      	str	r3, [r7, #12]
		  data[2] = mpu6500GetGyroZ_rads()*(180/3.14159);
 80011f4:	f000 ff3e 	bl	8002074 <mpu6500GetGyroZ_rads>
 80011f8:	ee10 3a10 	vmov	r3, s0
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff f94f 	bl	80004a0 <__aeabi_f2d>
 8001202:	a33e      	add	r3, pc, #248	; (adr r3, 80012fc <main+0x184>)
 8001204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001208:	f7ff f9a2 	bl	8000550 <__aeabi_dmul>
 800120c:	4603      	mov	r3, r0
 800120e:	460c      	mov	r4, r1
 8001210:	4618      	mov	r0, r3
 8001212:	4621      	mov	r1, r4
 8001214:	f7ff fbae 	bl	8000974 <__aeabi_d2f>
 8001218:	4603      	mov	r3, r0
 800121a:	613b      	str	r3, [r7, #16]
		  data[3] = -mpu6500GetAccelY_mss();
 800121c:	f000 fef2 	bl	8002004 <mpu6500GetAccelY_mss>
 8001220:	eef0 7a40 	vmov.f32	s15, s0
 8001224:	eef1 7a67 	vneg.f32	s15, s15
 8001228:	edc7 7a05 	vstr	s15, [r7, #20]
		  data[4] = -mpu6500GetAccelX_mss();
 800122c:	f000 fedc 	bl	8001fe8 <mpu6500GetAccelX_mss>
 8001230:	eef0 7a40 	vmov.f32	s15, s0
 8001234:	eef1 7a67 	vneg.f32	s15, s15
 8001238:	edc7 7a06 	vstr	s15, [r7, #24]
		  data[5] = mpu6500GetAccelZ_mss();
 800123c:	f000 fef0 	bl	8002020 <mpu6500GetAccelZ_mss>
 8001240:	eef0 7a40 	vmov.f32	s15, s0
 8001244:	edc7 7a07 	vstr	s15, [r7, #28]

		  //beta = 1; //0.033; //optimal beta gain.
		  MadgwickAHRSupdateIMU(data[0], data[1], data[2], data[3], data[4], data[5]);
 8001248:	edd7 7a02 	vldr	s15, [r7, #8]
 800124c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001250:	edd7 6a04 	vldr	s13, [r7, #16]
 8001254:	ed97 6a05 	vldr	s12, [r7, #20]
 8001258:	edd7 5a06 	vldr	s11, [r7, #24]
 800125c:	ed97 5a07 	vldr	s10, [r7, #28]
 8001260:	eef0 2a45 	vmov.f32	s5, s10
 8001264:	eeb0 2a65 	vmov.f32	s4, s11
 8001268:	eef0 1a46 	vmov.f32	s3, s12
 800126c:	eeb0 1a66 	vmov.f32	s2, s13
 8001270:	eef0 0a47 	vmov.f32	s1, s14
 8001274:	eeb0 0a67 	vmov.f32	s0, s15
 8001278:	f7ff fbcc 	bl	8000a14 <MadgwickAHRSupdateIMU>
		  data[6] = q0;
 800127c:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <main+0x170>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	623b      	str	r3, [r7, #32]
		  data[7] = q1;
 8001282:	4b1a      	ldr	r3, [pc, #104]	; (80012ec <main+0x174>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	627b      	str	r3, [r7, #36]	; 0x24
		  data[8] = q2;
 8001288:	4b19      	ldr	r3, [pc, #100]	; (80012f0 <main+0x178>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	62bb      	str	r3, [r7, #40]	; 0x28
		  data[9] = q3;
 800128e:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <main+0x17c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	62fb      	str	r3, [r7, #44]	; 0x2c

		  data2send = (uint8_t*) data;
 8001294:	f107 0308 	add.w	r3, r7, #8
 8001298:	633b      	str	r3, [r7, #48]	; 0x30
		  HAL_UART_Receive(&huart2, msg, 3, HAL_MAX_DELAY);
 800129a:	1d39      	adds	r1, r7, #4
 800129c:	f04f 33ff 	mov.w	r3, #4294967295
 80012a0:	2203      	movs	r2, #3
 80012a2:	4815      	ldr	r0, [pc, #84]	; (80012f8 <main+0x180>)
 80012a4:	f003 fc73 	bl	8004b8e <HAL_UART_Receive>
		  if (msg[0] == 'I' && msg[1] == 'M' && msg[2] == 'U')
 80012a8:	793b      	ldrb	r3, [r7, #4]
 80012aa:	2b49      	cmp	r3, #73	; 0x49
 80012ac:	f47f af74 	bne.w	8001198 <main+0x20>
 80012b0:	797b      	ldrb	r3, [r7, #5]
 80012b2:	2b4d      	cmp	r3, #77	; 0x4d
 80012b4:	f47f af70 	bne.w	8001198 <main+0x20>
 80012b8:	79bb      	ldrb	r3, [r7, #6]
 80012ba:	2b55      	cmp	r3, #85	; 0x55
 80012bc:	f47f af6c 	bne.w	8001198 <main+0x20>
			  HAL_UART_Transmit(&huart2, data2send, 10*4, HAL_MAX_DELAY); //10floats = 10*4bytes.
 80012c0:	f04f 33ff 	mov.w	r3, #4294967295
 80012c4:	2228      	movs	r2, #40	; 0x28
 80012c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80012c8:	480b      	ldr	r0, [pc, #44]	; (80012f8 <main+0x180>)
 80012ca:	f003 fbcd 	bl	8004a68 <HAL_UART_Transmit>
 80012ce:	e763      	b.n	8001198 <main+0x20>
	  }
	  else {
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80012d0:	2120      	movs	r1, #32
 80012d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d6:	f001 fb03 	bl	80028e0 <HAL_GPIO_TogglePin>
		  HAL_Delay(500);
 80012da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012de:	f001 f855 	bl	800238c <HAL_Delay>
	  if (imustatus == 1) {
 80012e2:	e759      	b.n	8001198 <main+0x20>
 80012e4:	f3af 8000 	nop.w
 80012e8:	20000004 	.word	0x20000004
 80012ec:	20000034 	.word	0x20000034
 80012f0:	20000038 	.word	0x20000038
 80012f4:	2000003c 	.word	0x2000003c
 80012f8:	2000017c 	.word	0x2000017c
 80012fc:	b05cc3e8 	.word	0xb05cc3e8
 8001300:	404ca5dd 	.word	0x404ca5dd

08001304 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b0a6      	sub	sp, #152	; 0x98
 8001308:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800130a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800130e:	2228      	movs	r2, #40	; 0x28
 8001310:	2100      	movs	r1, #0
 8001312:	4618      	mov	r0, r3
 8001314:	f004 f8a8 	bl	8005468 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001318:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001328:	1d3b      	adds	r3, r7, #4
 800132a:	2258      	movs	r2, #88	; 0x58
 800132c:	2100      	movs	r1, #0
 800132e:	4618      	mov	r0, r3
 8001330:	f004 f89a 	bl	8005468 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001334:	2302      	movs	r3, #2
 8001336:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001338:	2301      	movs	r3, #1
 800133a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800133c:	2310      	movs	r3, #16
 800133e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001342:	2302      	movs	r3, #2
 8001344:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001348:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800134c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001350:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001354:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001358:	2300      	movs	r3, #0
 800135a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800135e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001362:	4618      	mov	r0, r3
 8001364:	f001 ffc8 	bl	80032f8 <HAL_RCC_OscConfig>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800136e:	f000 f8c1 	bl	80014f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001372:	230f      	movs	r3, #15
 8001374:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001376:	2302      	movs	r3, #2
 8001378:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800137a:	2300      	movs	r3, #0
 800137c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800137e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001382:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001384:	2300      	movs	r3, #0
 8001386:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001388:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800138c:	2102      	movs	r1, #2
 800138e:	4618      	mov	r0, r3
 8001390:	f002 fec8 	bl	8004124 <HAL_RCC_ClockConfig>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800139a:	f000 f8ab 	bl	80014f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 800139e:	2322      	movs	r3, #34	; 0x22
 80013a0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80013a2:	2300      	movs	r3, #0
 80013a4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80013a6:	2300      	movs	r3, #0
 80013a8:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013aa:	1d3b      	adds	r3, r7, #4
 80013ac:	4618      	mov	r0, r3
 80013ae:	f003 f8ef 	bl	8004590 <HAL_RCCEx_PeriphCLKConfig>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80013b8:	f000 f89c 	bl	80014f4 <Error_Handler>
  }
}
 80013bc:	bf00      	nop
 80013be:	3798      	adds	r7, #152	; 0x98
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013c8:	4b14      	ldr	r3, [pc, #80]	; (800141c <MX_USART2_UART_Init+0x58>)
 80013ca:	4a15      	ldr	r2, [pc, #84]	; (8001420 <MX_USART2_UART_Init+0x5c>)
 80013cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013ce:	4b13      	ldr	r3, [pc, #76]	; (800141c <MX_USART2_UART_Init+0x58>)
 80013d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013d6:	4b11      	ldr	r3, [pc, #68]	; (800141c <MX_USART2_UART_Init+0x58>)
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013dc:	4b0f      	ldr	r3, [pc, #60]	; (800141c <MX_USART2_UART_Init+0x58>)
 80013de:	2200      	movs	r2, #0
 80013e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013e2:	4b0e      	ldr	r3, [pc, #56]	; (800141c <MX_USART2_UART_Init+0x58>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013e8:	4b0c      	ldr	r3, [pc, #48]	; (800141c <MX_USART2_UART_Init+0x58>)
 80013ea:	220c      	movs	r2, #12
 80013ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ee:	4b0b      	ldr	r3, [pc, #44]	; (800141c <MX_USART2_UART_Init+0x58>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013f4:	4b09      	ldr	r3, [pc, #36]	; (800141c <MX_USART2_UART_Init+0x58>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013fa:	4b08      	ldr	r3, [pc, #32]	; (800141c <MX_USART2_UART_Init+0x58>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001400:	4b06      	ldr	r3, [pc, #24]	; (800141c <MX_USART2_UART_Init+0x58>)
 8001402:	2200      	movs	r2, #0
 8001404:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001406:	4805      	ldr	r0, [pc, #20]	; (800141c <MX_USART2_UART_Init+0x58>)
 8001408:	f003 fae0 	bl	80049cc <HAL_UART_Init>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001412:	f000 f86f 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	2000017c 	.word	0x2000017c
 8001420:	40004400 	.word	0x40004400

08001424 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08a      	sub	sp, #40	; 0x28
 8001428:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142a:	f107 0314 	add.w	r3, r7, #20
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	60da      	str	r2, [r3, #12]
 8001438:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800143a:	4b2b      	ldr	r3, [pc, #172]	; (80014e8 <MX_GPIO_Init+0xc4>)
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	4a2a      	ldr	r2, [pc, #168]	; (80014e8 <MX_GPIO_Init+0xc4>)
 8001440:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001444:	6153      	str	r3, [r2, #20]
 8001446:	4b28      	ldr	r3, [pc, #160]	; (80014e8 <MX_GPIO_Init+0xc4>)
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001452:	4b25      	ldr	r3, [pc, #148]	; (80014e8 <MX_GPIO_Init+0xc4>)
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	4a24      	ldr	r2, [pc, #144]	; (80014e8 <MX_GPIO_Init+0xc4>)
 8001458:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800145c:	6153      	str	r3, [r2, #20]
 800145e:	4b22      	ldr	r3, [pc, #136]	; (80014e8 <MX_GPIO_Init+0xc4>)
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146a:	4b1f      	ldr	r3, [pc, #124]	; (80014e8 <MX_GPIO_Init+0xc4>)
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	4a1e      	ldr	r2, [pc, #120]	; (80014e8 <MX_GPIO_Init+0xc4>)
 8001470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001474:	6153      	str	r3, [r2, #20]
 8001476:	4b1c      	ldr	r3, [pc, #112]	; (80014e8 <MX_GPIO_Init+0xc4>)
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001482:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <MX_GPIO_Init+0xc4>)
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	4a18      	ldr	r2, [pc, #96]	; (80014e8 <MX_GPIO_Init+0xc4>)
 8001488:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800148c:	6153      	str	r3, [r2, #20]
 800148e:	4b16      	ldr	r3, [pc, #88]	; (80014e8 <MX_GPIO_Init+0xc4>)
 8001490:	695b      	ldr	r3, [r3, #20]
 8001492:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800149a:	2200      	movs	r2, #0
 800149c:	2120      	movs	r1, #32
 800149e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a2:	f001 fa05 	bl	80028b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014ac:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <MX_GPIO_Init+0xc8>)
 80014ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	4619      	mov	r1, r3
 80014ba:	480d      	ldr	r0, [pc, #52]	; (80014f0 <MX_GPIO_Init+0xcc>)
 80014bc:	f001 f86e 	bl	800259c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80014c0:	2320      	movs	r3, #32
 80014c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c4:	2301      	movs	r3, #1
 80014c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014cc:	2300      	movs	r3, #0
 80014ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	4619      	mov	r1, r3
 80014d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014da:	f001 f85f 	bl	800259c <HAL_GPIO_Init>

}
 80014de:	bf00      	nop
 80014e0:	3728      	adds	r7, #40	; 0x28
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40021000 	.word	0x40021000
 80014ec:	10210000 	.word	0x10210000
 80014f0:	48000800 	.word	0x48000800

080014f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
	...

08001504 <mpu6500InitializeControlStructure>:
/*==================[external data definition]===============================*/

/*==================[internal functions definition]==========================*/

static void mpu6500InitializeControlStructure( void )
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
	control._tempScale = 333.87f;
 8001508:	4b21      	ldr	r3, [pc, #132]	; (8001590 <mpu6500InitializeControlStructure+0x8c>)
 800150a:	4a22      	ldr	r2, [pc, #136]	; (8001594 <mpu6500InitializeControlStructure+0x90>)
 800150c:	619a      	str	r2, [r3, #24]
	control._tempOffset = 21.0f;
 800150e:	4b20      	ldr	r3, [pc, #128]	; (8001590 <mpu6500InitializeControlStructure+0x8c>)
 8001510:	4a21      	ldr	r2, [pc, #132]	; (8001598 <mpu6500InitializeControlStructure+0x94>)
 8001512:	61da      	str	r2, [r3, #28]
	control._numSamples = 100;
 8001514:	4b1e      	ldr	r3, [pc, #120]	; (8001590 <mpu6500InitializeControlStructure+0x8c>)
 8001516:	2264      	movs	r2, #100	; 0x64
 8001518:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	control._axs = 1.0f;
 800151c:	4b1c      	ldr	r3, [pc, #112]	; (8001590 <mpu6500InitializeControlStructure+0x8c>)
 800151e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001522:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	control._ays = 1.0f;
 8001526:	4b1a      	ldr	r3, [pc, #104]	; (8001590 <mpu6500InitializeControlStructure+0x8c>)
 8001528:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800152c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	control._azs = 1.0f;
 8001530:	4b17      	ldr	r3, [pc, #92]	; (8001590 <mpu6500InitializeControlStructure+0x8c>)
 8001532:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001536:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	control.tX[0] = 0;
 800153a:	4b15      	ldr	r3, [pc, #84]	; (8001590 <mpu6500InitializeControlStructure+0x8c>)
 800153c:	2200      	movs	r2, #0
 800153e:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
	control.tX[1] = 1;
 8001542:	4b13      	ldr	r3, [pc, #76]	; (8001590 <mpu6500InitializeControlStructure+0x8c>)
 8001544:	2201      	movs	r2, #1
 8001546:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
	control.tX[2] = 0;
 800154a:	4b11      	ldr	r3, [pc, #68]	; (8001590 <mpu6500InitializeControlStructure+0x8c>)
 800154c:	2200      	movs	r2, #0
 800154e:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
	control.tY[0] = 1;
 8001552:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <mpu6500InitializeControlStructure+0x8c>)
 8001554:	2201      	movs	r2, #1
 8001556:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
	control.tY[1] = 0;
 800155a:	4b0d      	ldr	r3, [pc, #52]	; (8001590 <mpu6500InitializeControlStructure+0x8c>)
 800155c:	2200      	movs	r2, #0
 800155e:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
	control.tY[2] = 0;
 8001562:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <mpu6500InitializeControlStructure+0x8c>)
 8001564:	2200      	movs	r2, #0
 8001566:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
	control.tZ[0] = 0;
 800156a:	4b09      	ldr	r3, [pc, #36]	; (8001590 <mpu6500InitializeControlStructure+0x8c>)
 800156c:	2200      	movs	r2, #0
 800156e:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
	control.tZ[1] = 0;
 8001572:	4b07      	ldr	r3, [pc, #28]	; (8001590 <mpu6500InitializeControlStructure+0x8c>)
 8001574:	2200      	movs	r2, #0
 8001576:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
	control.tZ[2] = -1;
 800157a:	4b05      	ldr	r3, [pc, #20]	; (8001590 <mpu6500InitializeControlStructure+0x8c>)
 800157c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001580:	f8a3 20e6 	strh.w	r2, [r3, #230]	; 0xe6
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	20000040 	.word	0x20000040
 8001594:	43a6ef5c 	.word	0x43a6ef5c
 8001598:	41a80000 	.word	0x41a80000

0800159c <mpu6500WriteRegister>:

static int8_t mpu6500WriteRegister( uint8_t command, uint8_t data ) //subAddress = command.
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af02      	add	r7, sp, #8
 80015a2:	4603      	mov	r3, r0
 80015a4:	460a      	mov	r2, r1
 80015a6:	71fb      	strb	r3, [r7, #7]
 80015a8:	4613      	mov	r3, r2
 80015aa:	71bb      	strb	r3, [r7, #6]
	uint8_t buff[2];
	buff[0] = command;
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	733b      	strb	r3, [r7, #12]
	buff[1] = data;
 80015b0:	79bb      	ldrb	r3, [r7, #6]
 80015b2:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef status;
	status = HAL_I2C_Master_Transmit(&hi2c1, control.address<<1, buff, 2, HAL_MAX_DELAY);
 80015b4:	4b0d      	ldr	r3, [pc, #52]	; (80015ec <mpu6500WriteRegister+0x50>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	b299      	uxth	r1, r3
 80015be:	f107 020c 	add.w	r2, r7, #12
 80015c2:	f04f 33ff 	mov.w	r3, #4294967295
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	2302      	movs	r3, #2
 80015ca:	4809      	ldr	r0, [pc, #36]	; (80015f0 <mpu6500WriteRegister+0x54>)
 80015cc:	f001 fa32 	bl	8002a34 <HAL_I2C_Master_Transmit>
 80015d0:	4603      	mov	r3, r0
 80015d2:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK)
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d002      	beq.n	80015e0 <mpu6500WriteRegister+0x44>
		return -1;
 80015da:	f04f 33ff 	mov.w	r3, #4294967295
 80015de:	e000      	b.n	80015e2 <mpu6500WriteRegister+0x46>
	return 1;
 80015e0:	2301      	movs	r3, #1

	//HAL_Delay(10);
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000040 	.word	0x20000040
 80015f0:	20000130 	.word	0x20000130

080015f4 <mpu6500ReadRegisters>:

static int8_t mpu6500ReadRegisters( uint8_t command, uint8_t count )
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af02      	add	r7, sp, #8
 80015fa:	4603      	mov	r3, r0
 80015fc:	460a      	mov	r2, r1
 80015fe:	71fb      	strb	r3, [r7, #7]
 8001600:	4613      	mov	r3, r2
 8001602:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef status;
	status = HAL_I2C_Master_Transmit(&hi2c1, control.address<<1, &command, 1, HAL_MAX_DELAY);
 8001604:	4b18      	ldr	r3, [pc, #96]	; (8001668 <mpu6500ReadRegisters+0x74>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	b29b      	uxth	r3, r3
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	b299      	uxth	r1, r3
 800160e:	1dfa      	adds	r2, r7, #7
 8001610:	f04f 33ff 	mov.w	r3, #4294967295
 8001614:	9300      	str	r3, [sp, #0]
 8001616:	2301      	movs	r3, #1
 8001618:	4814      	ldr	r0, [pc, #80]	; (800166c <mpu6500ReadRegisters+0x78>)
 800161a:	f001 fa0b 	bl	8002a34 <HAL_I2C_Master_Transmit>
 800161e:	4603      	mov	r3, r0
 8001620:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK)
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d002      	beq.n	800162e <mpu6500ReadRegisters+0x3a>
		return -1;
 8001628:	f04f 33ff 	mov.w	r3, #4294967295
 800162c:	e017      	b.n	800165e <mpu6500ReadRegisters+0x6a>
	status = HAL_I2C_Master_Receive(&hi2c1, control.address<<1, control._buffer, count, HAL_MAX_DELAY);
 800162e:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <mpu6500ReadRegisters+0x74>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	b29b      	uxth	r3, r3
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	b299      	uxth	r1, r3
 8001638:	79bb      	ldrb	r3, [r7, #6]
 800163a:	b29a      	uxth	r2, r3
 800163c:	f04f 33ff 	mov.w	r3, #4294967295
 8001640:	9300      	str	r3, [sp, #0]
 8001642:	4613      	mov	r3, r2
 8001644:	4a0a      	ldr	r2, [pc, #40]	; (8001670 <mpu6500ReadRegisters+0x7c>)
 8001646:	4809      	ldr	r0, [pc, #36]	; (800166c <mpu6500ReadRegisters+0x78>)
 8001648:	f001 fae8 	bl	8002c1c <HAL_I2C_Master_Receive>
 800164c:	4603      	mov	r3, r0
 800164e:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK)
 8001650:	7bfb      	ldrb	r3, [r7, #15]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d002      	beq.n	800165c <mpu6500ReadRegisters+0x68>
		return -1;
 8001656:	f04f 33ff 	mov.w	r3, #4294967295
 800165a:	e000      	b.n	800165e <mpu6500ReadRegisters+0x6a>
	return 1;
 800165c:	2301      	movs	r3, #1
}
 800165e:	4618      	mov	r0, r3
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000040 	.word	0x20000040
 800166c:	20000130 	.word	0x20000130
 8001670:	20000064 	.word	0x20000064

08001674 <mpu6500WhoAmI>:

static int8_t mpu6500WhoAmI( void )
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	if (mpu6500ReadRegisters(MPU6500_WHO_AM_I,1) < 0) {
 8001678:	2101      	movs	r1, #1
 800167a:	2075      	movs	r0, #117	; 0x75
 800167c:	f7ff ffba 	bl	80015f4 <mpu6500ReadRegisters>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	da02      	bge.n	800168c <mpu6500WhoAmI+0x18>
		return -1;
 8001686:	f04f 33ff 	mov.w	r3, #4294967295
 800168a:	e003      	b.n	8001694 <mpu6500WhoAmI+0x20>
	}
	// return the register value
	return control._buffer[0];
 800168c:	4b02      	ldr	r3, [pc, #8]	; (8001698 <mpu6500WhoAmI+0x24>)
 800168e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001692:	b25b      	sxtb	r3, r3
}
 8001694:	4618      	mov	r0, r3
 8001696:	bd80      	pop	{r7, pc}
 8001698:	20000040 	.word	0x20000040

0800169c <mpu6500CalibrateGyro>:

static int8_t mpu6500CalibrateGyro( void )
{
 800169c:	b5b0      	push	{r4, r5, r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
	// set the range, bandwidth, and srd
	if (mpu6500SetGyroRange(MPU6500_GYRO_RANGE_250DPS) < 0) {
 80016a2:	2000      	movs	r0, #0
 80016a4:	f000 f8f4 	bl	8001890 <mpu6500SetGyroRange>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	da02      	bge.n	80016b4 <mpu6500CalibrateGyro+0x18>
		return -1;
 80016ae:	f04f 33ff 	mov.w	r3, #4294967295
 80016b2:	e0e6      	b.n	8001882 <mpu6500CalibrateGyro+0x1e6>
	}
	if (mpu6500SetDlpfBandwidth(MPU6500_DLPF_BANDWIDTH_20HZ) < 0) {
 80016b4:	2003      	movs	r0, #3
 80016b6:	f000 f94b 	bl	8001950 <mpu6500SetDlpfBandwidth>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	da02      	bge.n	80016c6 <mpu6500CalibrateGyro+0x2a>
		return -2;
 80016c0:	f06f 0301 	mvn.w	r3, #1
 80016c4:	e0dd      	b.n	8001882 <mpu6500CalibrateGyro+0x1e6>
	}
	if (mpu6500SetSrd(19) < 0) {
 80016c6:	2013      	movs	r0, #19
 80016c8:	f000 f9e8 	bl	8001a9c <mpu6500SetSrd>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	da02      	bge.n	80016d8 <mpu6500CalibrateGyro+0x3c>
		return -3;
 80016d2:	f06f 0302 	mvn.w	r3, #2
 80016d6:	e0d4      	b.n	8001882 <mpu6500CalibrateGyro+0x1e6>
	}

	// take samples and find bias
	control._gxbD = 0;
 80016d8:	4a6c      	ldr	r2, [pc, #432]	; (800188c <mpu6500CalibrateGyro+0x1f0>)
 80016da:	f04f 0300 	mov.w	r3, #0
 80016de:	f04f 0400 	mov.w	r4, #0
 80016e2:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	control._gybD = 0;
 80016e6:	4a69      	ldr	r2, [pc, #420]	; (800188c <mpu6500CalibrateGyro+0x1f0>)
 80016e8:	f04f 0300 	mov.w	r3, #0
 80016ec:	f04f 0400 	mov.w	r4, #0
 80016f0:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	control._gzbD = 0;
 80016f4:	4a65      	ldr	r2, [pc, #404]	; (800188c <mpu6500CalibrateGyro+0x1f0>)
 80016f6:	f04f 0300 	mov.w	r3, #0
 80016fa:	f04f 0400 	mov.w	r4, #0
 80016fe:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	for (uint8_t i=0; i < control._numSamples; i++) {
 8001702:	2300      	movs	r3, #0
 8001704:	71fb      	strb	r3, [r7, #7]
 8001706:	e073      	b.n	80017f0 <mpu6500CalibrateGyro+0x154>
		mpu6500Read();
 8001708:	f000 fabc 	bl	8001c84 <mpu6500Read>
		control._gxbD += ((mpu6500GetGyroX_rads() + control._gxb)/control._numSamples);
 800170c:	f000 fc96 	bl	800203c <mpu6500GetGyroX_rads>
 8001710:	eeb0 7a40 	vmov.f32	s14, s0
 8001714:	4b5d      	ldr	r3, [pc, #372]	; (800188c <mpu6500CalibrateGyro+0x1f0>)
 8001716:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800171a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800171e:	4b5b      	ldr	r3, [pc, #364]	; (800188c <mpu6500CalibrateGyro+0x1f0>)
 8001720:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001724:	ee07 3a90 	vmov	s15, r3
 8001728:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800172c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001730:	4b56      	ldr	r3, [pc, #344]	; (800188c <mpu6500CalibrateGyro+0x1f0>)
 8001732:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 8001736:	ee16 0a90 	vmov	r0, s13
 800173a:	f7fe feb1 	bl	80004a0 <__aeabi_f2d>
 800173e:	4602      	mov	r2, r0
 8001740:	460b      	mov	r3, r1
 8001742:	4620      	mov	r0, r4
 8001744:	4629      	mov	r1, r5
 8001746:	f7fe fd4d 	bl	80001e4 <__adddf3>
 800174a:	4603      	mov	r3, r0
 800174c:	460c      	mov	r4, r1
 800174e:	4a4f      	ldr	r2, [pc, #316]	; (800188c <mpu6500CalibrateGyro+0x1f0>)
 8001750:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		control._gybD += ((mpu6500GetGyroY_rads() + control._gyb)/control._numSamples);
 8001754:	f000 fc80 	bl	8002058 <mpu6500GetGyroY_rads>
 8001758:	eeb0 7a40 	vmov.f32	s14, s0
 800175c:	4b4b      	ldr	r3, [pc, #300]	; (800188c <mpu6500CalibrateGyro+0x1f0>)
 800175e:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8001762:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001766:	4b49      	ldr	r3, [pc, #292]	; (800188c <mpu6500CalibrateGyro+0x1f0>)
 8001768:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800176c:	ee07 3a90 	vmov	s15, r3
 8001770:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001774:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001778:	4b44      	ldr	r3, [pc, #272]	; (800188c <mpu6500CalibrateGyro+0x1f0>)
 800177a:	e9d3 4518 	ldrd	r4, r5, [r3, #96]	; 0x60
 800177e:	ee16 0a90 	vmov	r0, s13
 8001782:	f7fe fe8d 	bl	80004a0 <__aeabi_f2d>
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	4620      	mov	r0, r4
 800178c:	4629      	mov	r1, r5
 800178e:	f7fe fd29 	bl	80001e4 <__adddf3>
 8001792:	4603      	mov	r3, r0
 8001794:	460c      	mov	r4, r1
 8001796:	4a3d      	ldr	r2, [pc, #244]	; (800188c <mpu6500CalibrateGyro+0x1f0>)
 8001798:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
		control._gzbD += ((mpu6500GetGyroZ_rads() + control._gzb)/control._numSamples);
 800179c:	f000 fc6a 	bl	8002074 <mpu6500GetGyroZ_rads>
 80017a0:	eeb0 7a40 	vmov.f32	s14, s0
 80017a4:	4b39      	ldr	r3, [pc, #228]	; (800188c <mpu6500CalibrateGyro+0x1f0>)
 80017a6:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 80017aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017ae:	4b37      	ldr	r3, [pc, #220]	; (800188c <mpu6500CalibrateGyro+0x1f0>)
 80017b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80017b4:	ee07 3a90 	vmov	s15, r3
 80017b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017bc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80017c0:	4b32      	ldr	r3, [pc, #200]	; (800188c <mpu6500CalibrateGyro+0x1f0>)
 80017c2:	e9d3 451a 	ldrd	r4, r5, [r3, #104]	; 0x68
 80017c6:	ee16 0a90 	vmov	r0, s13
 80017ca:	f7fe fe69 	bl	80004a0 <__aeabi_f2d>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4620      	mov	r0, r4
 80017d4:	4629      	mov	r1, r5
 80017d6:	f7fe fd05 	bl	80001e4 <__adddf3>
 80017da:	4603      	mov	r3, r0
 80017dc:	460c      	mov	r4, r1
 80017de:	4a2b      	ldr	r2, [pc, #172]	; (800188c <mpu6500CalibrateGyro+0x1f0>)
 80017e0:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		HAL_Delay(20);
 80017e4:	2014      	movs	r0, #20
 80017e6:	f000 fdd1 	bl	800238c <HAL_Delay>
	for (uint8_t i=0; i < control._numSamples; i++) {
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	3301      	adds	r3, #1
 80017ee:	71fb      	strb	r3, [r7, #7]
 80017f0:	4b26      	ldr	r3, [pc, #152]	; (800188c <mpu6500CalibrateGyro+0x1f0>)
 80017f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80017f6:	79fa      	ldrb	r2, [r7, #7]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d385      	bcc.n	8001708 <mpu6500CalibrateGyro+0x6c>
	}
	control._gxb = (float)control._gxbD;
 80017fc:	4b23      	ldr	r3, [pc, #140]	; (800188c <mpu6500CalibrateGyro+0x1f0>)
 80017fe:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8001802:	4618      	mov	r0, r3
 8001804:	4621      	mov	r1, r4
 8001806:	f7ff f8b5 	bl	8000974 <__aeabi_d2f>
 800180a:	4602      	mov	r2, r0
 800180c:	4b1f      	ldr	r3, [pc, #124]	; (800188c <mpu6500CalibrateGyro+0x1f0>)
 800180e:	671a      	str	r2, [r3, #112]	; 0x70
	control._gyb = (float)control._gybD;
 8001810:	4b1e      	ldr	r3, [pc, #120]	; (800188c <mpu6500CalibrateGyro+0x1f0>)
 8001812:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8001816:	4618      	mov	r0, r3
 8001818:	4621      	mov	r1, r4
 800181a:	f7ff f8ab 	bl	8000974 <__aeabi_d2f>
 800181e:	4602      	mov	r2, r0
 8001820:	4b1a      	ldr	r3, [pc, #104]	; (800188c <mpu6500CalibrateGyro+0x1f0>)
 8001822:	675a      	str	r2, [r3, #116]	; 0x74
	control._gzb = (float)control._gzbD;
 8001824:	4b19      	ldr	r3, [pc, #100]	; (800188c <mpu6500CalibrateGyro+0x1f0>)
 8001826:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 800182a:	4618      	mov	r0, r3
 800182c:	4621      	mov	r1, r4
 800182e:	f7ff f8a1 	bl	8000974 <__aeabi_d2f>
 8001832:	4602      	mov	r2, r0
 8001834:	4b15      	ldr	r3, [pc, #84]	; (800188c <mpu6500CalibrateGyro+0x1f0>)
 8001836:	679a      	str	r2, [r3, #120]	; 0x78

	// set the range, bandwidth, and srd back to what they were
	if (mpu6500SetGyroRange(control._gyroRange) < 0) {
 8001838:	4b14      	ldr	r3, [pc, #80]	; (800188c <mpu6500CalibrateGyro+0x1f0>)
 800183a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800183e:	4618      	mov	r0, r3
 8001840:	f000 f826 	bl	8001890 <mpu6500SetGyroRange>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	da02      	bge.n	8001850 <mpu6500CalibrateGyro+0x1b4>
		return -4;
 800184a:	f06f 0303 	mvn.w	r3, #3
 800184e:	e018      	b.n	8001882 <mpu6500CalibrateGyro+0x1e6>
	}
	if (mpu6500SetDlpfBandwidth(control._bandwidth) < 0) {
 8001850:	4b0e      	ldr	r3, [pc, #56]	; (800188c <mpu6500CalibrateGyro+0x1f0>)
 8001852:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001856:	4618      	mov	r0, r3
 8001858:	f000 f87a 	bl	8001950 <mpu6500SetDlpfBandwidth>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	da02      	bge.n	8001868 <mpu6500CalibrateGyro+0x1cc>
		return -5;
 8001862:	f06f 0304 	mvn.w	r3, #4
 8001866:	e00c      	b.n	8001882 <mpu6500CalibrateGyro+0x1e6>
	}
	if (mpu6500SetSrd(control._srd) < 0) {
 8001868:	4b08      	ldr	r3, [pc, #32]	; (800188c <mpu6500CalibrateGyro+0x1f0>)
 800186a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800186e:	4618      	mov	r0, r3
 8001870:	f000 f914 	bl	8001a9c <mpu6500SetSrd>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	da02      	bge.n	8001880 <mpu6500CalibrateGyro+0x1e4>
		return -6;
 800187a:	f06f 0305 	mvn.w	r3, #5
 800187e:	e000      	b.n	8001882 <mpu6500CalibrateGyro+0x1e6>
	}
	return 1;
 8001880:	2301      	movs	r3, #1
}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bdb0      	pop	{r4, r5, r7, pc}
 800188a:	bf00      	nop
 800188c:	20000040 	.word	0x20000040

08001890 <mpu6500SetGyroRange>:

static int8_t mpu6500SetGyroRange( MPU6500_GyroRange_t range )
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	71fb      	strb	r3, [r7, #7]
	switch(range) {
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	2b03      	cmp	r3, #3
 800189e:	d843      	bhi.n	8001928 <mpu6500SetGyroRange+0x98>
 80018a0:	a201      	add	r2, pc, #4	; (adr r2, 80018a8 <mpu6500SetGyroRange+0x18>)
 80018a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a6:	bf00      	nop
 80018a8:	080018b9 	.word	0x080018b9
 80018ac:	080018d5 	.word	0x080018d5
 80018b0:	080018f1 	.word	0x080018f1
 80018b4:	0800190d 	.word	0x0800190d
		case MPU6500_GYRO_RANGE_250DPS: {
		  // setting the gyro range to 250DPS
		  if(mpu6500WriteRegister(MPU6500_GYRO_CONFIG, MPU6500_GYRO_FS_SEL_250DPS) < 0){
 80018b8:	2100      	movs	r1, #0
 80018ba:	201b      	movs	r0, #27
 80018bc:	f7ff fe6e 	bl	800159c <mpu6500WriteRegister>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	da02      	bge.n	80018cc <mpu6500SetGyroRange+0x3c>
			return -1;
 80018c6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ca:	e032      	b.n	8001932 <mpu6500SetGyroRange+0xa2>
		  }
        // setting the gyro scale to 250DPS
		  control._gyroScale = 250.0f/32767.5f * MPU6500_D2R;
 80018cc:	4b1b      	ldr	r3, [pc, #108]	; (800193c <mpu6500SetGyroRange+0xac>)
 80018ce:	4a1c      	ldr	r2, [pc, #112]	; (8001940 <mpu6500SetGyroRange+0xb0>)
 80018d0:	609a      	str	r2, [r3, #8]
		  break;
 80018d2:	e029      	b.n	8001928 <mpu6500SetGyroRange+0x98>
		}
		case MPU6500_GYRO_RANGE_500DPS: {
		  // setting the gyro range to 500DPS
		  if(mpu6500WriteRegister(MPU6500_GYRO_CONFIG, MPU6500_GYRO_FS_SEL_500DPS) < 0){
 80018d4:	2108      	movs	r1, #8
 80018d6:	201b      	movs	r0, #27
 80018d8:	f7ff fe60 	bl	800159c <mpu6500WriteRegister>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	da02      	bge.n	80018e8 <mpu6500SetGyroRange+0x58>
			return -1;
 80018e2:	f04f 33ff 	mov.w	r3, #4294967295
 80018e6:	e024      	b.n	8001932 <mpu6500SetGyroRange+0xa2>
		  }
        // setting the gyro scale to 500DPS
		  control._gyroScale = 500.0f/32767.5f * MPU6500_D2R;
 80018e8:	4b14      	ldr	r3, [pc, #80]	; (800193c <mpu6500SetGyroRange+0xac>)
 80018ea:	4a16      	ldr	r2, [pc, #88]	; (8001944 <mpu6500SetGyroRange+0xb4>)
 80018ec:	609a      	str	r2, [r3, #8]
		  break;
 80018ee:	e01b      	b.n	8001928 <mpu6500SetGyroRange+0x98>
		}
		case MPU6500_GYRO_RANGE_1000DPS: {
		  // setting the gyro range to 1000DPS
		  if(mpu6500WriteRegister(MPU6500_GYRO_CONFIG, MPU6500_GYRO_FS_SEL_1000DPS) < 0){
 80018f0:	2110      	movs	r1, #16
 80018f2:	201b      	movs	r0, #27
 80018f4:	f7ff fe52 	bl	800159c <mpu6500WriteRegister>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	da02      	bge.n	8001904 <mpu6500SetGyroRange+0x74>
			return -1;
 80018fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001902:	e016      	b.n	8001932 <mpu6500SetGyroRange+0xa2>
		  }
        // setting the gyro scale to 1000DPS
		  control._gyroScale = 1000.0f/32767.5f * MPU6500_D2R;
 8001904:	4b0d      	ldr	r3, [pc, #52]	; (800193c <mpu6500SetGyroRange+0xac>)
 8001906:	4a10      	ldr	r2, [pc, #64]	; (8001948 <mpu6500SetGyroRange+0xb8>)
 8001908:	609a      	str	r2, [r3, #8]
		  break;
 800190a:	e00d      	b.n	8001928 <mpu6500SetGyroRange+0x98>
		}
		case MPU6500_GYRO_RANGE_2000DPS: {
		  // setting the gyro range to 2000DPS
		  if(mpu6500WriteRegister(MPU6500_GYRO_CONFIG, MPU6500_GYRO_FS_SEL_2000DPS) < 0){
 800190c:	2118      	movs	r1, #24
 800190e:	201b      	movs	r0, #27
 8001910:	f7ff fe44 	bl	800159c <mpu6500WriteRegister>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	da02      	bge.n	8001920 <mpu6500SetGyroRange+0x90>
			return -1;
 800191a:	f04f 33ff 	mov.w	r3, #4294967295
 800191e:	e008      	b.n	8001932 <mpu6500SetGyroRange+0xa2>
		  }
        // setting the gyro scale to 2000DPS
		  control._gyroScale = 2000.0f/32767.5f * MPU6500_D2R;
 8001920:	4b06      	ldr	r3, [pc, #24]	; (800193c <mpu6500SetGyroRange+0xac>)
 8001922:	4a0a      	ldr	r2, [pc, #40]	; (800194c <mpu6500SetGyroRange+0xbc>)
 8001924:	609a      	str	r2, [r3, #8]
		  break;
 8001926:	bf00      	nop
		}
	}
	control._gyroRange = range;
 8001928:	4a04      	ldr	r2, [pc, #16]	; (800193c <mpu6500SetGyroRange+0xac>)
 800192a:	79fb      	ldrb	r3, [r7, #7]
 800192c:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
	return 1;
 8001930:	2301      	movs	r3, #1
}
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000040 	.word	0x20000040
 8001940:	390ba0e4 	.word	0x390ba0e4
 8001944:	398ba0e4 	.word	0x398ba0e4
 8001948:	3a0ba0e4 	.word	0x3a0ba0e4
 800194c:	3a8ba0e4 	.word	0x3a8ba0e4

08001950 <mpu6500SetDlpfBandwidth>:

static int8_t mpu6500SetDlpfBandwidth( MPU6500_DlpfBandwidth_t bandwidth )
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	71fb      	strb	r3, [r7, #7]
	switch (bandwidth) {
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	2b05      	cmp	r3, #5
 800195e:	f200 8092 	bhi.w	8001a86 <mpu6500SetDlpfBandwidth+0x136>
 8001962:	a201      	add	r2, pc, #4	; (adr r2, 8001968 <mpu6500SetDlpfBandwidth+0x18>)
 8001964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001968:	08001981 	.word	0x08001981
 800196c:	080019a9 	.word	0x080019a9
 8001970:	080019d1 	.word	0x080019d1
 8001974:	080019f9 	.word	0x080019f9
 8001978:	08001a21 	.word	0x08001a21
 800197c:	08001a49 	.word	0x08001a49
		case MPU6500_DLPF_BANDWIDTH_184HZ: {
         // setting accel bandwidth to 184Hz
			if (mpu6500WriteRegister(MPU6500_ACCEL_CONFIG2, MPU6500_ACCEL_DLPF_184) < 0) {
 8001980:	2101      	movs	r1, #1
 8001982:	201d      	movs	r0, #29
 8001984:	f7ff fe0a 	bl	800159c <mpu6500WriteRegister>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	da02      	bge.n	8001994 <mpu6500SetDlpfBandwidth+0x44>
				return -1;
 800198e:	f04f 33ff 	mov.w	r3, #4294967295
 8001992:	e07d      	b.n	8001a90 <mpu6500SetDlpfBandwidth+0x140>
			}
         // setting gyro bandwidth to 184Hz
			if (mpu6500WriteRegister(MPU6500_CONFIG, MPU6500_GYRO_DLPF_184) < 0) {
 8001994:	2101      	movs	r1, #1
 8001996:	201a      	movs	r0, #26
 8001998:	f7ff fe00 	bl	800159c <mpu6500WriteRegister>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	da66      	bge.n	8001a70 <mpu6500SetDlpfBandwidth+0x120>
				return -2;
 80019a2:	f06f 0301 	mvn.w	r3, #1
 80019a6:	e073      	b.n	8001a90 <mpu6500SetDlpfBandwidth+0x140>
			}
			break;
		}
		case MPU6500_DLPF_BANDWIDTH_92HZ: {
         // setting accel bandwidth to 92Hz
			if (mpu6500WriteRegister(MPU6500_ACCEL_CONFIG2, MPU6500_ACCEL_DLPF_92) < 0) {
 80019a8:	2102      	movs	r1, #2
 80019aa:	201d      	movs	r0, #29
 80019ac:	f7ff fdf6 	bl	800159c <mpu6500WriteRegister>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	da02      	bge.n	80019bc <mpu6500SetDlpfBandwidth+0x6c>
				return -1;
 80019b6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ba:	e069      	b.n	8001a90 <mpu6500SetDlpfBandwidth+0x140>
			}
         // setting gyro bandwidth to 92Hz
			if (mpu6500WriteRegister(MPU6500_CONFIG, MPU6500_GYRO_DLPF_92) < 0) {
 80019bc:	2102      	movs	r1, #2
 80019be:	201a      	movs	r0, #26
 80019c0:	f7ff fdec 	bl	800159c <mpu6500WriteRegister>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	da54      	bge.n	8001a74 <mpu6500SetDlpfBandwidth+0x124>
				return -2;
 80019ca:	f06f 0301 	mvn.w	r3, #1
 80019ce:	e05f      	b.n	8001a90 <mpu6500SetDlpfBandwidth+0x140>
			}
			break;
		}
		case MPU6500_DLPF_BANDWIDTH_41HZ: {
         // setting accel bandwidth to 41Hz
			if (mpu6500WriteRegister(MPU6500_ACCEL_CONFIG2, MPU6500_ACCEL_DLPF_41) < 0) {
 80019d0:	2103      	movs	r1, #3
 80019d2:	201d      	movs	r0, #29
 80019d4:	f7ff fde2 	bl	800159c <mpu6500WriteRegister>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	da02      	bge.n	80019e4 <mpu6500SetDlpfBandwidth+0x94>
				return -1;
 80019de:	f04f 33ff 	mov.w	r3, #4294967295
 80019e2:	e055      	b.n	8001a90 <mpu6500SetDlpfBandwidth+0x140>
			}
         // setting gyro bandwidth to 41Hz
			if (mpu6500WriteRegister(MPU6500_CONFIG, MPU6500_GYRO_DLPF_41) < 0) {
 80019e4:	2103      	movs	r1, #3
 80019e6:	201a      	movs	r0, #26
 80019e8:	f7ff fdd8 	bl	800159c <mpu6500WriteRegister>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	da42      	bge.n	8001a78 <mpu6500SetDlpfBandwidth+0x128>
				return -2;
 80019f2:	f06f 0301 	mvn.w	r3, #1
 80019f6:	e04b      	b.n	8001a90 <mpu6500SetDlpfBandwidth+0x140>
			}
			break;
		}
		case MPU6500_DLPF_BANDWIDTH_20HZ: {
         // setting accel bandwidth to 20Hz
			if (mpu6500WriteRegister(MPU6500_ACCEL_CONFIG2, MPU6500_ACCEL_DLPF_20) < 0) {
 80019f8:	2104      	movs	r1, #4
 80019fa:	201d      	movs	r0, #29
 80019fc:	f7ff fdce 	bl	800159c <mpu6500WriteRegister>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	da02      	bge.n	8001a0c <mpu6500SetDlpfBandwidth+0xbc>
				return -1;
 8001a06:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0a:	e041      	b.n	8001a90 <mpu6500SetDlpfBandwidth+0x140>
			}
         // setting gyro bandwidth to 20Hz
			if (mpu6500WriteRegister(MPU6500_CONFIG, MPU6500_GYRO_DLPF_20) < 0) {
 8001a0c:	2104      	movs	r1, #4
 8001a0e:	201a      	movs	r0, #26
 8001a10:	f7ff fdc4 	bl	800159c <mpu6500WriteRegister>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	da30      	bge.n	8001a7c <mpu6500SetDlpfBandwidth+0x12c>
				return -2;
 8001a1a:	f06f 0301 	mvn.w	r3, #1
 8001a1e:	e037      	b.n	8001a90 <mpu6500SetDlpfBandwidth+0x140>
			}
			break;
		}
		case MPU6500_DLPF_BANDWIDTH_10HZ: {
         // setting accel bandwidth to 10Hz
			if (mpu6500WriteRegister(MPU6500_ACCEL_CONFIG2, MPU6500_ACCEL_DLPF_10) < 0) {
 8001a20:	2105      	movs	r1, #5
 8001a22:	201d      	movs	r0, #29
 8001a24:	f7ff fdba 	bl	800159c <mpu6500WriteRegister>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	da02      	bge.n	8001a34 <mpu6500SetDlpfBandwidth+0xe4>
				return -1;
 8001a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a32:	e02d      	b.n	8001a90 <mpu6500SetDlpfBandwidth+0x140>
			}
         // setting gyro bandwidth to 10Hz
			if (mpu6500WriteRegister(MPU6500_CONFIG, MPU6500_GYRO_DLPF_10) < 0) {
 8001a34:	2105      	movs	r1, #5
 8001a36:	201a      	movs	r0, #26
 8001a38:	f7ff fdb0 	bl	800159c <mpu6500WriteRegister>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	da1e      	bge.n	8001a80 <mpu6500SetDlpfBandwidth+0x130>
				return -2;
 8001a42:	f06f 0301 	mvn.w	r3, #1
 8001a46:	e023      	b.n	8001a90 <mpu6500SetDlpfBandwidth+0x140>
			}
			break;
		}
		case MPU6500_DLPF_BANDWIDTH_5HZ: {
         // setting accel bandwidth to 5Hz
			if (mpu6500WriteRegister(MPU6500_ACCEL_CONFIG2, MPU6500_ACCEL_DLPF_5) < 0) {
 8001a48:	2106      	movs	r1, #6
 8001a4a:	201d      	movs	r0, #29
 8001a4c:	f7ff fda6 	bl	800159c <mpu6500WriteRegister>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	da02      	bge.n	8001a5c <mpu6500SetDlpfBandwidth+0x10c>
				return -1;
 8001a56:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5a:	e019      	b.n	8001a90 <mpu6500SetDlpfBandwidth+0x140>
			}
         // setting gyro bandwidth to 5Hz
			if (mpu6500WriteRegister(MPU6500_CONFIG, MPU6500_GYRO_DLPF_5) < 0) {
 8001a5c:	2106      	movs	r1, #6
 8001a5e:	201a      	movs	r0, #26
 8001a60:	f7ff fd9c 	bl	800159c <mpu6500WriteRegister>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	da0c      	bge.n	8001a84 <mpu6500SetDlpfBandwidth+0x134>
				return -2;
 8001a6a:	f06f 0301 	mvn.w	r3, #1
 8001a6e:	e00f      	b.n	8001a90 <mpu6500SetDlpfBandwidth+0x140>
			break;
 8001a70:	bf00      	nop
 8001a72:	e008      	b.n	8001a86 <mpu6500SetDlpfBandwidth+0x136>
			break;
 8001a74:	bf00      	nop
 8001a76:	e006      	b.n	8001a86 <mpu6500SetDlpfBandwidth+0x136>
			break;
 8001a78:	bf00      	nop
 8001a7a:	e004      	b.n	8001a86 <mpu6500SetDlpfBandwidth+0x136>
			break;
 8001a7c:	bf00      	nop
 8001a7e:	e002      	b.n	8001a86 <mpu6500SetDlpfBandwidth+0x136>
			break;
 8001a80:	bf00      	nop
 8001a82:	e000      	b.n	8001a86 <mpu6500SetDlpfBandwidth+0x136>
			}
			break;
 8001a84:	bf00      	nop
		}
	}
	control._bandwidth = bandwidth;
 8001a86:	4a04      	ldr	r2, [pc, #16]	; (8001a98 <mpu6500SetDlpfBandwidth+0x148>)
 8001a88:	79fb      	ldrb	r3, [r7, #7]
 8001a8a:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
	return 1;
 8001a8e:	2301      	movs	r3, #1
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	20000040 	.word	0x20000040

08001a9c <mpu6500SetSrd>:

static int8_t mpu6500SetSrd( uint8_t srd )
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	71fb      	strb	r3, [r7, #7]
	/* setting the sample rate divider to 19 to facilitate setting up 
      magnetometer */
   // setting the sample rate divider
	if (mpu6500WriteRegister(MPU6500_SMPDIV, 19) < 0) {
 8001aa6:	2113      	movs	r1, #19
 8001aa8:	2019      	movs	r0, #25
 8001aaa:	f7ff fd77 	bl	800159c <mpu6500WriteRegister>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	da02      	bge.n	8001aba <mpu6500SetSrd+0x1e>
		return -1;
 8001ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab8:	e00f      	b.n	8001ada <mpu6500SetSrd+0x3e>
	}
	/* setting the sample rate divider */
	if (mpu6500WriteRegister(MPU6500_SMPDIV, srd) < 0) { // setting the sample rate divider
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	4619      	mov	r1, r3
 8001abe:	2019      	movs	r0, #25
 8001ac0:	f7ff fd6c 	bl	800159c <mpu6500WriteRegister>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	da02      	bge.n	8001ad0 <mpu6500SetSrd+0x34>
		return -4;
 8001aca:	f06f 0303 	mvn.w	r3, #3
 8001ace:	e004      	b.n	8001ada <mpu6500SetSrd+0x3e>
	}
	control._srd = srd;
 8001ad0:	4a04      	ldr	r2, [pc, #16]	; (8001ae4 <mpu6500SetSrd+0x48>)
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
 8001ad4:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
	return 1;
 8001ad8:	2301      	movs	r3, #1
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000040 	.word	0x20000040

08001ae8 <mpu6500Init>:

/*==================[external functions definition]==========================*/

//Initialize MPU6500 (TODO: include SPI communication)
int8_t mpu6500Init( MPU6500_address_t address )
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	71fb      	strb	r3, [r7, #7]
	mpu6500InitializeControlStructure();
 8001af2:	f7ff fd07 	bl	8001504 <mpu6500InitializeControlStructure>

	control.address = address;
 8001af6:	4a60      	ldr	r2, [pc, #384]	; (8001c78 <mpu6500Init+0x190>)
 8001af8:	79fb      	ldrb	r3, [r7, #7]
 8001afa:	7013      	strb	r3, [r2, #0]

	// using I2C for communication
	// starting the I2C bus
	MX_I2C1_Init(); //i2cInit(I2C0, MPU6500_I2C_RATE);
 8001afc:	f7ff faf8 	bl	80010f0 <MX_I2C1_Init>

	// select clock source to gyro
	if (mpu6500WriteRegister(MPU6500_PWR_MGMNT_1, MPU6500_CLOCK_SEL_PLL) < 0) {
 8001b00:	2101      	movs	r1, #1
 8001b02:	206b      	movs	r0, #107	; 0x6b
 8001b04:	f7ff fd4a 	bl	800159c <mpu6500WriteRegister>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	da02      	bge.n	8001b14 <mpu6500Init+0x2c>
		return -1;
 8001b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b12:	e0ad      	b.n	8001c70 <mpu6500Init+0x188>
	}
	// enable I2C master mode
	if (mpu6500WriteRegister(MPU6500_USER_CTRL, MPU6500_I2C_MST_EN) < 0) {
 8001b14:	2120      	movs	r1, #32
 8001b16:	206a      	movs	r0, #106	; 0x6a
 8001b18:	f7ff fd40 	bl	800159c <mpu6500WriteRegister>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	da02      	bge.n	8001b28 <mpu6500Init+0x40>
		return -2;
 8001b22:	f06f 0301 	mvn.w	r3, #1
 8001b26:	e0a3      	b.n	8001c70 <mpu6500Init+0x188>
	}
	// set the I2C bus speed to 400 kHz
	if (mpu6500WriteRegister(MPU6500_I2C_MST_CTRL, MPU6500_I2C_MST_CLK) < 0) {
 8001b28:	210d      	movs	r1, #13
 8001b2a:	2024      	movs	r0, #36	; 0x24
 8001b2c:	f7ff fd36 	bl	800159c <mpu6500WriteRegister>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	da02      	bge.n	8001b3c <mpu6500Init+0x54>
		return -3;
 8001b36:	f06f 0302 	mvn.w	r3, #2
 8001b3a:	e099      	b.n	8001c70 <mpu6500Init+0x188>
	}
	// reset the MPU6500
	mpu6500WriteRegister(MPU6500_PWR_MGMNT_1, MPU6500_PWR_RESET);
 8001b3c:	2180      	movs	r1, #128	; 0x80
 8001b3e:	206b      	movs	r0, #107	; 0x6b
 8001b40:	f7ff fd2c 	bl	800159c <mpu6500WriteRegister>
	// wait for MPU-6500 to come back up
	HAL_Delay(1);
 8001b44:	2001      	movs	r0, #1
 8001b46:	f000 fc21 	bl	800238c <HAL_Delay>
	// select clock source to gyro
	if (mpu6500WriteRegister(MPU6500_PWR_MGMNT_1, MPU6500_CLOCK_SEL_PLL) < 0) {
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	206b      	movs	r0, #107	; 0x6b
 8001b4e:	f7ff fd25 	bl	800159c <mpu6500WriteRegister>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	da02      	bge.n	8001b5e <mpu6500Init+0x76>
		return -4;
 8001b58:	f06f 0303 	mvn.w	r3, #3
 8001b5c:	e088      	b.n	8001c70 <mpu6500Init+0x188>
	}
	// check the WHO AM I byte, expected value is 0x70 (decimal 112) or 0x73 (decimal 115)
	if ((mpu6500WhoAmI() != 112) && (mpu6500WhoAmI() != 115)) {
 8001b5e:	f7ff fd89 	bl	8001674 <mpu6500WhoAmI>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b70      	cmp	r3, #112	; 0x70
 8001b66:	d007      	beq.n	8001b78 <mpu6500Init+0x90>
 8001b68:	f7ff fd84 	bl	8001674 <mpu6500WhoAmI>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b73      	cmp	r3, #115	; 0x73
 8001b70:	d002      	beq.n	8001b78 <mpu6500Init+0x90>
		return -5;
 8001b72:	f06f 0304 	mvn.w	r3, #4
 8001b76:	e07b      	b.n	8001c70 <mpu6500Init+0x188>
	}
	// enable accelerometer and gyro
	if (mpu6500WriteRegister(MPU6500_PWR_MGMNT_2, MPU6500_SEN_ENABLE) < 0) {
 8001b78:	2100      	movs	r1, #0
 8001b7a:	206c      	movs	r0, #108	; 0x6c
 8001b7c:	f7ff fd0e 	bl	800159c <mpu6500WriteRegister>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	da02      	bge.n	8001b8c <mpu6500Init+0xa4>
		return -6;
 8001b86:	f06f 0305 	mvn.w	r3, #5
 8001b8a:	e071      	b.n	8001c70 <mpu6500Init+0x188>
	}
	// setting accel range to 16G as default
	if (mpu6500WriteRegister(MPU6500_ACCEL_CONFIG, MPU6500_ACCEL_FS_SEL_16G) < 0) {
 8001b8c:	2118      	movs	r1, #24
 8001b8e:	201c      	movs	r0, #28
 8001b90:	f7ff fd04 	bl	800159c <mpu6500WriteRegister>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	da02      	bge.n	8001ba0 <mpu6500Init+0xb8>
		return -7;
 8001b9a:	f06f 0306 	mvn.w	r3, #6
 8001b9e:	e067      	b.n	8001c70 <mpu6500Init+0x188>
	}
	control._accelScale = MPU6500_G * 16.0f / 32767.5f; // setting the accel scale to 16G
 8001ba0:	4b35      	ldr	r3, [pc, #212]	; (8001c78 <mpu6500Init+0x190>)
 8001ba2:	4a36      	ldr	r2, [pc, #216]	; (8001c7c <mpu6500Init+0x194>)
 8001ba4:	605a      	str	r2, [r3, #4]
	control._accelRange = MPU6500_ACCEL_RANGE_16G;
 8001ba6:	4b34      	ldr	r3, [pc, #208]	; (8001c78 <mpu6500Init+0x190>)
 8001ba8:	2203      	movs	r2, #3
 8001baa:	f883 2020 	strb.w	r2, [r3, #32]
	// setting the gyro range to 2000DPS as default
	if (mpu6500WriteRegister(MPU6500_GYRO_CONFIG, MPU6500_GYRO_FS_SEL_2000DPS) < 0) {
 8001bae:	2118      	movs	r1, #24
 8001bb0:	201b      	movs	r0, #27
 8001bb2:	f7ff fcf3 	bl	800159c <mpu6500WriteRegister>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	da02      	bge.n	8001bc2 <mpu6500Init+0xda>
		return -8;
 8001bbc:	f06f 0307 	mvn.w	r3, #7
 8001bc0:	e056      	b.n	8001c70 <mpu6500Init+0x188>
	}
   // setting the gyro scale to 2000DPS
	control._gyroScale = 2000.0f / 32767.5f * MPU6500_D2R;
 8001bc2:	4b2d      	ldr	r3, [pc, #180]	; (8001c78 <mpu6500Init+0x190>)
 8001bc4:	4a2e      	ldr	r2, [pc, #184]	; (8001c80 <mpu6500Init+0x198>)
 8001bc6:	609a      	str	r2, [r3, #8]
	control._gyroRange = MPU6500_GYRO_RANGE_2000DPS;
 8001bc8:	4b2b      	ldr	r3, [pc, #172]	; (8001c78 <mpu6500Init+0x190>)
 8001bca:	2203      	movs	r2, #3
 8001bcc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	// setting bandwidth to 184Hz as default
	if (mpu6500WriteRegister(MPU6500_ACCEL_CONFIG2, MPU6500_ACCEL_DLPF_184) < 0) {
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	201d      	movs	r0, #29
 8001bd4:	f7ff fce2 	bl	800159c <mpu6500WriteRegister>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	da02      	bge.n	8001be4 <mpu6500Init+0xfc>
		return -9;
 8001bde:	f06f 0308 	mvn.w	r3, #8
 8001be2:	e045      	b.n	8001c70 <mpu6500Init+0x188>
	}
   // setting gyro bandwidth to 184Hz
	if (mpu6500WriteRegister(MPU6500_CONFIG, MPU6500_GYRO_DLPF_184) < 0) {
 8001be4:	2101      	movs	r1, #1
 8001be6:	201a      	movs	r0, #26
 8001be8:	f7ff fcd8 	bl	800159c <mpu6500WriteRegister>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	da02      	bge.n	8001bf8 <mpu6500Init+0x110>
		return -10;
 8001bf2:	f06f 0309 	mvn.w	r3, #9
 8001bf6:	e03b      	b.n	8001c70 <mpu6500Init+0x188>
	}
	control._bandwidth = MPU6500_DLPF_BANDWIDTH_184HZ;
 8001bf8:	4b1f      	ldr	r3, [pc, #124]	; (8001c78 <mpu6500Init+0x190>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	// setting the sample rate divider to 0 as default
	if (mpu6500WriteRegister(MPU6500_SMPDIV, 0x00) < 0) {
 8001c00:	2100      	movs	r1, #0
 8001c02:	2019      	movs	r0, #25
 8001c04:	f7ff fcca 	bl	800159c <mpu6500WriteRegister>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	da02      	bge.n	8001c14 <mpu6500Init+0x12c>
		return -11;
 8001c0e:	f06f 030a 	mvn.w	r3, #10
 8001c12:	e02d      	b.n	8001c70 <mpu6500Init+0x188>
	}
	control._srd = 0;
 8001c14:	4b18      	ldr	r3, [pc, #96]	; (8001c78 <mpu6500Init+0x190>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	// enable I2C master mode
	if (mpu6500WriteRegister(MPU6500_USER_CTRL, MPU6500_I2C_MST_EN) < 0) {
 8001c1c:	2120      	movs	r1, #32
 8001c1e:	206a      	movs	r0, #106	; 0x6a
 8001c20:	f7ff fcbc 	bl	800159c <mpu6500WriteRegister>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	da02      	bge.n	8001c30 <mpu6500Init+0x148>
		return -12;
 8001c2a:	f06f 030b 	mvn.w	r3, #11
 8001c2e:	e01f      	b.n	8001c70 <mpu6500Init+0x188>
	}
	// set the I2C bus speed to 400 kHz
	if (mpu6500WriteRegister(MPU6500_I2C_MST_CTRL, MPU6500_I2C_MST_CLK) < 0) {
 8001c30:	210d      	movs	r1, #13
 8001c32:	2024      	movs	r0, #36	; 0x24
 8001c34:	f7ff fcb2 	bl	800159c <mpu6500WriteRegister>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	da02      	bge.n	8001c44 <mpu6500Init+0x15c>
		return -13;
 8001c3e:	f06f 030c 	mvn.w	r3, #12
 8001c42:	e015      	b.n	8001c70 <mpu6500Init+0x188>
	}
	HAL_Delay(100); // long wait between AK8963 mode changes
 8001c44:	2064      	movs	r0, #100	; 0x64
 8001c46:	f000 fba1 	bl	800238c <HAL_Delay>
	// select clock source to gyro
	if (mpu6500WriteRegister(MPU6500_PWR_MGMNT_1, MPU6500_CLOCK_SEL_PLL) < 0) {
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	206b      	movs	r0, #107	; 0x6b
 8001c4e:	f7ff fca5 	bl	800159c <mpu6500WriteRegister>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	da02      	bge.n	8001c5e <mpu6500Init+0x176>
		return -19;
 8001c58:	f06f 0312 	mvn.w	r3, #18
 8001c5c:	e008      	b.n	8001c70 <mpu6500Init+0x188>
	}
	// estimate gyro bias
	if (mpu6500CalibrateGyro() < 0) {
 8001c5e:	f7ff fd1d 	bl	800169c <mpu6500CalibrateGyro>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	da02      	bge.n	8001c6e <mpu6500Init+0x186>
		return -20;
 8001c68:	f06f 0313 	mvn.w	r3, #19
 8001c6c:	e000      	b.n	8001c70 <mpu6500Init+0x188>
	}
	// successful init, return 1
	return 1;
 8001c6e:	2301      	movs	r3, #1
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20000040 	.word	0x20000040
 8001c7c:	3b9cea16 	.word	0x3b9cea16
 8001c80:	3a8ba0e4 	.word	0x3a8ba0e4

08001c84 <mpu6500Read>:

//Read sensor registers and store data at control structure
bool mpu6500Read(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
	// grab the data from the MPU6500
	if( !mpu6500ReadRegisters(MPU6500_ACCEL_OUT, 21) ){
 8001c88:	2115      	movs	r1, #21
 8001c8a:	203b      	movs	r0, #59	; 0x3b
 8001c8c:	f7ff fcb2 	bl	80015f4 <mpu6500ReadRegisters>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <mpu6500Read+0x16>
		return 0;
 8001c96:	2300      	movs	r3, #0
 8001c98:	e1a1      	b.n	8001fde <mpu6500Read+0x35a>
	}
	// combine into 16 bit values
	control._axcounts = (((int16_t)control._buffer[0]) << 8)  | control._buffer[1];
 8001c9a:	4bcb      	ldr	r3, [pc, #812]	; (8001fc8 <mpu6500Read+0x344>)
 8001c9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ca0:	021b      	lsls	r3, r3, #8
 8001ca2:	b21a      	sxth	r2, r3
 8001ca4:	4bc8      	ldr	r3, [pc, #800]	; (8001fc8 <mpu6500Read+0x344>)
 8001ca6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001caa:	b21b      	sxth	r3, r3
 8001cac:	4313      	orrs	r3, r2
 8001cae:	b21a      	sxth	r2, r3
 8001cb0:	4bc5      	ldr	r3, [pc, #788]	; (8001fc8 <mpu6500Read+0x344>)
 8001cb2:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
	control._aycounts = (((int16_t)control._buffer[2]) << 8)  | control._buffer[3];
 8001cb6:	4bc4      	ldr	r3, [pc, #784]	; (8001fc8 <mpu6500Read+0x344>)
 8001cb8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001cbc:	021b      	lsls	r3, r3, #8
 8001cbe:	b21a      	sxth	r2, r3
 8001cc0:	4bc1      	ldr	r3, [pc, #772]	; (8001fc8 <mpu6500Read+0x344>)
 8001cc2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001cc6:	b21b      	sxth	r3, r3
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	b21a      	sxth	r2, r3
 8001ccc:	4bbe      	ldr	r3, [pc, #760]	; (8001fc8 <mpu6500Read+0x344>)
 8001cce:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
	control._azcounts = (((int16_t)control._buffer[4]) << 8)  | control._buffer[5];
 8001cd2:	4bbd      	ldr	r3, [pc, #756]	; (8001fc8 <mpu6500Read+0x344>)
 8001cd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001cd8:	021b      	lsls	r3, r3, #8
 8001cda:	b21a      	sxth	r2, r3
 8001cdc:	4bba      	ldr	r3, [pc, #744]	; (8001fc8 <mpu6500Read+0x344>)
 8001cde:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001ce2:	b21b      	sxth	r3, r3
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	b21a      	sxth	r2, r3
 8001ce8:	4bb7      	ldr	r3, [pc, #732]	; (8001fc8 <mpu6500Read+0x344>)
 8001cea:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
	control._tcounts  = (((int16_t)control._buffer[6]) << 8)  | control._buffer[7];
 8001cee:	4bb6      	ldr	r3, [pc, #728]	; (8001fc8 <mpu6500Read+0x344>)
 8001cf0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001cf4:	021b      	lsls	r3, r3, #8
 8001cf6:	b21a      	sxth	r2, r3
 8001cf8:	4bb3      	ldr	r3, [pc, #716]	; (8001fc8 <mpu6500Read+0x344>)
 8001cfa:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001cfe:	b21b      	sxth	r3, r3
 8001d00:	4313      	orrs	r3, r2
 8001d02:	b21a      	sxth	r2, r3
 8001d04:	4bb0      	ldr	r3, [pc, #704]	; (8001fc8 <mpu6500Read+0x344>)
 8001d06:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
	control._gxcounts = (((int16_t)control._buffer[8]) << 8)  | control._buffer[9];
 8001d0a:	4baf      	ldr	r3, [pc, #700]	; (8001fc8 <mpu6500Read+0x344>)
 8001d0c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001d10:	021b      	lsls	r3, r3, #8
 8001d12:	b21a      	sxth	r2, r3
 8001d14:	4bac      	ldr	r3, [pc, #688]	; (8001fc8 <mpu6500Read+0x344>)
 8001d16:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001d1a:	b21b      	sxth	r3, r3
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	b21a      	sxth	r2, r3
 8001d20:	4ba9      	ldr	r3, [pc, #676]	; (8001fc8 <mpu6500Read+0x344>)
 8001d22:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
	control._gycounts = (((int16_t)control._buffer[10]) << 8) | control._buffer[11];
 8001d26:	4ba8      	ldr	r3, [pc, #672]	; (8001fc8 <mpu6500Read+0x344>)
 8001d28:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001d2c:	021b      	lsls	r3, r3, #8
 8001d2e:	b21a      	sxth	r2, r3
 8001d30:	4ba5      	ldr	r3, [pc, #660]	; (8001fc8 <mpu6500Read+0x344>)
 8001d32:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001d36:	b21b      	sxth	r3, r3
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	b21a      	sxth	r2, r3
 8001d3c:	4ba2      	ldr	r3, [pc, #648]	; (8001fc8 <mpu6500Read+0x344>)
 8001d3e:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
	control._gzcounts = (((int16_t)control._buffer[12]) << 8) | control._buffer[13];
 8001d42:	4ba1      	ldr	r3, [pc, #644]	; (8001fc8 <mpu6500Read+0x344>)
 8001d44:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d48:	021b      	lsls	r3, r3, #8
 8001d4a:	b21a      	sxth	r2, r3
 8001d4c:	4b9e      	ldr	r3, [pc, #632]	; (8001fc8 <mpu6500Read+0x344>)
 8001d4e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001d52:	b21b      	sxth	r3, r3
 8001d54:	4313      	orrs	r3, r2
 8001d56:	b21a      	sxth	r2, r3
 8001d58:	4b9b      	ldr	r3, [pc, #620]	; (8001fc8 <mpu6500Read+0x344>)
 8001d5a:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
	// transform and convert to float values
	control._ax = (((float)(control.tX[0]*control._axcounts + control.tX[1]*control._aycounts + control.tX[2]*control._azcounts) * control._accelScale) - control._axb)*control._axs;
 8001d5e:	4b9a      	ldr	r3, [pc, #616]	; (8001fc8 <mpu6500Read+0x344>)
 8001d60:	f9b3 30d6 	ldrsh.w	r3, [r3, #214]	; 0xd6
 8001d64:	461a      	mov	r2, r3
 8001d66:	4b98      	ldr	r3, [pc, #608]	; (8001fc8 <mpu6500Read+0x344>)
 8001d68:	f9b3 30c8 	ldrsh.w	r3, [r3, #200]	; 0xc8
 8001d6c:	fb03 f202 	mul.w	r2, r3, r2
 8001d70:	4b95      	ldr	r3, [pc, #596]	; (8001fc8 <mpu6500Read+0x344>)
 8001d72:	f9b3 30d8 	ldrsh.w	r3, [r3, #216]	; 0xd8
 8001d76:	4619      	mov	r1, r3
 8001d78:	4b93      	ldr	r3, [pc, #588]	; (8001fc8 <mpu6500Read+0x344>)
 8001d7a:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 8001d7e:	fb03 f301 	mul.w	r3, r3, r1
 8001d82:	441a      	add	r2, r3
 8001d84:	4b90      	ldr	r3, [pc, #576]	; (8001fc8 <mpu6500Read+0x344>)
 8001d86:	f9b3 30da 	ldrsh.w	r3, [r3, #218]	; 0xda
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4b8e      	ldr	r3, [pc, #568]	; (8001fc8 <mpu6500Read+0x344>)
 8001d8e:	f9b3 30cc 	ldrsh.w	r3, [r3, #204]	; 0xcc
 8001d92:	fb03 f301 	mul.w	r3, r3, r1
 8001d96:	4413      	add	r3, r2
 8001d98:	ee07 3a90 	vmov	s15, r3
 8001d9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001da0:	4b89      	ldr	r3, [pc, #548]	; (8001fc8 <mpu6500Read+0x344>)
 8001da2:	edd3 7a01 	vldr	s15, [r3, #4]
 8001da6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001daa:	4b87      	ldr	r3, [pc, #540]	; (8001fc8 <mpu6500Read+0x344>)
 8001dac:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8001db0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001db4:	4b84      	ldr	r3, [pc, #528]	; (8001fc8 <mpu6500Read+0x344>)
 8001db6:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8001dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dbe:	4b82      	ldr	r3, [pc, #520]	; (8001fc8 <mpu6500Read+0x344>)
 8001dc0:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	control._ay = (((float)(control.tY[0]*control._axcounts + control.tY[1]*control._aycounts + control.tY[2]*control._azcounts) * control._accelScale) - control._ayb)*control._ays;
 8001dc4:	4b80      	ldr	r3, [pc, #512]	; (8001fc8 <mpu6500Read+0x344>)
 8001dc6:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8001dca:	461a      	mov	r2, r3
 8001dcc:	4b7e      	ldr	r3, [pc, #504]	; (8001fc8 <mpu6500Read+0x344>)
 8001dce:	f9b3 30c8 	ldrsh.w	r3, [r3, #200]	; 0xc8
 8001dd2:	fb03 f202 	mul.w	r2, r3, r2
 8001dd6:	4b7c      	ldr	r3, [pc, #496]	; (8001fc8 <mpu6500Read+0x344>)
 8001dd8:	f9b3 30de 	ldrsh.w	r3, [r3, #222]	; 0xde
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4b7a      	ldr	r3, [pc, #488]	; (8001fc8 <mpu6500Read+0x344>)
 8001de0:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 8001de4:	fb03 f301 	mul.w	r3, r3, r1
 8001de8:	441a      	add	r2, r3
 8001dea:	4b77      	ldr	r3, [pc, #476]	; (8001fc8 <mpu6500Read+0x344>)
 8001dec:	f9b3 30e0 	ldrsh.w	r3, [r3, #224]	; 0xe0
 8001df0:	4619      	mov	r1, r3
 8001df2:	4b75      	ldr	r3, [pc, #468]	; (8001fc8 <mpu6500Read+0x344>)
 8001df4:	f9b3 30cc 	ldrsh.w	r3, [r3, #204]	; 0xcc
 8001df8:	fb03 f301 	mul.w	r3, r3, r1
 8001dfc:	4413      	add	r3, r2
 8001dfe:	ee07 3a90 	vmov	s15, r3
 8001e02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e06:	4b70      	ldr	r3, [pc, #448]	; (8001fc8 <mpu6500Read+0x344>)
 8001e08:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e10:	4b6d      	ldr	r3, [pc, #436]	; (8001fc8 <mpu6500Read+0x344>)
 8001e12:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8001e16:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e1a:	4b6b      	ldr	r3, [pc, #428]	; (8001fc8 <mpu6500Read+0x344>)
 8001e1c:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 8001e20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e24:	4b68      	ldr	r3, [pc, #416]	; (8001fc8 <mpu6500Read+0x344>)
 8001e26:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	control._az = (((float)(control.tZ[0]*control._axcounts + control.tZ[1]*control._aycounts + control.tZ[2]*control._azcounts) * control._accelScale) - control._azb)*control._azs;
 8001e2a:	4b67      	ldr	r3, [pc, #412]	; (8001fc8 <mpu6500Read+0x344>)
 8001e2c:	f9b3 30e2 	ldrsh.w	r3, [r3, #226]	; 0xe2
 8001e30:	461a      	mov	r2, r3
 8001e32:	4b65      	ldr	r3, [pc, #404]	; (8001fc8 <mpu6500Read+0x344>)
 8001e34:	f9b3 30c8 	ldrsh.w	r3, [r3, #200]	; 0xc8
 8001e38:	fb03 f202 	mul.w	r2, r3, r2
 8001e3c:	4b62      	ldr	r3, [pc, #392]	; (8001fc8 <mpu6500Read+0x344>)
 8001e3e:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 8001e42:	4619      	mov	r1, r3
 8001e44:	4b60      	ldr	r3, [pc, #384]	; (8001fc8 <mpu6500Read+0x344>)
 8001e46:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 8001e4a:	fb03 f301 	mul.w	r3, r3, r1
 8001e4e:	441a      	add	r2, r3
 8001e50:	4b5d      	ldr	r3, [pc, #372]	; (8001fc8 <mpu6500Read+0x344>)
 8001e52:	f9b3 30e6 	ldrsh.w	r3, [r3, #230]	; 0xe6
 8001e56:	4619      	mov	r1, r3
 8001e58:	4b5b      	ldr	r3, [pc, #364]	; (8001fc8 <mpu6500Read+0x344>)
 8001e5a:	f9b3 30cc 	ldrsh.w	r3, [r3, #204]	; 0xcc
 8001e5e:	fb03 f301 	mul.w	r3, r3, r1
 8001e62:	4413      	add	r3, r2
 8001e64:	ee07 3a90 	vmov	s15, r3
 8001e68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e6c:	4b56      	ldr	r3, [pc, #344]	; (8001fc8 <mpu6500Read+0x344>)
 8001e6e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e76:	4b54      	ldr	r3, [pc, #336]	; (8001fc8 <mpu6500Read+0x344>)
 8001e78:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8001e7c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e80:	4b51      	ldr	r3, [pc, #324]	; (8001fc8 <mpu6500Read+0x344>)
 8001e82:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8001e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e8a:	4b4f      	ldr	r3, [pc, #316]	; (8001fc8 <mpu6500Read+0x344>)
 8001e8c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	control._gx = ((float) (control.tX[0]*control._gxcounts + control.tX[1]*control._gycounts + control.tX[2]*control._gzcounts) * control._gyroScale) -  control._gxb;
 8001e90:	4b4d      	ldr	r3, [pc, #308]	; (8001fc8 <mpu6500Read+0x344>)
 8001e92:	f9b3 30d6 	ldrsh.w	r3, [r3, #214]	; 0xd6
 8001e96:	461a      	mov	r2, r3
 8001e98:	4b4b      	ldr	r3, [pc, #300]	; (8001fc8 <mpu6500Read+0x344>)
 8001e9a:	f9b3 30ce 	ldrsh.w	r3, [r3, #206]	; 0xce
 8001e9e:	fb03 f202 	mul.w	r2, r3, r2
 8001ea2:	4b49      	ldr	r3, [pc, #292]	; (8001fc8 <mpu6500Read+0x344>)
 8001ea4:	f9b3 30d8 	ldrsh.w	r3, [r3, #216]	; 0xd8
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4b47      	ldr	r3, [pc, #284]	; (8001fc8 <mpu6500Read+0x344>)
 8001eac:	f9b3 30d0 	ldrsh.w	r3, [r3, #208]	; 0xd0
 8001eb0:	fb03 f301 	mul.w	r3, r3, r1
 8001eb4:	441a      	add	r2, r3
 8001eb6:	4b44      	ldr	r3, [pc, #272]	; (8001fc8 <mpu6500Read+0x344>)
 8001eb8:	f9b3 30da 	ldrsh.w	r3, [r3, #218]	; 0xda
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4b42      	ldr	r3, [pc, #264]	; (8001fc8 <mpu6500Read+0x344>)
 8001ec0:	f9b3 30d2 	ldrsh.w	r3, [r3, #210]	; 0xd2
 8001ec4:	fb03 f301 	mul.w	r3, r3, r1
 8001ec8:	4413      	add	r3, r2
 8001eca:	ee07 3a90 	vmov	s15, r3
 8001ece:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ed2:	4b3d      	ldr	r3, [pc, #244]	; (8001fc8 <mpu6500Read+0x344>)
 8001ed4:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ed8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001edc:	4b3a      	ldr	r3, [pc, #232]	; (8001fc8 <mpu6500Read+0x344>)
 8001ede:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8001ee2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ee6:	4b38      	ldr	r3, [pc, #224]	; (8001fc8 <mpu6500Read+0x344>)
 8001ee8:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	control._gy = ((float) (control.tY[0]*control._gxcounts + control.tY[1]*control._gycounts + control.tY[2]*control._gzcounts) * control._gyroScale) -  control._gyb;
 8001eec:	4b36      	ldr	r3, [pc, #216]	; (8001fc8 <mpu6500Read+0x344>)
 8001eee:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	4b34      	ldr	r3, [pc, #208]	; (8001fc8 <mpu6500Read+0x344>)
 8001ef6:	f9b3 30ce 	ldrsh.w	r3, [r3, #206]	; 0xce
 8001efa:	fb03 f202 	mul.w	r2, r3, r2
 8001efe:	4b32      	ldr	r3, [pc, #200]	; (8001fc8 <mpu6500Read+0x344>)
 8001f00:	f9b3 30de 	ldrsh.w	r3, [r3, #222]	; 0xde
 8001f04:	4619      	mov	r1, r3
 8001f06:	4b30      	ldr	r3, [pc, #192]	; (8001fc8 <mpu6500Read+0x344>)
 8001f08:	f9b3 30d0 	ldrsh.w	r3, [r3, #208]	; 0xd0
 8001f0c:	fb03 f301 	mul.w	r3, r3, r1
 8001f10:	441a      	add	r2, r3
 8001f12:	4b2d      	ldr	r3, [pc, #180]	; (8001fc8 <mpu6500Read+0x344>)
 8001f14:	f9b3 30e0 	ldrsh.w	r3, [r3, #224]	; 0xe0
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4b2b      	ldr	r3, [pc, #172]	; (8001fc8 <mpu6500Read+0x344>)
 8001f1c:	f9b3 30d2 	ldrsh.w	r3, [r3, #210]	; 0xd2
 8001f20:	fb03 f301 	mul.w	r3, r3, r1
 8001f24:	4413      	add	r3, r2
 8001f26:	ee07 3a90 	vmov	s15, r3
 8001f2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f2e:	4b26      	ldr	r3, [pc, #152]	; (8001fc8 <mpu6500Read+0x344>)
 8001f30:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f38:	4b23      	ldr	r3, [pc, #140]	; (8001fc8 <mpu6500Read+0x344>)
 8001f3a:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8001f3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f42:	4b21      	ldr	r3, [pc, #132]	; (8001fc8 <mpu6500Read+0x344>)
 8001f44:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	control._gz = ((float) (control.tZ[0]*control._gxcounts + control.tZ[1]*control._gycounts + control.tZ[2]*control._gzcounts) * control._gyroScale) -  control._gzb;
 8001f48:	4b1f      	ldr	r3, [pc, #124]	; (8001fc8 <mpu6500Read+0x344>)
 8001f4a:	f9b3 30e2 	ldrsh.w	r3, [r3, #226]	; 0xe2
 8001f4e:	461a      	mov	r2, r3
 8001f50:	4b1d      	ldr	r3, [pc, #116]	; (8001fc8 <mpu6500Read+0x344>)
 8001f52:	f9b3 30ce 	ldrsh.w	r3, [r3, #206]	; 0xce
 8001f56:	fb03 f202 	mul.w	r2, r3, r2
 8001f5a:	4b1b      	ldr	r3, [pc, #108]	; (8001fc8 <mpu6500Read+0x344>)
 8001f5c:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 8001f60:	4619      	mov	r1, r3
 8001f62:	4b19      	ldr	r3, [pc, #100]	; (8001fc8 <mpu6500Read+0x344>)
 8001f64:	f9b3 30d0 	ldrsh.w	r3, [r3, #208]	; 0xd0
 8001f68:	fb03 f301 	mul.w	r3, r3, r1
 8001f6c:	441a      	add	r2, r3
 8001f6e:	4b16      	ldr	r3, [pc, #88]	; (8001fc8 <mpu6500Read+0x344>)
 8001f70:	f9b3 30e6 	ldrsh.w	r3, [r3, #230]	; 0xe6
 8001f74:	4619      	mov	r1, r3
 8001f76:	4b14      	ldr	r3, [pc, #80]	; (8001fc8 <mpu6500Read+0x344>)
 8001f78:	f9b3 30d2 	ldrsh.w	r3, [r3, #210]	; 0xd2
 8001f7c:	fb03 f301 	mul.w	r3, r3, r1
 8001f80:	4413      	add	r3, r2
 8001f82:	ee07 3a90 	vmov	s15, r3
 8001f86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f8a:	4b0f      	ldr	r3, [pc, #60]	; (8001fc8 <mpu6500Read+0x344>)
 8001f8c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f94:	4b0c      	ldr	r3, [pc, #48]	; (8001fc8 <mpu6500Read+0x344>)
 8001f96:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8001f9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f9e:	4b0a      	ldr	r3, [pc, #40]	; (8001fc8 <mpu6500Read+0x344>)
 8001fa0:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	control._t = ((((float) control._tcounts)  - control._tempOffset)/ control._tempScale) + control._tempOffset;
 8001fa4:	4b08      	ldr	r3, [pc, #32]	; (8001fc8 <mpu6500Read+0x344>)
 8001fa6:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 8001faa:	ee07 3a90 	vmov	s15, r3
 8001fae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fb2:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <mpu6500Read+0x344>)
 8001fb4:	edd3 7a07 	vldr	s15, [r3, #28]
 8001fb8:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001fbc:	4b02      	ldr	r3, [pc, #8]	; (8001fc8 <mpu6500Read+0x344>)
 8001fbe:	edd3 7a06 	vldr	s15, [r3, #24]
 8001fc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fc6:	e001      	b.n	8001fcc <mpu6500Read+0x348>
 8001fc8:	20000040 	.word	0x20000040
 8001fcc:	4b05      	ldr	r3, [pc, #20]	; (8001fe4 <mpu6500Read+0x360>)
 8001fce:	edd3 7a07 	vldr	s15, [r3, #28]
 8001fd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fd6:	4b03      	ldr	r3, [pc, #12]	; (8001fe4 <mpu6500Read+0x360>)
 8001fd8:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	return 1;
 8001fdc:	2301      	movs	r3, #1
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20000040 	.word	0x20000040

08001fe8 <mpu6500GetAccelX_mss>:

// Returns the accelerometer measurement in the x direction, m/s/s
float mpu6500GetAccelX_mss( void )
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
	return control._ax;
 8001fec:	4b04      	ldr	r3, [pc, #16]	; (8002000 <mpu6500GetAccelX_mss+0x18>)
 8001fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff0:	ee07 3a90 	vmov	s15, r3
}
 8001ff4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	20000040 	.word	0x20000040

08002004 <mpu6500GetAccelY_mss>:

// Returns the accelerometer measurement in the y direction, m/s/s
float mpu6500GetAccelY_mss( void )
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
	return control._ay;
 8002008:	4b04      	ldr	r3, [pc, #16]	; (800201c <mpu6500GetAccelY_mss+0x18>)
 800200a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800200c:	ee07 3a90 	vmov	s15, r3
}
 8002010:	eeb0 0a67 	vmov.f32	s0, s15
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	20000040 	.word	0x20000040

08002020 <mpu6500GetAccelZ_mss>:

// Returns the accelerometer measurement in the z direction, m/s/s
float mpu6500GetAccelZ_mss( void )
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
	return control._az;
 8002024:	4b04      	ldr	r3, [pc, #16]	; (8002038 <mpu6500GetAccelZ_mss+0x18>)
 8002026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002028:	ee07 3a90 	vmov	s15, r3
}
 800202c:	eeb0 0a67 	vmov.f32	s0, s15
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	20000040 	.word	0x20000040

0800203c <mpu6500GetGyroX_rads>:

// Returns the gyroscope measurement in the x direction, rad/s
float mpu6500GetGyroX_rads( void )
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
	return control._gx;
 8002040:	4b04      	ldr	r3, [pc, #16]	; (8002054 <mpu6500GetGyroX_rads+0x18>)
 8002042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002044:	ee07 3a90 	vmov	s15, r3
}
 8002048:	eeb0 0a67 	vmov.f32	s0, s15
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	20000040 	.word	0x20000040

08002058 <mpu6500GetGyroY_rads>:

// Returns the gyroscope measurement in the y direction, rad/s
float mpu6500GetGyroY_rads( void )
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
	return control._gy;
 800205c:	4b04      	ldr	r3, [pc, #16]	; (8002070 <mpu6500GetGyroY_rads+0x18>)
 800205e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002060:	ee07 3a90 	vmov	s15, r3
}
 8002064:	eeb0 0a67 	vmov.f32	s0, s15
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	20000040 	.word	0x20000040

08002074 <mpu6500GetGyroZ_rads>:

// Returns the gyroscope measurement in the z direction, rad/s
float mpu6500GetGyroZ_rads( void )
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
	return control._gz;
 8002078:	4b04      	ldr	r3, [pc, #16]	; (800208c <mpu6500GetGyroZ_rads+0x18>)
 800207a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800207c:	ee07 3a90 	vmov	s15, r3
}
 8002080:	eeb0 0a67 	vmov.f32	s0, s15
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	20000040 	.word	0x20000040

08002090 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002096:	4b0f      	ldr	r3, [pc, #60]	; (80020d4 <HAL_MspInit+0x44>)
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	4a0e      	ldr	r2, [pc, #56]	; (80020d4 <HAL_MspInit+0x44>)
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	6193      	str	r3, [r2, #24]
 80020a2:	4b0c      	ldr	r3, [pc, #48]	; (80020d4 <HAL_MspInit+0x44>)
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	607b      	str	r3, [r7, #4]
 80020ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020ae:	4b09      	ldr	r3, [pc, #36]	; (80020d4 <HAL_MspInit+0x44>)
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	4a08      	ldr	r2, [pc, #32]	; (80020d4 <HAL_MspInit+0x44>)
 80020b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020b8:	61d3      	str	r3, [r2, #28]
 80020ba:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <HAL_MspInit+0x44>)
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c2:	603b      	str	r3, [r7, #0]
 80020c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80020c6:	2007      	movs	r0, #7
 80020c8:	f000 fa34 	bl	8002534 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020cc:	bf00      	nop
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40021000 	.word	0x40021000

080020d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b08a      	sub	sp, #40	; 0x28
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e0:	f107 0314 	add.w	r3, r7, #20
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	605a      	str	r2, [r3, #4]
 80020ea:	609a      	str	r2, [r3, #8]
 80020ec:	60da      	str	r2, [r3, #12]
 80020ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a17      	ldr	r2, [pc, #92]	; (8002154 <HAL_I2C_MspInit+0x7c>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d128      	bne.n	800214c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020fa:	4b17      	ldr	r3, [pc, #92]	; (8002158 <HAL_I2C_MspInit+0x80>)
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	4a16      	ldr	r2, [pc, #88]	; (8002158 <HAL_I2C_MspInit+0x80>)
 8002100:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002104:	6153      	str	r3, [r2, #20]
 8002106:	4b14      	ldr	r3, [pc, #80]	; (8002158 <HAL_I2C_MspInit+0x80>)
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800210e:	613b      	str	r3, [r7, #16]
 8002110:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002112:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002116:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002118:	2312      	movs	r3, #18
 800211a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800211c:	2301      	movs	r3, #1
 800211e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002120:	2303      	movs	r3, #3
 8002122:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002124:	2304      	movs	r3, #4
 8002126:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002128:	f107 0314 	add.w	r3, r7, #20
 800212c:	4619      	mov	r1, r3
 800212e:	480b      	ldr	r0, [pc, #44]	; (800215c <HAL_I2C_MspInit+0x84>)
 8002130:	f000 fa34 	bl	800259c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002134:	4b08      	ldr	r3, [pc, #32]	; (8002158 <HAL_I2C_MspInit+0x80>)
 8002136:	69db      	ldr	r3, [r3, #28]
 8002138:	4a07      	ldr	r2, [pc, #28]	; (8002158 <HAL_I2C_MspInit+0x80>)
 800213a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800213e:	61d3      	str	r3, [r2, #28]
 8002140:	4b05      	ldr	r3, [pc, #20]	; (8002158 <HAL_I2C_MspInit+0x80>)
 8002142:	69db      	ldr	r3, [r3, #28]
 8002144:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002148:	60fb      	str	r3, [r7, #12]
 800214a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800214c:	bf00      	nop
 800214e:	3728      	adds	r7, #40	; 0x28
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40005400 	.word	0x40005400
 8002158:	40021000 	.word	0x40021000
 800215c:	48000400 	.word	0x48000400

08002160 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08a      	sub	sp, #40	; 0x28
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002168:	f107 0314 	add.w	r3, r7, #20
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	60da      	str	r2, [r3, #12]
 8002176:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a17      	ldr	r2, [pc, #92]	; (80021dc <HAL_UART_MspInit+0x7c>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d128      	bne.n	80021d4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002182:	4b17      	ldr	r3, [pc, #92]	; (80021e0 <HAL_UART_MspInit+0x80>)
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	4a16      	ldr	r2, [pc, #88]	; (80021e0 <HAL_UART_MspInit+0x80>)
 8002188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800218c:	61d3      	str	r3, [r2, #28]
 800218e:	4b14      	ldr	r3, [pc, #80]	; (80021e0 <HAL_UART_MspInit+0x80>)
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002196:	613b      	str	r3, [r7, #16]
 8002198:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219a:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <HAL_UART_MspInit+0x80>)
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	4a10      	ldr	r2, [pc, #64]	; (80021e0 <HAL_UART_MspInit+0x80>)
 80021a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021a4:	6153      	str	r3, [r2, #20]
 80021a6:	4b0e      	ldr	r3, [pc, #56]	; (80021e0 <HAL_UART_MspInit+0x80>)
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80021b2:	230c      	movs	r3, #12
 80021b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b6:	2302      	movs	r3, #2
 80021b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021be:	2300      	movs	r3, #0
 80021c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021c2:	2307      	movs	r3, #7
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c6:	f107 0314 	add.w	r3, r7, #20
 80021ca:	4619      	mov	r1, r3
 80021cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021d0:	f000 f9e4 	bl	800259c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80021d4:	bf00      	nop
 80021d6:	3728      	adds	r7, #40	; 0x28
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40004400 	.word	0x40004400
 80021e0:	40021000 	.word	0x40021000

080021e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80021e8:	bf00      	nop
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021f2:	b480      	push	{r7}
 80021f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021f6:	e7fe      	b.n	80021f6 <HardFault_Handler+0x4>

080021f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021fc:	e7fe      	b.n	80021fc <MemManage_Handler+0x4>

080021fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021fe:	b480      	push	{r7}
 8002200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002202:	e7fe      	b.n	8002202 <BusFault_Handler+0x4>

08002204 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002208:	e7fe      	b.n	8002208 <UsageFault_Handler+0x4>

0800220a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800220a:	b480      	push	{r7}
 800220c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800220e:	bf00      	nop
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800221c:	bf00      	nop
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002226:	b480      	push	{r7}
 8002228:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800222a:	bf00      	nop
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002238:	f000 f888 	bl	800234c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800223c:	bf00      	nop
 800223e:	bd80      	pop	{r7, pc}

08002240 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002244:	4b08      	ldr	r3, [pc, #32]	; (8002268 <SystemInit+0x28>)
 8002246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800224a:	4a07      	ldr	r2, [pc, #28]	; (8002268 <SystemInit+0x28>)
 800224c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002250:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002254:	4b04      	ldr	r3, [pc, #16]	; (8002268 <SystemInit+0x28>)
 8002256:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800225a:	609a      	str	r2, [r3, #8]
#endif
}
 800225c:	bf00      	nop
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	e000ed00 	.word	0xe000ed00

0800226c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800226c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022a4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002270:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002272:	e003      	b.n	800227c <LoopCopyDataInit>

08002274 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002274:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002276:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002278:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800227a:	3104      	adds	r1, #4

0800227c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800227c:	480b      	ldr	r0, [pc, #44]	; (80022ac <LoopForever+0xa>)
	ldr	r3, =_edata
 800227e:	4b0c      	ldr	r3, [pc, #48]	; (80022b0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002280:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002282:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002284:	d3f6      	bcc.n	8002274 <CopyDataInit>
	ldr	r2, =_sbss
 8002286:	4a0b      	ldr	r2, [pc, #44]	; (80022b4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002288:	e002      	b.n	8002290 <LoopFillZerobss>

0800228a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800228a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800228c:	f842 3b04 	str.w	r3, [r2], #4

08002290 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002290:	4b09      	ldr	r3, [pc, #36]	; (80022b8 <LoopForever+0x16>)
	cmp	r2, r3
 8002292:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002294:	d3f9      	bcc.n	800228a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002296:	f7ff ffd3 	bl	8002240 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800229a:	f003 f8c1 	bl	8005420 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800229e:	f7fe ff6b 	bl	8001178 <main>

080022a2 <LoopForever>:

LoopForever:
    b LoopForever
 80022a2:	e7fe      	b.n	80022a2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80022a4:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80022a8:	080054d0 	.word	0x080054d0
	ldr	r0, =_sdata
 80022ac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80022b0:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 80022b4:	20000018 	.word	0x20000018
	ldr	r3, = _ebss
 80022b8:	20000200 	.word	0x20000200

080022bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022bc:	e7fe      	b.n	80022bc <ADC1_2_IRQHandler>
	...

080022c0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022c4:	4b08      	ldr	r3, [pc, #32]	; (80022e8 <HAL_Init+0x28>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a07      	ldr	r2, [pc, #28]	; (80022e8 <HAL_Init+0x28>)
 80022ca:	f043 0310 	orr.w	r3, r3, #16
 80022ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022d0:	2003      	movs	r0, #3
 80022d2:	f000 f92f 	bl	8002534 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022d6:	2000      	movs	r0, #0
 80022d8:	f000 f808 	bl	80022ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022dc:	f7ff fed8 	bl	8002090 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40022000 	.word	0x40022000

080022ec <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022f4:	4b12      	ldr	r3, [pc, #72]	; (8002340 <HAL_InitTick+0x54>)
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	4b12      	ldr	r3, [pc, #72]	; (8002344 <HAL_InitTick+0x58>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	4619      	mov	r1, r3
 80022fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002302:	fbb3 f3f1 	udiv	r3, r3, r1
 8002306:	fbb2 f3f3 	udiv	r3, r2, r3
 800230a:	4618      	mov	r0, r3
 800230c:	f000 f939 	bl	8002582 <HAL_SYSTICK_Config>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e00e      	b.n	8002338 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2b0f      	cmp	r3, #15
 800231e:	d80a      	bhi.n	8002336 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002320:	2200      	movs	r2, #0
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	f04f 30ff 	mov.w	r0, #4294967295
 8002328:	f000 f90f 	bl	800254a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800232c:	4a06      	ldr	r2, [pc, #24]	; (8002348 <HAL_InitTick+0x5c>)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002332:	2300      	movs	r3, #0
 8002334:	e000      	b.n	8002338 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
}
 8002338:	4618      	mov	r0, r3
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	20000008 	.word	0x20000008
 8002344:	20000010 	.word	0x20000010
 8002348:	2000000c 	.word	0x2000000c

0800234c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002350:	4b06      	ldr	r3, [pc, #24]	; (800236c <HAL_IncTick+0x20>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	461a      	mov	r2, r3
 8002356:	4b06      	ldr	r3, [pc, #24]	; (8002370 <HAL_IncTick+0x24>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4413      	add	r3, r2
 800235c:	4a04      	ldr	r2, [pc, #16]	; (8002370 <HAL_IncTick+0x24>)
 800235e:	6013      	str	r3, [r2, #0]
}
 8002360:	bf00      	nop
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	20000010 	.word	0x20000010
 8002370:	200001fc 	.word	0x200001fc

08002374 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  return uwTick;  
 8002378:	4b03      	ldr	r3, [pc, #12]	; (8002388 <HAL_GetTick+0x14>)
 800237a:	681b      	ldr	r3, [r3, #0]
}
 800237c:	4618      	mov	r0, r3
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	200001fc 	.word	0x200001fc

0800238c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002394:	f7ff ffee 	bl	8002374 <HAL_GetTick>
 8002398:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a4:	d005      	beq.n	80023b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023a6:	4b09      	ldr	r3, [pc, #36]	; (80023cc <HAL_Delay+0x40>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	461a      	mov	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	4413      	add	r3, r2
 80023b0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80023b2:	bf00      	nop
 80023b4:	f7ff ffde 	bl	8002374 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d8f7      	bhi.n	80023b4 <HAL_Delay+0x28>
  {
  }
}
 80023c4:	bf00      	nop
 80023c6:	3710      	adds	r7, #16
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	20000010 	.word	0x20000010

080023d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023e0:	4b0c      	ldr	r3, [pc, #48]	; (8002414 <__NVIC_SetPriorityGrouping+0x44>)
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023e6:	68ba      	ldr	r2, [r7, #8]
 80023e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023ec:	4013      	ands	r3, r2
 80023ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002400:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002402:	4a04      	ldr	r2, [pc, #16]	; (8002414 <__NVIC_SetPriorityGrouping+0x44>)
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	60d3      	str	r3, [r2, #12]
}
 8002408:	bf00      	nop
 800240a:	3714      	adds	r7, #20
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	e000ed00 	.word	0xe000ed00

08002418 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800241c:	4b04      	ldr	r3, [pc, #16]	; (8002430 <__NVIC_GetPriorityGrouping+0x18>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	0a1b      	lsrs	r3, r3, #8
 8002422:	f003 0307 	and.w	r3, r3, #7
}
 8002426:	4618      	mov	r0, r3
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	e000ed00 	.word	0xe000ed00

08002434 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	4603      	mov	r3, r0
 800243c:	6039      	str	r1, [r7, #0]
 800243e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002444:	2b00      	cmp	r3, #0
 8002446:	db0a      	blt.n	800245e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	b2da      	uxtb	r2, r3
 800244c:	490c      	ldr	r1, [pc, #48]	; (8002480 <__NVIC_SetPriority+0x4c>)
 800244e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002452:	0112      	lsls	r2, r2, #4
 8002454:	b2d2      	uxtb	r2, r2
 8002456:	440b      	add	r3, r1
 8002458:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800245c:	e00a      	b.n	8002474 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	b2da      	uxtb	r2, r3
 8002462:	4908      	ldr	r1, [pc, #32]	; (8002484 <__NVIC_SetPriority+0x50>)
 8002464:	79fb      	ldrb	r3, [r7, #7]
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	3b04      	subs	r3, #4
 800246c:	0112      	lsls	r2, r2, #4
 800246e:	b2d2      	uxtb	r2, r2
 8002470:	440b      	add	r3, r1
 8002472:	761a      	strb	r2, [r3, #24]
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	e000e100 	.word	0xe000e100
 8002484:	e000ed00 	.word	0xe000ed00

08002488 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002488:	b480      	push	{r7}
 800248a:	b089      	sub	sp, #36	; 0x24
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f003 0307 	and.w	r3, r3, #7
 800249a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	f1c3 0307 	rsb	r3, r3, #7
 80024a2:	2b04      	cmp	r3, #4
 80024a4:	bf28      	it	cs
 80024a6:	2304      	movcs	r3, #4
 80024a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	3304      	adds	r3, #4
 80024ae:	2b06      	cmp	r3, #6
 80024b0:	d902      	bls.n	80024b8 <NVIC_EncodePriority+0x30>
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	3b03      	subs	r3, #3
 80024b6:	e000      	b.n	80024ba <NVIC_EncodePriority+0x32>
 80024b8:	2300      	movs	r3, #0
 80024ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024bc:	f04f 32ff 	mov.w	r2, #4294967295
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	43da      	mvns	r2, r3
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	401a      	ands	r2, r3
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024d0:	f04f 31ff 	mov.w	r1, #4294967295
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	fa01 f303 	lsl.w	r3, r1, r3
 80024da:	43d9      	mvns	r1, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e0:	4313      	orrs	r3, r2
         );
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3724      	adds	r7, #36	; 0x24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
	...

080024f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3b01      	subs	r3, #1
 80024fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002500:	d301      	bcc.n	8002506 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002502:	2301      	movs	r3, #1
 8002504:	e00f      	b.n	8002526 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002506:	4a0a      	ldr	r2, [pc, #40]	; (8002530 <SysTick_Config+0x40>)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	3b01      	subs	r3, #1
 800250c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800250e:	210f      	movs	r1, #15
 8002510:	f04f 30ff 	mov.w	r0, #4294967295
 8002514:	f7ff ff8e 	bl	8002434 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002518:	4b05      	ldr	r3, [pc, #20]	; (8002530 <SysTick_Config+0x40>)
 800251a:	2200      	movs	r2, #0
 800251c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800251e:	4b04      	ldr	r3, [pc, #16]	; (8002530 <SysTick_Config+0x40>)
 8002520:	2207      	movs	r2, #7
 8002522:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	e000e010 	.word	0xe000e010

08002534 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f7ff ff47 	bl	80023d0 <__NVIC_SetPriorityGrouping>
}
 8002542:	bf00      	nop
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b086      	sub	sp, #24
 800254e:	af00      	add	r7, sp, #0
 8002550:	4603      	mov	r3, r0
 8002552:	60b9      	str	r1, [r7, #8]
 8002554:	607a      	str	r2, [r7, #4]
 8002556:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002558:	2300      	movs	r3, #0
 800255a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800255c:	f7ff ff5c 	bl	8002418 <__NVIC_GetPriorityGrouping>
 8002560:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	68b9      	ldr	r1, [r7, #8]
 8002566:	6978      	ldr	r0, [r7, #20]
 8002568:	f7ff ff8e 	bl	8002488 <NVIC_EncodePriority>
 800256c:	4602      	mov	r2, r0
 800256e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002572:	4611      	mov	r1, r2
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff ff5d 	bl	8002434 <__NVIC_SetPriority>
}
 800257a:	bf00      	nop
 800257c:	3718      	adds	r7, #24
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b082      	sub	sp, #8
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f7ff ffb0 	bl	80024f0 <SysTick_Config>
 8002590:	4603      	mov	r3, r0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
	...

0800259c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800259c:	b480      	push	{r7}
 800259e:	b087      	sub	sp, #28
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025a6:	2300      	movs	r3, #0
 80025a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025aa:	e160      	b.n	800286e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	2101      	movs	r1, #1
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	fa01 f303 	lsl.w	r3, r1, r3
 80025b8:	4013      	ands	r3, r2
 80025ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f000 8152 	beq.w	8002868 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d00b      	beq.n	80025e4 <HAL_GPIO_Init+0x48>
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d007      	beq.n	80025e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025d8:	2b11      	cmp	r3, #17
 80025da:	d003      	beq.n	80025e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	2b12      	cmp	r3, #18
 80025e2:	d130      	bne.n	8002646 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	2203      	movs	r2, #3
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	43db      	mvns	r3, r3
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	4013      	ands	r3, r2
 80025fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	68da      	ldr	r2, [r3, #12]
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	4313      	orrs	r3, r2
 800260c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800261a:	2201      	movs	r2, #1
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	43db      	mvns	r3, r3
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	4013      	ands	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	091b      	lsrs	r3, r3, #4
 8002630:	f003 0201 	and.w	r2, r3, #1
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	4313      	orrs	r3, r2
 800263e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	2203      	movs	r2, #3
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	43db      	mvns	r3, r3
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	4013      	ands	r3, r2
 800265c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	689a      	ldr	r2, [r3, #8]
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	4313      	orrs	r3, r2
 800266e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	2b02      	cmp	r3, #2
 800267c:	d003      	beq.n	8002686 <HAL_GPIO_Init+0xea>
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	2b12      	cmp	r3, #18
 8002684:	d123      	bne.n	80026ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	08da      	lsrs	r2, r3, #3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	3208      	adds	r2, #8
 800268e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002692:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	f003 0307 	and.w	r3, r3, #7
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	220f      	movs	r2, #15
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	43db      	mvns	r3, r3
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	4013      	ands	r3, r2
 80026a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	691a      	ldr	r2, [r3, #16]
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	f003 0307 	and.w	r3, r3, #7
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	4313      	orrs	r3, r2
 80026be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	08da      	lsrs	r2, r3, #3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3208      	adds	r2, #8
 80026c8:	6939      	ldr	r1, [r7, #16]
 80026ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	2203      	movs	r2, #3
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	43db      	mvns	r3, r3
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	4013      	ands	r3, r2
 80026e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f003 0203 	and.w	r2, r3, #3
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270a:	2b00      	cmp	r3, #0
 800270c:	f000 80ac 	beq.w	8002868 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002710:	4b5e      	ldr	r3, [pc, #376]	; (800288c <HAL_GPIO_Init+0x2f0>)
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	4a5d      	ldr	r2, [pc, #372]	; (800288c <HAL_GPIO_Init+0x2f0>)
 8002716:	f043 0301 	orr.w	r3, r3, #1
 800271a:	6193      	str	r3, [r2, #24]
 800271c:	4b5b      	ldr	r3, [pc, #364]	; (800288c <HAL_GPIO_Init+0x2f0>)
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	f003 0301 	and.w	r3, r3, #1
 8002724:	60bb      	str	r3, [r7, #8]
 8002726:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002728:	4a59      	ldr	r2, [pc, #356]	; (8002890 <HAL_GPIO_Init+0x2f4>)
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	089b      	lsrs	r3, r3, #2
 800272e:	3302      	adds	r3, #2
 8002730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002734:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f003 0303 	and.w	r3, r3, #3
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	220f      	movs	r2, #15
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	43db      	mvns	r3, r3
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	4013      	ands	r3, r2
 800274a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002752:	d025      	beq.n	80027a0 <HAL_GPIO_Init+0x204>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a4f      	ldr	r2, [pc, #316]	; (8002894 <HAL_GPIO_Init+0x2f8>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d01f      	beq.n	800279c <HAL_GPIO_Init+0x200>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a4e      	ldr	r2, [pc, #312]	; (8002898 <HAL_GPIO_Init+0x2fc>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d019      	beq.n	8002798 <HAL_GPIO_Init+0x1fc>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a4d      	ldr	r2, [pc, #308]	; (800289c <HAL_GPIO_Init+0x300>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d013      	beq.n	8002794 <HAL_GPIO_Init+0x1f8>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a4c      	ldr	r2, [pc, #304]	; (80028a0 <HAL_GPIO_Init+0x304>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d00d      	beq.n	8002790 <HAL_GPIO_Init+0x1f4>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a4b      	ldr	r2, [pc, #300]	; (80028a4 <HAL_GPIO_Init+0x308>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d007      	beq.n	800278c <HAL_GPIO_Init+0x1f0>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4a4a      	ldr	r2, [pc, #296]	; (80028a8 <HAL_GPIO_Init+0x30c>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d101      	bne.n	8002788 <HAL_GPIO_Init+0x1ec>
 8002784:	2306      	movs	r3, #6
 8002786:	e00c      	b.n	80027a2 <HAL_GPIO_Init+0x206>
 8002788:	2307      	movs	r3, #7
 800278a:	e00a      	b.n	80027a2 <HAL_GPIO_Init+0x206>
 800278c:	2305      	movs	r3, #5
 800278e:	e008      	b.n	80027a2 <HAL_GPIO_Init+0x206>
 8002790:	2304      	movs	r3, #4
 8002792:	e006      	b.n	80027a2 <HAL_GPIO_Init+0x206>
 8002794:	2303      	movs	r3, #3
 8002796:	e004      	b.n	80027a2 <HAL_GPIO_Init+0x206>
 8002798:	2302      	movs	r3, #2
 800279a:	e002      	b.n	80027a2 <HAL_GPIO_Init+0x206>
 800279c:	2301      	movs	r3, #1
 800279e:	e000      	b.n	80027a2 <HAL_GPIO_Init+0x206>
 80027a0:	2300      	movs	r3, #0
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	f002 0203 	and.w	r2, r2, #3
 80027a8:	0092      	lsls	r2, r2, #2
 80027aa:	4093      	lsls	r3, r2
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80027b2:	4937      	ldr	r1, [pc, #220]	; (8002890 <HAL_GPIO_Init+0x2f4>)
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	089b      	lsrs	r3, r3, #2
 80027b8:	3302      	adds	r3, #2
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027c0:	4b3a      	ldr	r3, [pc, #232]	; (80028ac <HAL_GPIO_Init+0x310>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	43db      	mvns	r3, r3
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	4013      	ands	r3, r2
 80027ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d003      	beq.n	80027e4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80027e4:	4a31      	ldr	r2, [pc, #196]	; (80028ac <HAL_GPIO_Init+0x310>)
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027ea:	4b30      	ldr	r3, [pc, #192]	; (80028ac <HAL_GPIO_Init+0x310>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	43db      	mvns	r3, r3
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	4013      	ands	r3, r2
 80027f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4313      	orrs	r3, r2
 800280c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800280e:	4a27      	ldr	r2, [pc, #156]	; (80028ac <HAL_GPIO_Init+0x310>)
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002814:	4b25      	ldr	r3, [pc, #148]	; (80028ac <HAL_GPIO_Init+0x310>)
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	43db      	mvns	r3, r3
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	4013      	ands	r3, r2
 8002822:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d003      	beq.n	8002838 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	4313      	orrs	r3, r2
 8002836:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002838:	4a1c      	ldr	r2, [pc, #112]	; (80028ac <HAL_GPIO_Init+0x310>)
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800283e:	4b1b      	ldr	r3, [pc, #108]	; (80028ac <HAL_GPIO_Init+0x310>)
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	43db      	mvns	r3, r3
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	4013      	ands	r3, r2
 800284c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	4313      	orrs	r3, r2
 8002860:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002862:	4a12      	ldr	r2, [pc, #72]	; (80028ac <HAL_GPIO_Init+0x310>)
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	3301      	adds	r3, #1
 800286c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	fa22 f303 	lsr.w	r3, r2, r3
 8002878:	2b00      	cmp	r3, #0
 800287a:	f47f ae97 	bne.w	80025ac <HAL_GPIO_Init+0x10>
  }
}
 800287e:	bf00      	nop
 8002880:	371c      	adds	r7, #28
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	40021000 	.word	0x40021000
 8002890:	40010000 	.word	0x40010000
 8002894:	48000400 	.word	0x48000400
 8002898:	48000800 	.word	0x48000800
 800289c:	48000c00 	.word	0x48000c00
 80028a0:	48001000 	.word	0x48001000
 80028a4:	48001400 	.word	0x48001400
 80028a8:	48001800 	.word	0x48001800
 80028ac:	40010400 	.word	0x40010400

080028b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	460b      	mov	r3, r1
 80028ba:	807b      	strh	r3, [r7, #2]
 80028bc:	4613      	mov	r3, r2
 80028be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028c0:	787b      	ldrb	r3, [r7, #1]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028c6:	887a      	ldrh	r2, [r7, #2]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028cc:	e002      	b.n	80028d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028ce:	887a      	ldrh	r2, [r7, #2]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	460b      	mov	r3, r1
 80028ea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	695b      	ldr	r3, [r3, #20]
 80028f0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028f2:	887a      	ldrh	r2, [r7, #2]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	4013      	ands	r3, r2
 80028f8:	041a      	lsls	r2, r3, #16
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	43d9      	mvns	r1, r3
 80028fe:	887b      	ldrh	r3, [r7, #2]
 8002900:	400b      	ands	r3, r1
 8002902:	431a      	orrs	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	619a      	str	r2, [r3, #24]
}
 8002908:	bf00      	nop
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e081      	b.n	8002a2a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d106      	bne.n	8002940 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7ff fbcc 	bl	80020d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2224      	movs	r2, #36	; 0x24
 8002944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0201 	bic.w	r2, r2, #1
 8002956:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685a      	ldr	r2, [r3, #4]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002964:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002974:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d107      	bne.n	800298e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	689a      	ldr	r2, [r3, #8]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800298a:	609a      	str	r2, [r3, #8]
 800298c:	e006      	b.n	800299c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689a      	ldr	r2, [r3, #8]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800299a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d104      	bne.n	80029ae <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	6812      	ldr	r2, [r2, #0]
 80029b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68da      	ldr	r2, [r3, #12]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	691a      	ldr	r2, [r3, #16]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	ea42 0103 	orr.w	r1, r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	021a      	lsls	r2, r3, #8
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	430a      	orrs	r2, r1
 80029ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	69d9      	ldr	r1, [r3, #28]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a1a      	ldr	r2, [r3, #32]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	430a      	orrs	r2, r1
 80029fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f042 0201 	orr.w	r2, r2, #1
 8002a0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2220      	movs	r2, #32
 8002a16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
	...

08002a34 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b088      	sub	sp, #32
 8002a38:	af02      	add	r7, sp, #8
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	607a      	str	r2, [r7, #4]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	460b      	mov	r3, r1
 8002a42:	817b      	strh	r3, [r7, #10]
 8002a44:	4613      	mov	r3, r2
 8002a46:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2b20      	cmp	r3, #32
 8002a52:	f040 80da 	bne.w	8002c0a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d101      	bne.n	8002a64 <HAL_I2C_Master_Transmit+0x30>
 8002a60:	2302      	movs	r3, #2
 8002a62:	e0d3      	b.n	8002c0c <HAL_I2C_Master_Transmit+0x1d8>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a6c:	f7ff fc82 	bl	8002374 <HAL_GetTick>
 8002a70:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	9300      	str	r3, [sp, #0]
 8002a76:	2319      	movs	r3, #25
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f000 f9e6 	bl	8002e50 <I2C_WaitOnFlagUntilTimeout>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e0be      	b.n	8002c0c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2221      	movs	r2, #33	; 0x21
 8002a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2210      	movs	r2, #16
 8002a9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	893a      	ldrh	r2, [r7, #8]
 8002aae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	2bff      	cmp	r3, #255	; 0xff
 8002abe:	d90e      	bls.n	8002ade <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	22ff      	movs	r2, #255	; 0xff
 8002ac4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aca:	b2da      	uxtb	r2, r3
 8002acc:	8979      	ldrh	r1, [r7, #10]
 8002ace:	4b51      	ldr	r3, [pc, #324]	; (8002c14 <HAL_I2C_Master_Transmit+0x1e0>)
 8002ad0:	9300      	str	r3, [sp, #0]
 8002ad2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	f000 fb48 	bl	800316c <I2C_TransferConfig>
 8002adc:	e06c      	b.n	8002bb8 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	8979      	ldrh	r1, [r7, #10]
 8002af0:	4b48      	ldr	r3, [pc, #288]	; (8002c14 <HAL_I2C_Master_Transmit+0x1e0>)
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f000 fb37 	bl	800316c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002afe:	e05b      	b.n	8002bb8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	6a39      	ldr	r1, [r7, #32]
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f000 f9e3 	bl	8002ed0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e07b      	b.n	8002c0c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b18:	781a      	ldrb	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b24:	1c5a      	adds	r2, r3, #1
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	3b01      	subs	r3, #1
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d034      	beq.n	8002bb8 <HAL_I2C_Master_Transmit+0x184>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d130      	bne.n	8002bb8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	9300      	str	r3, [sp, #0]
 8002b5a:	6a3b      	ldr	r3, [r7, #32]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	2180      	movs	r1, #128	; 0x80
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f000 f975 	bl	8002e50 <I2C_WaitOnFlagUntilTimeout>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e04d      	b.n	8002c0c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	2bff      	cmp	r3, #255	; 0xff
 8002b78:	d90e      	bls.n	8002b98 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	22ff      	movs	r2, #255	; 0xff
 8002b7e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	8979      	ldrh	r1, [r7, #10]
 8002b88:	2300      	movs	r3, #0
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f000 faeb 	bl	800316c <I2C_TransferConfig>
 8002b96:	e00f      	b.n	8002bb8 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba6:	b2da      	uxtb	r2, r3
 8002ba8:	8979      	ldrh	r1, [r7, #10]
 8002baa:	2300      	movs	r3, #0
 8002bac:	9300      	str	r3, [sp, #0]
 8002bae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f000 fada 	bl	800316c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d19e      	bne.n	8002b00 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	6a39      	ldr	r1, [r7, #32]
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f000 f9c2 	bl	8002f50 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e01a      	b.n	8002c0c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2220      	movs	r2, #32
 8002bdc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6859      	ldr	r1, [r3, #4]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	4b0b      	ldr	r3, [pc, #44]	; (8002c18 <HAL_I2C_Master_Transmit+0x1e4>)
 8002bea:	400b      	ands	r3, r1
 8002bec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2220      	movs	r2, #32
 8002bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c06:	2300      	movs	r3, #0
 8002c08:	e000      	b.n	8002c0c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002c0a:	2302      	movs	r3, #2
  }
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	80002000 	.word	0x80002000
 8002c18:	fe00e800 	.word	0xfe00e800

08002c1c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b088      	sub	sp, #32
 8002c20:	af02      	add	r7, sp, #8
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	607a      	str	r2, [r7, #4]
 8002c26:	461a      	mov	r2, r3
 8002c28:	460b      	mov	r3, r1
 8002c2a:	817b      	strh	r3, [r7, #10]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	2b20      	cmp	r3, #32
 8002c3a:	f040 80db 	bne.w	8002df4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d101      	bne.n	8002c4c <HAL_I2C_Master_Receive+0x30>
 8002c48:	2302      	movs	r3, #2
 8002c4a:	e0d4      	b.n	8002df6 <HAL_I2C_Master_Receive+0x1da>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c54:	f7ff fb8e 	bl	8002374 <HAL_GetTick>
 8002c58:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	9300      	str	r3, [sp, #0]
 8002c5e:	2319      	movs	r3, #25
 8002c60:	2201      	movs	r2, #1
 8002c62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f000 f8f2 	bl	8002e50 <I2C_WaitOnFlagUntilTimeout>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e0bf      	b.n	8002df6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2222      	movs	r2, #34	; 0x22
 8002c7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2210      	movs	r2, #16
 8002c82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	893a      	ldrh	r2, [r7, #8]
 8002c96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	2bff      	cmp	r3, #255	; 0xff
 8002ca6:	d90e      	bls.n	8002cc6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	22ff      	movs	r2, #255	; 0xff
 8002cac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb2:	b2da      	uxtb	r2, r3
 8002cb4:	8979      	ldrh	r1, [r7, #10]
 8002cb6:	4b52      	ldr	r3, [pc, #328]	; (8002e00 <HAL_I2C_Master_Receive+0x1e4>)
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f000 fa54 	bl	800316c <I2C_TransferConfig>
 8002cc4:	e06d      	b.n	8002da2 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd4:	b2da      	uxtb	r2, r3
 8002cd6:	8979      	ldrh	r1, [r7, #10]
 8002cd8:	4b49      	ldr	r3, [pc, #292]	; (8002e00 <HAL_I2C_Master_Receive+0x1e4>)
 8002cda:	9300      	str	r3, [sp, #0]
 8002cdc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 fa43 	bl	800316c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002ce6:	e05c      	b.n	8002da2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	6a39      	ldr	r1, [r7, #32]
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	f000 f96b 	bl	8002fc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e07c      	b.n	8002df6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d06:	b2d2      	uxtb	r2, r2
 8002d08:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0e:	1c5a      	adds	r2, r3, #1
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	3b01      	subs	r3, #1
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d034      	beq.n	8002da2 <HAL_I2C_Master_Receive+0x186>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d130      	bne.n	8002da2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	6a3b      	ldr	r3, [r7, #32]
 8002d46:	2200      	movs	r2, #0
 8002d48:	2180      	movs	r1, #128	; 0x80
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	f000 f880 	bl	8002e50 <I2C_WaitOnFlagUntilTimeout>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e04d      	b.n	8002df6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	2bff      	cmp	r3, #255	; 0xff
 8002d62:	d90e      	bls.n	8002d82 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	22ff      	movs	r2, #255	; 0xff
 8002d68:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d6e:	b2da      	uxtb	r2, r3
 8002d70:	8979      	ldrh	r1, [r7, #10]
 8002d72:	2300      	movs	r3, #0
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 f9f6 	bl	800316c <I2C_TransferConfig>
 8002d80:	e00f      	b.n	8002da2 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	8979      	ldrh	r1, [r7, #10]
 8002d94:	2300      	movs	r3, #0
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f000 f9e5 	bl	800316c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d19d      	bne.n	8002ce8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	6a39      	ldr	r1, [r7, #32]
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f000 f8cd 	bl	8002f50 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e01a      	b.n	8002df6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2220      	movs	r2, #32
 8002dc6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6859      	ldr	r1, [r3, #4]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	4b0c      	ldr	r3, [pc, #48]	; (8002e04 <HAL_I2C_Master_Receive+0x1e8>)
 8002dd4:	400b      	ands	r3, r1
 8002dd6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002df0:	2300      	movs	r3, #0
 8002df2:	e000      	b.n	8002df6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002df4:	2302      	movs	r3, #2
  }
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3718      	adds	r7, #24
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	80002400 	.word	0x80002400
 8002e04:	fe00e800 	.word	0xfe00e800

08002e08 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d103      	bne.n	8002e26 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2200      	movs	r2, #0
 8002e24:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	f003 0301 	and.w	r3, r3, #1
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d007      	beq.n	8002e44 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	699a      	ldr	r2, [r3, #24]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f042 0201 	orr.w	r2, r2, #1
 8002e42:	619a      	str	r2, [r3, #24]
  }
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	603b      	str	r3, [r7, #0]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e60:	e022      	b.n	8002ea8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e68:	d01e      	beq.n	8002ea8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e6a:	f7ff fa83 	bl	8002374 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d302      	bcc.n	8002e80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d113      	bne.n	8002ea8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e84:	f043 0220 	orr.w	r2, r3, #32
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2220      	movs	r2, #32
 8002e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e00f      	b.n	8002ec8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	699a      	ldr	r2, [r3, #24]
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	68ba      	ldr	r2, [r7, #8]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	bf0c      	ite	eq
 8002eb8:	2301      	moveq	r3, #1
 8002eba:	2300      	movne	r3, #0
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	79fb      	ldrb	r3, [r7, #7]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d0cd      	beq.n	8002e62 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3710      	adds	r7, #16
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002edc:	e02c      	b.n	8002f38 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	68b9      	ldr	r1, [r7, #8]
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f000 f8dc 	bl	80030a0 <I2C_IsAcknowledgeFailed>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e02a      	b.n	8002f48 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef8:	d01e      	beq.n	8002f38 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002efa:	f7ff fa3b 	bl	8002374 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	68ba      	ldr	r2, [r7, #8]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d302      	bcc.n	8002f10 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d113      	bne.n	8002f38 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f14:	f043 0220 	orr.w	r2, r3, #32
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e007      	b.n	8002f48 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d1cb      	bne.n	8002ede <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3710      	adds	r7, #16
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f5c:	e028      	b.n	8002fb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	68b9      	ldr	r1, [r7, #8]
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f000 f89c 	bl	80030a0 <I2C_IsAcknowledgeFailed>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e026      	b.n	8002fc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f72:	f7ff f9ff 	bl	8002374 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	68ba      	ldr	r2, [r7, #8]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d302      	bcc.n	8002f88 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d113      	bne.n	8002fb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8c:	f043 0220 	orr.w	r2, r3, #32
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2220      	movs	r2, #32
 8002f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e007      	b.n	8002fc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	f003 0320 	and.w	r3, r3, #32
 8002fba:	2b20      	cmp	r3, #32
 8002fbc:	d1cf      	bne.n	8002f5e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002fd4:	e055      	b.n	8003082 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	68b9      	ldr	r1, [r7, #8]
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 f860 	bl	80030a0 <I2C_IsAcknowledgeFailed>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e053      	b.n	8003092 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	f003 0320 	and.w	r3, r3, #32
 8002ff4:	2b20      	cmp	r3, #32
 8002ff6:	d129      	bne.n	800304c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	f003 0304 	and.w	r3, r3, #4
 8003002:	2b04      	cmp	r3, #4
 8003004:	d105      	bne.n	8003012 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800300e:	2300      	movs	r3, #0
 8003010:	e03f      	b.n	8003092 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2220      	movs	r2, #32
 8003018:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	6859      	ldr	r1, [r3, #4]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	4b1d      	ldr	r3, [pc, #116]	; (800309c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003026:	400b      	ands	r3, r1
 8003028:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2220      	movs	r2, #32
 8003034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e022      	b.n	8003092 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800304c:	f7ff f992 	bl	8002374 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	68ba      	ldr	r2, [r7, #8]
 8003058:	429a      	cmp	r2, r3
 800305a:	d302      	bcc.n	8003062 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10f      	bne.n	8003082 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003066:	f043 0220 	orr.w	r2, r3, #32
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2220      	movs	r2, #32
 8003072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e007      	b.n	8003092 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	2b04      	cmp	r3, #4
 800308e:	d1a2      	bne.n	8002fd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	fe00e800 	.word	0xfe00e800

080030a0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	f003 0310 	and.w	r3, r3, #16
 80030b6:	2b10      	cmp	r3, #16
 80030b8:	d151      	bne.n	800315e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030ba:	e022      	b.n	8003102 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c2:	d01e      	beq.n	8003102 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030c4:	f7ff f956 	bl	8002374 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	68ba      	ldr	r2, [r7, #8]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d302      	bcc.n	80030da <I2C_IsAcknowledgeFailed+0x3a>
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d113      	bne.n	8003102 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030de:	f043 0220 	orr.w	r2, r3, #32
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2220      	movs	r2, #32
 80030ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e02e      	b.n	8003160 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	f003 0320 	and.w	r3, r3, #32
 800310c:	2b20      	cmp	r3, #32
 800310e:	d1d5      	bne.n	80030bc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2210      	movs	r2, #16
 8003116:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2220      	movs	r2, #32
 800311e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f7ff fe71 	bl	8002e08 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	6859      	ldr	r1, [r3, #4]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	4b0d      	ldr	r3, [pc, #52]	; (8003168 <I2C_IsAcknowledgeFailed+0xc8>)
 8003132:	400b      	ands	r3, r1
 8003134:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313a:	f043 0204 	orr.w	r2, r3, #4
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2220      	movs	r2, #32
 8003146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e000      	b.n	8003160 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	fe00e800 	.word	0xfe00e800

0800316c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	607b      	str	r3, [r7, #4]
 8003176:	460b      	mov	r3, r1
 8003178:	817b      	strh	r3, [r7, #10]
 800317a:	4613      	mov	r3, r2
 800317c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	0d5b      	lsrs	r3, r3, #21
 8003188:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800318c:	4b0d      	ldr	r3, [pc, #52]	; (80031c4 <I2C_TransferConfig+0x58>)
 800318e:	430b      	orrs	r3, r1
 8003190:	43db      	mvns	r3, r3
 8003192:	ea02 0103 	and.w	r1, r2, r3
 8003196:	897b      	ldrh	r3, [r7, #10]
 8003198:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800319c:	7a7b      	ldrb	r3, [r7, #9]
 800319e:	041b      	lsls	r3, r3, #16
 80031a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80031a4:	431a      	orrs	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	431a      	orrs	r2, r3
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	431a      	orrs	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	430a      	orrs	r2, r1
 80031b4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80031b6:	bf00      	nop
 80031b8:	3714      	adds	r7, #20
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	03ff63ff 	.word	0x03ff63ff

080031c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b20      	cmp	r3, #32
 80031dc:	d138      	bne.n	8003250 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d101      	bne.n	80031ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80031e8:	2302      	movs	r3, #2
 80031ea:	e032      	b.n	8003252 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2224      	movs	r2, #36	; 0x24
 80031f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f022 0201 	bic.w	r2, r2, #1
 800320a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800321a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6819      	ldr	r1, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	430a      	orrs	r2, r1
 800322a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f042 0201 	orr.w	r2, r2, #1
 800323a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2220      	movs	r2, #32
 8003240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800324c:	2300      	movs	r3, #0
 800324e:	e000      	b.n	8003252 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003250:	2302      	movs	r3, #2
  }
}
 8003252:	4618      	mov	r0, r3
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr

0800325e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800325e:	b480      	push	{r7}
 8003260:	b085      	sub	sp, #20
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
 8003266:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b20      	cmp	r3, #32
 8003272:	d139      	bne.n	80032e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800327a:	2b01      	cmp	r3, #1
 800327c:	d101      	bne.n	8003282 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800327e:	2302      	movs	r3, #2
 8003280:	e033      	b.n	80032ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2224      	movs	r2, #36	; 0x24
 800328e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 0201 	bic.w	r2, r2, #1
 80032a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80032b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	021b      	lsls	r3, r3, #8
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0201 	orr.w	r2, r2, #1
 80032d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2220      	movs	r2, #32
 80032d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032e4:	2300      	movs	r3, #0
 80032e6:	e000      	b.n	80032ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80032e8:	2302      	movs	r3, #2
  }
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3714      	adds	r7, #20
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
	...

080032f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80032fe:	af00      	add	r7, sp, #0
 8003300:	1d3b      	adds	r3, r7, #4
 8003302:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003304:	1d3b      	adds	r3, r7, #4
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d102      	bne.n	8003312 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	f000 bf01 	b.w	8004114 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003312:	1d3b      	adds	r3, r7, #4
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0301 	and.w	r3, r3, #1
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 8160 	beq.w	80035e2 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003322:	4bae      	ldr	r3, [pc, #696]	; (80035dc <HAL_RCC_OscConfig+0x2e4>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f003 030c 	and.w	r3, r3, #12
 800332a:	2b04      	cmp	r3, #4
 800332c:	d00c      	beq.n	8003348 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800332e:	4bab      	ldr	r3, [pc, #684]	; (80035dc <HAL_RCC_OscConfig+0x2e4>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f003 030c 	and.w	r3, r3, #12
 8003336:	2b08      	cmp	r3, #8
 8003338:	d159      	bne.n	80033ee <HAL_RCC_OscConfig+0xf6>
 800333a:	4ba8      	ldr	r3, [pc, #672]	; (80035dc <HAL_RCC_OscConfig+0x2e4>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003342:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003346:	d152      	bne.n	80033ee <HAL_RCC_OscConfig+0xf6>
 8003348:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800334c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003350:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003354:	fa93 f3a3 	rbit	r3, r3
 8003358:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800335c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003360:	fab3 f383 	clz	r3, r3
 8003364:	b2db      	uxtb	r3, r3
 8003366:	095b      	lsrs	r3, r3, #5
 8003368:	b2db      	uxtb	r3, r3
 800336a:	f043 0301 	orr.w	r3, r3, #1
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2b01      	cmp	r3, #1
 8003372:	d102      	bne.n	800337a <HAL_RCC_OscConfig+0x82>
 8003374:	4b99      	ldr	r3, [pc, #612]	; (80035dc <HAL_RCC_OscConfig+0x2e4>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	e015      	b.n	80033a6 <HAL_RCC_OscConfig+0xae>
 800337a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800337e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003382:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003386:	fa93 f3a3 	rbit	r3, r3
 800338a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800338e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003392:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003396:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800339a:	fa93 f3a3 	rbit	r3, r3
 800339e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80033a2:	4b8e      	ldr	r3, [pc, #568]	; (80035dc <HAL_RCC_OscConfig+0x2e4>)
 80033a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033aa:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80033ae:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80033b2:	fa92 f2a2 	rbit	r2, r2
 80033b6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80033ba:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80033be:	fab2 f282 	clz	r2, r2
 80033c2:	b2d2      	uxtb	r2, r2
 80033c4:	f042 0220 	orr.w	r2, r2, #32
 80033c8:	b2d2      	uxtb	r2, r2
 80033ca:	f002 021f 	and.w	r2, r2, #31
 80033ce:	2101      	movs	r1, #1
 80033d0:	fa01 f202 	lsl.w	r2, r1, r2
 80033d4:	4013      	ands	r3, r2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f000 8102 	beq.w	80035e0 <HAL_RCC_OscConfig+0x2e8>
 80033dc:	1d3b      	adds	r3, r7, #4
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f040 80fc 	bne.w	80035e0 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	f000 be93 	b.w	8004114 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033ee:	1d3b      	adds	r3, r7, #4
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033f8:	d106      	bne.n	8003408 <HAL_RCC_OscConfig+0x110>
 80033fa:	4b78      	ldr	r3, [pc, #480]	; (80035dc <HAL_RCC_OscConfig+0x2e4>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a77      	ldr	r2, [pc, #476]	; (80035dc <HAL_RCC_OscConfig+0x2e4>)
 8003400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003404:	6013      	str	r3, [r2, #0]
 8003406:	e030      	b.n	800346a <HAL_RCC_OscConfig+0x172>
 8003408:	1d3b      	adds	r3, r7, #4
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10c      	bne.n	800342c <HAL_RCC_OscConfig+0x134>
 8003412:	4b72      	ldr	r3, [pc, #456]	; (80035dc <HAL_RCC_OscConfig+0x2e4>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a71      	ldr	r2, [pc, #452]	; (80035dc <HAL_RCC_OscConfig+0x2e4>)
 8003418:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800341c:	6013      	str	r3, [r2, #0]
 800341e:	4b6f      	ldr	r3, [pc, #444]	; (80035dc <HAL_RCC_OscConfig+0x2e4>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a6e      	ldr	r2, [pc, #440]	; (80035dc <HAL_RCC_OscConfig+0x2e4>)
 8003424:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003428:	6013      	str	r3, [r2, #0]
 800342a:	e01e      	b.n	800346a <HAL_RCC_OscConfig+0x172>
 800342c:	1d3b      	adds	r3, r7, #4
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003436:	d10c      	bne.n	8003452 <HAL_RCC_OscConfig+0x15a>
 8003438:	4b68      	ldr	r3, [pc, #416]	; (80035dc <HAL_RCC_OscConfig+0x2e4>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a67      	ldr	r2, [pc, #412]	; (80035dc <HAL_RCC_OscConfig+0x2e4>)
 800343e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003442:	6013      	str	r3, [r2, #0]
 8003444:	4b65      	ldr	r3, [pc, #404]	; (80035dc <HAL_RCC_OscConfig+0x2e4>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a64      	ldr	r2, [pc, #400]	; (80035dc <HAL_RCC_OscConfig+0x2e4>)
 800344a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800344e:	6013      	str	r3, [r2, #0]
 8003450:	e00b      	b.n	800346a <HAL_RCC_OscConfig+0x172>
 8003452:	4b62      	ldr	r3, [pc, #392]	; (80035dc <HAL_RCC_OscConfig+0x2e4>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a61      	ldr	r2, [pc, #388]	; (80035dc <HAL_RCC_OscConfig+0x2e4>)
 8003458:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800345c:	6013      	str	r3, [r2, #0]
 800345e:	4b5f      	ldr	r3, [pc, #380]	; (80035dc <HAL_RCC_OscConfig+0x2e4>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a5e      	ldr	r2, [pc, #376]	; (80035dc <HAL_RCC_OscConfig+0x2e4>)
 8003464:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003468:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800346a:	1d3b      	adds	r3, r7, #4
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d059      	beq.n	8003528 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003474:	f7fe ff7e 	bl	8002374 <HAL_GetTick>
 8003478:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800347c:	e00a      	b.n	8003494 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800347e:	f7fe ff79 	bl	8002374 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b64      	cmp	r3, #100	; 0x64
 800348c:	d902      	bls.n	8003494 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	f000 be40 	b.w	8004114 <HAL_RCC_OscConfig+0xe1c>
 8003494:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003498:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80034a0:	fa93 f3a3 	rbit	r3, r3
 80034a4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80034a8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ac:	fab3 f383 	clz	r3, r3
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	095b      	lsrs	r3, r3, #5
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	f043 0301 	orr.w	r3, r3, #1
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d102      	bne.n	80034c6 <HAL_RCC_OscConfig+0x1ce>
 80034c0:	4b46      	ldr	r3, [pc, #280]	; (80035dc <HAL_RCC_OscConfig+0x2e4>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	e015      	b.n	80034f2 <HAL_RCC_OscConfig+0x1fa>
 80034c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034ca:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ce:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80034d2:	fa93 f3a3 	rbit	r3, r3
 80034d6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80034da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034de:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80034e2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80034e6:	fa93 f3a3 	rbit	r3, r3
 80034ea:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80034ee:	4b3b      	ldr	r3, [pc, #236]	; (80035dc <HAL_RCC_OscConfig+0x2e4>)
 80034f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034f6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80034fa:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80034fe:	fa92 f2a2 	rbit	r2, r2
 8003502:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8003506:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800350a:	fab2 f282 	clz	r2, r2
 800350e:	b2d2      	uxtb	r2, r2
 8003510:	f042 0220 	orr.w	r2, r2, #32
 8003514:	b2d2      	uxtb	r2, r2
 8003516:	f002 021f 	and.w	r2, r2, #31
 800351a:	2101      	movs	r1, #1
 800351c:	fa01 f202 	lsl.w	r2, r1, r2
 8003520:	4013      	ands	r3, r2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d0ab      	beq.n	800347e <HAL_RCC_OscConfig+0x186>
 8003526:	e05c      	b.n	80035e2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003528:	f7fe ff24 	bl	8002374 <HAL_GetTick>
 800352c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003530:	e00a      	b.n	8003548 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003532:	f7fe ff1f 	bl	8002374 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b64      	cmp	r3, #100	; 0x64
 8003540:	d902      	bls.n	8003548 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	f000 bde6 	b.w	8004114 <HAL_RCC_OscConfig+0xe1c>
 8003548:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800354c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003550:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003554:	fa93 f3a3 	rbit	r3, r3
 8003558:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800355c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003560:	fab3 f383 	clz	r3, r3
 8003564:	b2db      	uxtb	r3, r3
 8003566:	095b      	lsrs	r3, r3, #5
 8003568:	b2db      	uxtb	r3, r3
 800356a:	f043 0301 	orr.w	r3, r3, #1
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b01      	cmp	r3, #1
 8003572:	d102      	bne.n	800357a <HAL_RCC_OscConfig+0x282>
 8003574:	4b19      	ldr	r3, [pc, #100]	; (80035dc <HAL_RCC_OscConfig+0x2e4>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	e015      	b.n	80035a6 <HAL_RCC_OscConfig+0x2ae>
 800357a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800357e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003582:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003586:	fa93 f3a3 	rbit	r3, r3
 800358a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800358e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003592:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003596:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800359a:	fa93 f3a3 	rbit	r3, r3
 800359e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80035a2:	4b0e      	ldr	r3, [pc, #56]	; (80035dc <HAL_RCC_OscConfig+0x2e4>)
 80035a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80035aa:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80035ae:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80035b2:	fa92 f2a2 	rbit	r2, r2
 80035b6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80035ba:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80035be:	fab2 f282 	clz	r2, r2
 80035c2:	b2d2      	uxtb	r2, r2
 80035c4:	f042 0220 	orr.w	r2, r2, #32
 80035c8:	b2d2      	uxtb	r2, r2
 80035ca:	f002 021f 	and.w	r2, r2, #31
 80035ce:	2101      	movs	r1, #1
 80035d0:	fa01 f202 	lsl.w	r2, r1, r2
 80035d4:	4013      	ands	r3, r2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1ab      	bne.n	8003532 <HAL_RCC_OscConfig+0x23a>
 80035da:	e002      	b.n	80035e2 <HAL_RCC_OscConfig+0x2ea>
 80035dc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035e2:	1d3b      	adds	r3, r7, #4
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f000 8170 	beq.w	80038d2 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80035f2:	4bd0      	ldr	r3, [pc, #832]	; (8003934 <HAL_RCC_OscConfig+0x63c>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f003 030c 	and.w	r3, r3, #12
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00c      	beq.n	8003618 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80035fe:	4bcd      	ldr	r3, [pc, #820]	; (8003934 <HAL_RCC_OscConfig+0x63c>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f003 030c 	and.w	r3, r3, #12
 8003606:	2b08      	cmp	r3, #8
 8003608:	d16d      	bne.n	80036e6 <HAL_RCC_OscConfig+0x3ee>
 800360a:	4bca      	ldr	r3, [pc, #808]	; (8003934 <HAL_RCC_OscConfig+0x63c>)
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003612:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003616:	d166      	bne.n	80036e6 <HAL_RCC_OscConfig+0x3ee>
 8003618:	2302      	movs	r3, #2
 800361a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003622:	fa93 f3a3 	rbit	r3, r3
 8003626:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800362a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800362e:	fab3 f383 	clz	r3, r3
 8003632:	b2db      	uxtb	r3, r3
 8003634:	095b      	lsrs	r3, r3, #5
 8003636:	b2db      	uxtb	r3, r3
 8003638:	f043 0301 	orr.w	r3, r3, #1
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b01      	cmp	r3, #1
 8003640:	d102      	bne.n	8003648 <HAL_RCC_OscConfig+0x350>
 8003642:	4bbc      	ldr	r3, [pc, #752]	; (8003934 <HAL_RCC_OscConfig+0x63c>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	e013      	b.n	8003670 <HAL_RCC_OscConfig+0x378>
 8003648:	2302      	movs	r3, #2
 800364a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800364e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003652:	fa93 f3a3 	rbit	r3, r3
 8003656:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800365a:	2302      	movs	r3, #2
 800365c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003660:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003664:	fa93 f3a3 	rbit	r3, r3
 8003668:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800366c:	4bb1      	ldr	r3, [pc, #708]	; (8003934 <HAL_RCC_OscConfig+0x63c>)
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	2202      	movs	r2, #2
 8003672:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8003676:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800367a:	fa92 f2a2 	rbit	r2, r2
 800367e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8003682:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003686:	fab2 f282 	clz	r2, r2
 800368a:	b2d2      	uxtb	r2, r2
 800368c:	f042 0220 	orr.w	r2, r2, #32
 8003690:	b2d2      	uxtb	r2, r2
 8003692:	f002 021f 	and.w	r2, r2, #31
 8003696:	2101      	movs	r1, #1
 8003698:	fa01 f202 	lsl.w	r2, r1, r2
 800369c:	4013      	ands	r3, r2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d007      	beq.n	80036b2 <HAL_RCC_OscConfig+0x3ba>
 80036a2:	1d3b      	adds	r3, r7, #4
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d002      	beq.n	80036b2 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	f000 bd31 	b.w	8004114 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036b2:	4ba0      	ldr	r3, [pc, #640]	; (8003934 <HAL_RCC_OscConfig+0x63c>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036ba:	1d3b      	adds	r3, r7, #4
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	21f8      	movs	r1, #248	; 0xf8
 80036c2:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c6:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80036ca:	fa91 f1a1 	rbit	r1, r1
 80036ce:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80036d2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80036d6:	fab1 f181 	clz	r1, r1
 80036da:	b2c9      	uxtb	r1, r1
 80036dc:	408b      	lsls	r3, r1
 80036de:	4995      	ldr	r1, [pc, #596]	; (8003934 <HAL_RCC_OscConfig+0x63c>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036e4:	e0f5      	b.n	80038d2 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036e6:	1d3b      	adds	r3, r7, #4
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f000 8085 	beq.w	80037fc <HAL_RCC_OscConfig+0x504>
 80036f2:	2301      	movs	r3, #1
 80036f4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80036fc:	fa93 f3a3 	rbit	r3, r3
 8003700:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8003704:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003708:	fab3 f383 	clz	r3, r3
 800370c:	b2db      	uxtb	r3, r3
 800370e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003712:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	461a      	mov	r2, r3
 800371a:	2301      	movs	r3, #1
 800371c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800371e:	f7fe fe29 	bl	8002374 <HAL_GetTick>
 8003722:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003726:	e00a      	b.n	800373e <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003728:	f7fe fe24 	bl	8002374 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d902      	bls.n	800373e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	f000 bceb 	b.w	8004114 <HAL_RCC_OscConfig+0xe1c>
 800373e:	2302      	movs	r3, #2
 8003740:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003744:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003748:	fa93 f3a3 	rbit	r3, r3
 800374c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8003750:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003754:	fab3 f383 	clz	r3, r3
 8003758:	b2db      	uxtb	r3, r3
 800375a:	095b      	lsrs	r3, r3, #5
 800375c:	b2db      	uxtb	r3, r3
 800375e:	f043 0301 	orr.w	r3, r3, #1
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b01      	cmp	r3, #1
 8003766:	d102      	bne.n	800376e <HAL_RCC_OscConfig+0x476>
 8003768:	4b72      	ldr	r3, [pc, #456]	; (8003934 <HAL_RCC_OscConfig+0x63c>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	e013      	b.n	8003796 <HAL_RCC_OscConfig+0x49e>
 800376e:	2302      	movs	r3, #2
 8003770:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003774:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003778:	fa93 f3a3 	rbit	r3, r3
 800377c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003780:	2302      	movs	r3, #2
 8003782:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003786:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800378a:	fa93 f3a3 	rbit	r3, r3
 800378e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003792:	4b68      	ldr	r3, [pc, #416]	; (8003934 <HAL_RCC_OscConfig+0x63c>)
 8003794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003796:	2202      	movs	r2, #2
 8003798:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800379c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80037a0:	fa92 f2a2 	rbit	r2, r2
 80037a4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80037a8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80037ac:	fab2 f282 	clz	r2, r2
 80037b0:	b2d2      	uxtb	r2, r2
 80037b2:	f042 0220 	orr.w	r2, r2, #32
 80037b6:	b2d2      	uxtb	r2, r2
 80037b8:	f002 021f 	and.w	r2, r2, #31
 80037bc:	2101      	movs	r1, #1
 80037be:	fa01 f202 	lsl.w	r2, r1, r2
 80037c2:	4013      	ands	r3, r2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d0af      	beq.n	8003728 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037c8:	4b5a      	ldr	r3, [pc, #360]	; (8003934 <HAL_RCC_OscConfig+0x63c>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037d0:	1d3b      	adds	r3, r7, #4
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	21f8      	movs	r1, #248	; 0xf8
 80037d8:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037dc:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80037e0:	fa91 f1a1 	rbit	r1, r1
 80037e4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80037e8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80037ec:	fab1 f181 	clz	r1, r1
 80037f0:	b2c9      	uxtb	r1, r1
 80037f2:	408b      	lsls	r3, r1
 80037f4:	494f      	ldr	r1, [pc, #316]	; (8003934 <HAL_RCC_OscConfig+0x63c>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	600b      	str	r3, [r1, #0]
 80037fa:	e06a      	b.n	80038d2 <HAL_RCC_OscConfig+0x5da>
 80037fc:	2301      	movs	r3, #1
 80037fe:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003802:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003806:	fa93 f3a3 	rbit	r3, r3
 800380a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800380e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003812:	fab3 f383 	clz	r3, r3
 8003816:	b2db      	uxtb	r3, r3
 8003818:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800381c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	461a      	mov	r2, r3
 8003824:	2300      	movs	r3, #0
 8003826:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003828:	f7fe fda4 	bl	8002374 <HAL_GetTick>
 800382c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003830:	e00a      	b.n	8003848 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003832:	f7fe fd9f 	bl	8002374 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b02      	cmp	r3, #2
 8003840:	d902      	bls.n	8003848 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	f000 bc66 	b.w	8004114 <HAL_RCC_OscConfig+0xe1c>
 8003848:	2302      	movs	r3, #2
 800384a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003852:	fa93 f3a3 	rbit	r3, r3
 8003856:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800385a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800385e:	fab3 f383 	clz	r3, r3
 8003862:	b2db      	uxtb	r3, r3
 8003864:	095b      	lsrs	r3, r3, #5
 8003866:	b2db      	uxtb	r3, r3
 8003868:	f043 0301 	orr.w	r3, r3, #1
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b01      	cmp	r3, #1
 8003870:	d102      	bne.n	8003878 <HAL_RCC_OscConfig+0x580>
 8003872:	4b30      	ldr	r3, [pc, #192]	; (8003934 <HAL_RCC_OscConfig+0x63c>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	e013      	b.n	80038a0 <HAL_RCC_OscConfig+0x5a8>
 8003878:	2302      	movs	r3, #2
 800387a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003882:	fa93 f3a3 	rbit	r3, r3
 8003886:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800388a:	2302      	movs	r3, #2
 800388c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003890:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003894:	fa93 f3a3 	rbit	r3, r3
 8003898:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800389c:	4b25      	ldr	r3, [pc, #148]	; (8003934 <HAL_RCC_OscConfig+0x63c>)
 800389e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a0:	2202      	movs	r2, #2
 80038a2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80038a6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80038aa:	fa92 f2a2 	rbit	r2, r2
 80038ae:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80038b2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80038b6:	fab2 f282 	clz	r2, r2
 80038ba:	b2d2      	uxtb	r2, r2
 80038bc:	f042 0220 	orr.w	r2, r2, #32
 80038c0:	b2d2      	uxtb	r2, r2
 80038c2:	f002 021f 	and.w	r2, r2, #31
 80038c6:	2101      	movs	r1, #1
 80038c8:	fa01 f202 	lsl.w	r2, r1, r2
 80038cc:	4013      	ands	r3, r2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1af      	bne.n	8003832 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038d2:	1d3b      	adds	r3, r7, #4
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0308 	and.w	r3, r3, #8
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 80da 	beq.w	8003a96 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038e2:	1d3b      	adds	r3, r7, #4
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d069      	beq.n	80039c0 <HAL_RCC_OscConfig+0x6c8>
 80038ec:	2301      	movs	r3, #1
 80038ee:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038f6:	fa93 f3a3 	rbit	r3, r3
 80038fa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80038fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003902:	fab3 f383 	clz	r3, r3
 8003906:	b2db      	uxtb	r3, r3
 8003908:	461a      	mov	r2, r3
 800390a:	4b0b      	ldr	r3, [pc, #44]	; (8003938 <HAL_RCC_OscConfig+0x640>)
 800390c:	4413      	add	r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	461a      	mov	r2, r3
 8003912:	2301      	movs	r3, #1
 8003914:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003916:	f7fe fd2d 	bl	8002374 <HAL_GetTick>
 800391a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800391e:	e00d      	b.n	800393c <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003920:	f7fe fd28 	bl	8002374 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	2b02      	cmp	r3, #2
 800392e:	d905      	bls.n	800393c <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e3ef      	b.n	8004114 <HAL_RCC_OscConfig+0xe1c>
 8003934:	40021000 	.word	0x40021000
 8003938:	10908120 	.word	0x10908120
 800393c:	2302      	movs	r3, #2
 800393e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003942:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003946:	fa93 f2a3 	rbit	r2, r3
 800394a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003954:	2202      	movs	r2, #2
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	fa93 f2a3 	rbit	r2, r3
 8003962:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003966:	601a      	str	r2, [r3, #0]
 8003968:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800396c:	2202      	movs	r2, #2
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	fa93 f2a3 	rbit	r2, r3
 800397a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800397e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003980:	4ba4      	ldr	r3, [pc, #656]	; (8003c14 <HAL_RCC_OscConfig+0x91c>)
 8003982:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003984:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003988:	2102      	movs	r1, #2
 800398a:	6019      	str	r1, [r3, #0]
 800398c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	fa93 f1a3 	rbit	r1, r3
 8003996:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800399a:	6019      	str	r1, [r3, #0]
  return result;
 800399c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	fab3 f383 	clz	r3, r3
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	f003 031f 	and.w	r3, r3, #31
 80039b2:	2101      	movs	r1, #1
 80039b4:	fa01 f303 	lsl.w	r3, r1, r3
 80039b8:	4013      	ands	r3, r2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d0b0      	beq.n	8003920 <HAL_RCC_OscConfig+0x628>
 80039be:	e06a      	b.n	8003a96 <HAL_RCC_OscConfig+0x79e>
 80039c0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80039c4:	2201      	movs	r2, #1
 80039c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	fa93 f2a3 	rbit	r2, r3
 80039d2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80039d6:	601a      	str	r2, [r3, #0]
  return result;
 80039d8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80039dc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039de:	fab3 f383 	clz	r3, r3
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	461a      	mov	r2, r3
 80039e6:	4b8c      	ldr	r3, [pc, #560]	; (8003c18 <HAL_RCC_OscConfig+0x920>)
 80039e8:	4413      	add	r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	461a      	mov	r2, r3
 80039ee:	2300      	movs	r3, #0
 80039f0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039f2:	f7fe fcbf 	bl	8002374 <HAL_GetTick>
 80039f6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039fa:	e009      	b.n	8003a10 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039fc:	f7fe fcba 	bl	8002374 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d901      	bls.n	8003a10 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e381      	b.n	8004114 <HAL_RCC_OscConfig+0xe1c>
 8003a10:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003a14:	2202      	movs	r2, #2
 8003a16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a18:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	fa93 f2a3 	rbit	r2, r3
 8003a22:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003a26:	601a      	str	r2, [r3, #0]
 8003a28:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003a2c:	2202      	movs	r2, #2
 8003a2e:	601a      	str	r2, [r3, #0]
 8003a30:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	fa93 f2a3 	rbit	r2, r3
 8003a3a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003a3e:	601a      	str	r2, [r3, #0]
 8003a40:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003a44:	2202      	movs	r2, #2
 8003a46:	601a      	str	r2, [r3, #0]
 8003a48:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	fa93 f2a3 	rbit	r2, r3
 8003a52:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003a56:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a58:	4b6e      	ldr	r3, [pc, #440]	; (8003c14 <HAL_RCC_OscConfig+0x91c>)
 8003a5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a5c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003a60:	2102      	movs	r1, #2
 8003a62:	6019      	str	r1, [r3, #0]
 8003a64:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	fa93 f1a3 	rbit	r1, r3
 8003a6e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003a72:	6019      	str	r1, [r3, #0]
  return result;
 8003a74:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	fab3 f383 	clz	r3, r3
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	f003 031f 	and.w	r3, r3, #31
 8003a8a:	2101      	movs	r1, #1
 8003a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a90:	4013      	ands	r3, r2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1b2      	bne.n	80039fc <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a96:	1d3b      	adds	r3, r7, #4
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0304 	and.w	r3, r3, #4
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f000 8157 	beq.w	8003d54 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aac:	4b59      	ldr	r3, [pc, #356]	; (8003c14 <HAL_RCC_OscConfig+0x91c>)
 8003aae:	69db      	ldr	r3, [r3, #28]
 8003ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d112      	bne.n	8003ade <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ab8:	4b56      	ldr	r3, [pc, #344]	; (8003c14 <HAL_RCC_OscConfig+0x91c>)
 8003aba:	69db      	ldr	r3, [r3, #28]
 8003abc:	4a55      	ldr	r2, [pc, #340]	; (8003c14 <HAL_RCC_OscConfig+0x91c>)
 8003abe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ac2:	61d3      	str	r3, [r2, #28]
 8003ac4:	4b53      	ldr	r3, [pc, #332]	; (8003c14 <HAL_RCC_OscConfig+0x91c>)
 8003ac6:	69db      	ldr	r3, [r3, #28]
 8003ac8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003acc:	f107 030c 	add.w	r3, r7, #12
 8003ad0:	601a      	str	r2, [r3, #0]
 8003ad2:	f107 030c 	add.w	r3, r7, #12
 8003ad6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ade:	4b4f      	ldr	r3, [pc, #316]	; (8003c1c <HAL_RCC_OscConfig+0x924>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d11a      	bne.n	8003b20 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aea:	4b4c      	ldr	r3, [pc, #304]	; (8003c1c <HAL_RCC_OscConfig+0x924>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a4b      	ldr	r2, [pc, #300]	; (8003c1c <HAL_RCC_OscConfig+0x924>)
 8003af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003af4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003af6:	f7fe fc3d 	bl	8002374 <HAL_GetTick>
 8003afa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003afe:	e009      	b.n	8003b14 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b00:	f7fe fc38 	bl	8002374 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	2b64      	cmp	r3, #100	; 0x64
 8003b0e:	d901      	bls.n	8003b14 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e2ff      	b.n	8004114 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b14:	4b41      	ldr	r3, [pc, #260]	; (8003c1c <HAL_RCC_OscConfig+0x924>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d0ef      	beq.n	8003b00 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b20:	1d3b      	adds	r3, r7, #4
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d106      	bne.n	8003b38 <HAL_RCC_OscConfig+0x840>
 8003b2a:	4b3a      	ldr	r3, [pc, #232]	; (8003c14 <HAL_RCC_OscConfig+0x91c>)
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	4a39      	ldr	r2, [pc, #228]	; (8003c14 <HAL_RCC_OscConfig+0x91c>)
 8003b30:	f043 0301 	orr.w	r3, r3, #1
 8003b34:	6213      	str	r3, [r2, #32]
 8003b36:	e02f      	b.n	8003b98 <HAL_RCC_OscConfig+0x8a0>
 8003b38:	1d3b      	adds	r3, r7, #4
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10c      	bne.n	8003b5c <HAL_RCC_OscConfig+0x864>
 8003b42:	4b34      	ldr	r3, [pc, #208]	; (8003c14 <HAL_RCC_OscConfig+0x91c>)
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	4a33      	ldr	r2, [pc, #204]	; (8003c14 <HAL_RCC_OscConfig+0x91c>)
 8003b48:	f023 0301 	bic.w	r3, r3, #1
 8003b4c:	6213      	str	r3, [r2, #32]
 8003b4e:	4b31      	ldr	r3, [pc, #196]	; (8003c14 <HAL_RCC_OscConfig+0x91c>)
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	4a30      	ldr	r2, [pc, #192]	; (8003c14 <HAL_RCC_OscConfig+0x91c>)
 8003b54:	f023 0304 	bic.w	r3, r3, #4
 8003b58:	6213      	str	r3, [r2, #32]
 8003b5a:	e01d      	b.n	8003b98 <HAL_RCC_OscConfig+0x8a0>
 8003b5c:	1d3b      	adds	r3, r7, #4
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	2b05      	cmp	r3, #5
 8003b64:	d10c      	bne.n	8003b80 <HAL_RCC_OscConfig+0x888>
 8003b66:	4b2b      	ldr	r3, [pc, #172]	; (8003c14 <HAL_RCC_OscConfig+0x91c>)
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	4a2a      	ldr	r2, [pc, #168]	; (8003c14 <HAL_RCC_OscConfig+0x91c>)
 8003b6c:	f043 0304 	orr.w	r3, r3, #4
 8003b70:	6213      	str	r3, [r2, #32]
 8003b72:	4b28      	ldr	r3, [pc, #160]	; (8003c14 <HAL_RCC_OscConfig+0x91c>)
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	4a27      	ldr	r2, [pc, #156]	; (8003c14 <HAL_RCC_OscConfig+0x91c>)
 8003b78:	f043 0301 	orr.w	r3, r3, #1
 8003b7c:	6213      	str	r3, [r2, #32]
 8003b7e:	e00b      	b.n	8003b98 <HAL_RCC_OscConfig+0x8a0>
 8003b80:	4b24      	ldr	r3, [pc, #144]	; (8003c14 <HAL_RCC_OscConfig+0x91c>)
 8003b82:	6a1b      	ldr	r3, [r3, #32]
 8003b84:	4a23      	ldr	r2, [pc, #140]	; (8003c14 <HAL_RCC_OscConfig+0x91c>)
 8003b86:	f023 0301 	bic.w	r3, r3, #1
 8003b8a:	6213      	str	r3, [r2, #32]
 8003b8c:	4b21      	ldr	r3, [pc, #132]	; (8003c14 <HAL_RCC_OscConfig+0x91c>)
 8003b8e:	6a1b      	ldr	r3, [r3, #32]
 8003b90:	4a20      	ldr	r2, [pc, #128]	; (8003c14 <HAL_RCC_OscConfig+0x91c>)
 8003b92:	f023 0304 	bic.w	r3, r3, #4
 8003b96:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b98:	1d3b      	adds	r3, r7, #4
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d06a      	beq.n	8003c78 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ba2:	f7fe fbe7 	bl	8002374 <HAL_GetTick>
 8003ba6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003baa:	e00b      	b.n	8003bc4 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bac:	f7fe fbe2 	bl	8002374 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d901      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e2a7      	b.n	8004114 <HAL_RCC_OscConfig+0xe1c>
 8003bc4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003bc8:	2202      	movs	r2, #2
 8003bca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bcc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	fa93 f2a3 	rbit	r2, r3
 8003bd6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003bda:	601a      	str	r2, [r3, #0]
 8003bdc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003be0:	2202      	movs	r2, #2
 8003be2:	601a      	str	r2, [r3, #0]
 8003be4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	fa93 f2a3 	rbit	r2, r3
 8003bee:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003bf2:	601a      	str	r2, [r3, #0]
  return result;
 8003bf4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003bf8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bfa:	fab3 f383 	clz	r3, r3
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	095b      	lsrs	r3, r3, #5
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	f043 0302 	orr.w	r3, r3, #2
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d108      	bne.n	8003c20 <HAL_RCC_OscConfig+0x928>
 8003c0e:	4b01      	ldr	r3, [pc, #4]	; (8003c14 <HAL_RCC_OscConfig+0x91c>)
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	e013      	b.n	8003c3c <HAL_RCC_OscConfig+0x944>
 8003c14:	40021000 	.word	0x40021000
 8003c18:	10908120 	.word	0x10908120
 8003c1c:	40007000 	.word	0x40007000
 8003c20:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003c24:	2202      	movs	r2, #2
 8003c26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c28:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	fa93 f2a3 	rbit	r2, r3
 8003c32:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003c36:	601a      	str	r2, [r3, #0]
 8003c38:	4bc0      	ldr	r3, [pc, #768]	; (8003f3c <HAL_RCC_OscConfig+0xc44>)
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003c40:	2102      	movs	r1, #2
 8003c42:	6011      	str	r1, [r2, #0]
 8003c44:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003c48:	6812      	ldr	r2, [r2, #0]
 8003c4a:	fa92 f1a2 	rbit	r1, r2
 8003c4e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003c52:	6011      	str	r1, [r2, #0]
  return result;
 8003c54:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003c58:	6812      	ldr	r2, [r2, #0]
 8003c5a:	fab2 f282 	clz	r2, r2
 8003c5e:	b2d2      	uxtb	r2, r2
 8003c60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c64:	b2d2      	uxtb	r2, r2
 8003c66:	f002 021f 	and.w	r2, r2, #31
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c70:	4013      	ands	r3, r2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d09a      	beq.n	8003bac <HAL_RCC_OscConfig+0x8b4>
 8003c76:	e063      	b.n	8003d40 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c78:	f7fe fb7c 	bl	8002374 <HAL_GetTick>
 8003c7c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c80:	e00b      	b.n	8003c9a <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c82:	f7fe fb77 	bl	8002374 <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e23c      	b.n	8004114 <HAL_RCC_OscConfig+0xe1c>
 8003c9a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	fa93 f2a3 	rbit	r2, r3
 8003cac:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	601a      	str	r2, [r3, #0]
 8003cba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	fa93 f2a3 	rbit	r2, r3
 8003cc4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003cc8:	601a      	str	r2, [r3, #0]
  return result;
 8003cca:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003cce:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cd0:	fab3 f383 	clz	r3, r3
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	095b      	lsrs	r3, r3, #5
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	f043 0302 	orr.w	r3, r3, #2
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d102      	bne.n	8003cea <HAL_RCC_OscConfig+0x9f2>
 8003ce4:	4b95      	ldr	r3, [pc, #596]	; (8003f3c <HAL_RCC_OscConfig+0xc44>)
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	e00d      	b.n	8003d06 <HAL_RCC_OscConfig+0xa0e>
 8003cea:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003cee:	2202      	movs	r2, #2
 8003cf0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	fa93 f2a3 	rbit	r2, r3
 8003cfc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003d00:	601a      	str	r2, [r3, #0]
 8003d02:	4b8e      	ldr	r3, [pc, #568]	; (8003f3c <HAL_RCC_OscConfig+0xc44>)
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8003d0a:	2102      	movs	r1, #2
 8003d0c:	6011      	str	r1, [r2, #0]
 8003d0e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8003d12:	6812      	ldr	r2, [r2, #0]
 8003d14:	fa92 f1a2 	rbit	r1, r2
 8003d18:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003d1c:	6011      	str	r1, [r2, #0]
  return result;
 8003d1e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003d22:	6812      	ldr	r2, [r2, #0]
 8003d24:	fab2 f282 	clz	r2, r2
 8003d28:	b2d2      	uxtb	r2, r2
 8003d2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d2e:	b2d2      	uxtb	r2, r2
 8003d30:	f002 021f 	and.w	r2, r2, #31
 8003d34:	2101      	movs	r1, #1
 8003d36:	fa01 f202 	lsl.w	r2, r1, r2
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1a0      	bne.n	8003c82 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d40:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d105      	bne.n	8003d54 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d48:	4b7c      	ldr	r3, [pc, #496]	; (8003f3c <HAL_RCC_OscConfig+0xc44>)
 8003d4a:	69db      	ldr	r3, [r3, #28]
 8003d4c:	4a7b      	ldr	r2, [pc, #492]	; (8003f3c <HAL_RCC_OscConfig+0xc44>)
 8003d4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d52:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d54:	1d3b      	adds	r3, r7, #4
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f000 81d9 	beq.w	8004112 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d60:	4b76      	ldr	r3, [pc, #472]	; (8003f3c <HAL_RCC_OscConfig+0xc44>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f003 030c 	and.w	r3, r3, #12
 8003d68:	2b08      	cmp	r3, #8
 8003d6a:	f000 81a6 	beq.w	80040ba <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d6e:	1d3b      	adds	r3, r7, #4
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	f040 811e 	bne.w	8003fb6 <HAL_RCC_OscConfig+0xcbe>
 8003d7a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003d7e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d84:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	fa93 f2a3 	rbit	r2, r3
 8003d8e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003d92:	601a      	str	r2, [r3, #0]
  return result;
 8003d94:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003d98:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d9a:	fab3 f383 	clz	r3, r3
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003da4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	461a      	mov	r2, r3
 8003dac:	2300      	movs	r3, #0
 8003dae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db0:	f7fe fae0 	bl	8002374 <HAL_GetTick>
 8003db4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003db8:	e009      	b.n	8003dce <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dba:	f7fe fadb 	bl	8002374 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e1a2      	b.n	8004114 <HAL_RCC_OscConfig+0xe1c>
 8003dce:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003dd2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003dd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	fa93 f2a3 	rbit	r2, r3
 8003de2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003de6:	601a      	str	r2, [r3, #0]
  return result;
 8003de8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003dec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dee:	fab3 f383 	clz	r3, r3
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	095b      	lsrs	r3, r3, #5
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	f043 0301 	orr.w	r3, r3, #1
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d102      	bne.n	8003e08 <HAL_RCC_OscConfig+0xb10>
 8003e02:	4b4e      	ldr	r3, [pc, #312]	; (8003f3c <HAL_RCC_OscConfig+0xc44>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	e01b      	b.n	8003e40 <HAL_RCC_OscConfig+0xb48>
 8003e08:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003e0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e12:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	fa93 f2a3 	rbit	r2, r3
 8003e1c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003e20:	601a      	str	r2, [r3, #0]
 8003e22:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003e26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e2a:	601a      	str	r2, [r3, #0]
 8003e2c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	fa93 f2a3 	rbit	r2, r3
 8003e36:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	4b3f      	ldr	r3, [pc, #252]	; (8003f3c <HAL_RCC_OscConfig+0xc44>)
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e40:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003e44:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003e48:	6011      	str	r1, [r2, #0]
 8003e4a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003e4e:	6812      	ldr	r2, [r2, #0]
 8003e50:	fa92 f1a2 	rbit	r1, r2
 8003e54:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003e58:	6011      	str	r1, [r2, #0]
  return result;
 8003e5a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003e5e:	6812      	ldr	r2, [r2, #0]
 8003e60:	fab2 f282 	clz	r2, r2
 8003e64:	b2d2      	uxtb	r2, r2
 8003e66:	f042 0220 	orr.w	r2, r2, #32
 8003e6a:	b2d2      	uxtb	r2, r2
 8003e6c:	f002 021f 	and.w	r2, r2, #31
 8003e70:	2101      	movs	r1, #1
 8003e72:	fa01 f202 	lsl.w	r2, r1, r2
 8003e76:	4013      	ands	r3, r2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d19e      	bne.n	8003dba <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e7c:	4b2f      	ldr	r3, [pc, #188]	; (8003f3c <HAL_RCC_OscConfig+0xc44>)
 8003e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e80:	f023 020f 	bic.w	r2, r3, #15
 8003e84:	1d3b      	adds	r3, r7, #4
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8a:	492c      	ldr	r1, [pc, #176]	; (8003f3c <HAL_RCC_OscConfig+0xc44>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003e90:	4b2a      	ldr	r3, [pc, #168]	; (8003f3c <HAL_RCC_OscConfig+0xc44>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003e98:	1d3b      	adds	r3, r7, #4
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	6a19      	ldr	r1, [r3, #32]
 8003e9e:	1d3b      	adds	r3, r7, #4
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	69db      	ldr	r3, [r3, #28]
 8003ea4:	430b      	orrs	r3, r1
 8003ea6:	4925      	ldr	r1, [pc, #148]	; (8003f3c <HAL_RCC_OscConfig+0xc44>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	604b      	str	r3, [r1, #4]
 8003eac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003eb0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003eb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	fa93 f2a3 	rbit	r2, r3
 8003ec0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003ec4:	601a      	str	r2, [r3, #0]
  return result;
 8003ec6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003eca:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ecc:	fab3 f383 	clz	r3, r3
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ed6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	461a      	mov	r2, r3
 8003ede:	2301      	movs	r3, #1
 8003ee0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee2:	f7fe fa47 	bl	8002374 <HAL_GetTick>
 8003ee6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003eea:	e009      	b.n	8003f00 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eec:	f7fe fa42 	bl	8002374 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d901      	bls.n	8003f00 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e109      	b.n	8004114 <HAL_RCC_OscConfig+0xe1c>
 8003f00:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003f04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f0a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	fa93 f2a3 	rbit	r2, r3
 8003f14:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003f18:	601a      	str	r2, [r3, #0]
  return result;
 8003f1a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003f1e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f20:	fab3 f383 	clz	r3, r3
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	095b      	lsrs	r3, r3, #5
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	f043 0301 	orr.w	r3, r3, #1
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d105      	bne.n	8003f40 <HAL_RCC_OscConfig+0xc48>
 8003f34:	4b01      	ldr	r3, [pc, #4]	; (8003f3c <HAL_RCC_OscConfig+0xc44>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	e01e      	b.n	8003f78 <HAL_RCC_OscConfig+0xc80>
 8003f3a:	bf00      	nop
 8003f3c:	40021000 	.word	0x40021000
 8003f40:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003f44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f4a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	fa93 f2a3 	rbit	r2, r3
 8003f54:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003f58:	601a      	str	r2, [r3, #0]
 8003f5a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003f5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f62:	601a      	str	r2, [r3, #0]
 8003f64:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	fa93 f2a3 	rbit	r2, r3
 8003f6e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003f72:	601a      	str	r2, [r3, #0]
 8003f74:	4b6a      	ldr	r3, [pc, #424]	; (8004120 <HAL_RCC_OscConfig+0xe28>)
 8003f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f78:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003f7c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f80:	6011      	str	r1, [r2, #0]
 8003f82:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003f86:	6812      	ldr	r2, [r2, #0]
 8003f88:	fa92 f1a2 	rbit	r1, r2
 8003f8c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003f90:	6011      	str	r1, [r2, #0]
  return result;
 8003f92:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003f96:	6812      	ldr	r2, [r2, #0]
 8003f98:	fab2 f282 	clz	r2, r2
 8003f9c:	b2d2      	uxtb	r2, r2
 8003f9e:	f042 0220 	orr.w	r2, r2, #32
 8003fa2:	b2d2      	uxtb	r2, r2
 8003fa4:	f002 021f 	and.w	r2, r2, #31
 8003fa8:	2101      	movs	r1, #1
 8003faa:	fa01 f202 	lsl.w	r2, r1, r2
 8003fae:	4013      	ands	r3, r2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d09b      	beq.n	8003eec <HAL_RCC_OscConfig+0xbf4>
 8003fb4:	e0ad      	b.n	8004112 <HAL_RCC_OscConfig+0xe1a>
 8003fb6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003fba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003fbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	fa93 f2a3 	rbit	r2, r3
 8003fca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003fce:	601a      	str	r2, [r3, #0]
  return result;
 8003fd0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003fd4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fd6:	fab3 f383 	clz	r3, r3
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003fe0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	2300      	movs	r3, #0
 8003fea:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fec:	f7fe f9c2 	bl	8002374 <HAL_GetTick>
 8003ff0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ff4:	e009      	b.n	800400a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ff6:	f7fe f9bd 	bl	8002374 <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b02      	cmp	r3, #2
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e084      	b.n	8004114 <HAL_RCC_OscConfig+0xe1c>
 800400a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800400e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004012:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004014:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	fa93 f2a3 	rbit	r2, r3
 800401e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004022:	601a      	str	r2, [r3, #0]
  return result;
 8004024:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004028:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800402a:	fab3 f383 	clz	r3, r3
 800402e:	b2db      	uxtb	r3, r3
 8004030:	095b      	lsrs	r3, r3, #5
 8004032:	b2db      	uxtb	r3, r3
 8004034:	f043 0301 	orr.w	r3, r3, #1
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b01      	cmp	r3, #1
 800403c:	d102      	bne.n	8004044 <HAL_RCC_OscConfig+0xd4c>
 800403e:	4b38      	ldr	r3, [pc, #224]	; (8004120 <HAL_RCC_OscConfig+0xe28>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	e01b      	b.n	800407c <HAL_RCC_OscConfig+0xd84>
 8004044:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004048:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800404c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800404e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	fa93 f2a3 	rbit	r2, r3
 8004058:	f107 0320 	add.w	r3, r7, #32
 800405c:	601a      	str	r2, [r3, #0]
 800405e:	f107 031c 	add.w	r3, r7, #28
 8004062:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004066:	601a      	str	r2, [r3, #0]
 8004068:	f107 031c 	add.w	r3, r7, #28
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	fa93 f2a3 	rbit	r2, r3
 8004072:	f107 0318 	add.w	r3, r7, #24
 8004076:	601a      	str	r2, [r3, #0]
 8004078:	4b29      	ldr	r3, [pc, #164]	; (8004120 <HAL_RCC_OscConfig+0xe28>)
 800407a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407c:	f107 0214 	add.w	r2, r7, #20
 8004080:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004084:	6011      	str	r1, [r2, #0]
 8004086:	f107 0214 	add.w	r2, r7, #20
 800408a:	6812      	ldr	r2, [r2, #0]
 800408c:	fa92 f1a2 	rbit	r1, r2
 8004090:	f107 0210 	add.w	r2, r7, #16
 8004094:	6011      	str	r1, [r2, #0]
  return result;
 8004096:	f107 0210 	add.w	r2, r7, #16
 800409a:	6812      	ldr	r2, [r2, #0]
 800409c:	fab2 f282 	clz	r2, r2
 80040a0:	b2d2      	uxtb	r2, r2
 80040a2:	f042 0220 	orr.w	r2, r2, #32
 80040a6:	b2d2      	uxtb	r2, r2
 80040a8:	f002 021f 	and.w	r2, r2, #31
 80040ac:	2101      	movs	r1, #1
 80040ae:	fa01 f202 	lsl.w	r2, r1, r2
 80040b2:	4013      	ands	r3, r2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d19e      	bne.n	8003ff6 <HAL_RCC_OscConfig+0xcfe>
 80040b8:	e02b      	b.n	8004112 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040ba:	1d3b      	adds	r3, r7, #4
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d101      	bne.n	80040c8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e025      	b.n	8004114 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80040c8:	4b15      	ldr	r3, [pc, #84]	; (8004120 <HAL_RCC_OscConfig+0xe28>)
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80040d0:	4b13      	ldr	r3, [pc, #76]	; (8004120 <HAL_RCC_OscConfig+0xe28>)
 80040d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80040d8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80040dc:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80040e0:	1d3b      	adds	r3, r7, #4
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	69db      	ldr	r3, [r3, #28]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d111      	bne.n	800410e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80040ea:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80040ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80040f2:	1d3b      	adds	r3, r7, #4
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d108      	bne.n	800410e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80040fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004100:	f003 020f 	and.w	r2, r3, #15
 8004104:	1d3b      	adds	r3, r7, #4
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800410a:	429a      	cmp	r2, r3
 800410c:	d001      	beq.n	8004112 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e000      	b.n	8004114 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	40021000 	.word	0x40021000

08004124 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b09e      	sub	sp, #120	; 0x78
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800412e:	2300      	movs	r3, #0
 8004130:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d101      	bne.n	800413c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e162      	b.n	8004402 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800413c:	4b90      	ldr	r3, [pc, #576]	; (8004380 <HAL_RCC_ClockConfig+0x25c>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0307 	and.w	r3, r3, #7
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	429a      	cmp	r2, r3
 8004148:	d910      	bls.n	800416c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800414a:	4b8d      	ldr	r3, [pc, #564]	; (8004380 <HAL_RCC_ClockConfig+0x25c>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f023 0207 	bic.w	r2, r3, #7
 8004152:	498b      	ldr	r1, [pc, #556]	; (8004380 <HAL_RCC_ClockConfig+0x25c>)
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	4313      	orrs	r3, r2
 8004158:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800415a:	4b89      	ldr	r3, [pc, #548]	; (8004380 <HAL_RCC_ClockConfig+0x25c>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0307 	and.w	r3, r3, #7
 8004162:	683a      	ldr	r2, [r7, #0]
 8004164:	429a      	cmp	r2, r3
 8004166:	d001      	beq.n	800416c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e14a      	b.n	8004402 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0302 	and.w	r3, r3, #2
 8004174:	2b00      	cmp	r3, #0
 8004176:	d008      	beq.n	800418a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004178:	4b82      	ldr	r3, [pc, #520]	; (8004384 <HAL_RCC_ClockConfig+0x260>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	497f      	ldr	r1, [pc, #508]	; (8004384 <HAL_RCC_ClockConfig+0x260>)
 8004186:	4313      	orrs	r3, r2
 8004188:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b00      	cmp	r3, #0
 8004194:	f000 80dc 	beq.w	8004350 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	2b01      	cmp	r3, #1
 800419e:	d13c      	bne.n	800421a <HAL_RCC_ClockConfig+0xf6>
 80041a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041a4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041a8:	fa93 f3a3 	rbit	r3, r3
 80041ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80041ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041b0:	fab3 f383 	clz	r3, r3
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	095b      	lsrs	r3, r3, #5
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	f043 0301 	orr.w	r3, r3, #1
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d102      	bne.n	80041ca <HAL_RCC_ClockConfig+0xa6>
 80041c4:	4b6f      	ldr	r3, [pc, #444]	; (8004384 <HAL_RCC_ClockConfig+0x260>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	e00f      	b.n	80041ea <HAL_RCC_ClockConfig+0xc6>
 80041ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041ce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041d2:	fa93 f3a3 	rbit	r3, r3
 80041d6:	667b      	str	r3, [r7, #100]	; 0x64
 80041d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041dc:	663b      	str	r3, [r7, #96]	; 0x60
 80041de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041e0:	fa93 f3a3 	rbit	r3, r3
 80041e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041e6:	4b67      	ldr	r3, [pc, #412]	; (8004384 <HAL_RCC_ClockConfig+0x260>)
 80041e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80041ee:	65ba      	str	r2, [r7, #88]	; 0x58
 80041f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80041f2:	fa92 f2a2 	rbit	r2, r2
 80041f6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80041f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80041fa:	fab2 f282 	clz	r2, r2
 80041fe:	b2d2      	uxtb	r2, r2
 8004200:	f042 0220 	orr.w	r2, r2, #32
 8004204:	b2d2      	uxtb	r2, r2
 8004206:	f002 021f 	and.w	r2, r2, #31
 800420a:	2101      	movs	r1, #1
 800420c:	fa01 f202 	lsl.w	r2, r1, r2
 8004210:	4013      	ands	r3, r2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d17b      	bne.n	800430e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e0f3      	b.n	8004402 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	2b02      	cmp	r3, #2
 8004220:	d13c      	bne.n	800429c <HAL_RCC_ClockConfig+0x178>
 8004222:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004226:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004228:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800422a:	fa93 f3a3 	rbit	r3, r3
 800422e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004230:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004232:	fab3 f383 	clz	r3, r3
 8004236:	b2db      	uxtb	r3, r3
 8004238:	095b      	lsrs	r3, r3, #5
 800423a:	b2db      	uxtb	r3, r3
 800423c:	f043 0301 	orr.w	r3, r3, #1
 8004240:	b2db      	uxtb	r3, r3
 8004242:	2b01      	cmp	r3, #1
 8004244:	d102      	bne.n	800424c <HAL_RCC_ClockConfig+0x128>
 8004246:	4b4f      	ldr	r3, [pc, #316]	; (8004384 <HAL_RCC_ClockConfig+0x260>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	e00f      	b.n	800426c <HAL_RCC_ClockConfig+0x148>
 800424c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004250:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004252:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004254:	fa93 f3a3 	rbit	r3, r3
 8004258:	647b      	str	r3, [r7, #68]	; 0x44
 800425a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800425e:	643b      	str	r3, [r7, #64]	; 0x40
 8004260:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004262:	fa93 f3a3 	rbit	r3, r3
 8004266:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004268:	4b46      	ldr	r3, [pc, #280]	; (8004384 <HAL_RCC_ClockConfig+0x260>)
 800426a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004270:	63ba      	str	r2, [r7, #56]	; 0x38
 8004272:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004274:	fa92 f2a2 	rbit	r2, r2
 8004278:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800427a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800427c:	fab2 f282 	clz	r2, r2
 8004280:	b2d2      	uxtb	r2, r2
 8004282:	f042 0220 	orr.w	r2, r2, #32
 8004286:	b2d2      	uxtb	r2, r2
 8004288:	f002 021f 	and.w	r2, r2, #31
 800428c:	2101      	movs	r1, #1
 800428e:	fa01 f202 	lsl.w	r2, r1, r2
 8004292:	4013      	ands	r3, r2
 8004294:	2b00      	cmp	r3, #0
 8004296:	d13a      	bne.n	800430e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e0b2      	b.n	8004402 <HAL_RCC_ClockConfig+0x2de>
 800429c:	2302      	movs	r3, #2
 800429e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a2:	fa93 f3a3 	rbit	r3, r3
 80042a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80042a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042aa:	fab3 f383 	clz	r3, r3
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	095b      	lsrs	r3, r3, #5
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	f043 0301 	orr.w	r3, r3, #1
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d102      	bne.n	80042c4 <HAL_RCC_ClockConfig+0x1a0>
 80042be:	4b31      	ldr	r3, [pc, #196]	; (8004384 <HAL_RCC_ClockConfig+0x260>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	e00d      	b.n	80042e0 <HAL_RCC_ClockConfig+0x1bc>
 80042c4:	2302      	movs	r3, #2
 80042c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ca:	fa93 f3a3 	rbit	r3, r3
 80042ce:	627b      	str	r3, [r7, #36]	; 0x24
 80042d0:	2302      	movs	r3, #2
 80042d2:	623b      	str	r3, [r7, #32]
 80042d4:	6a3b      	ldr	r3, [r7, #32]
 80042d6:	fa93 f3a3 	rbit	r3, r3
 80042da:	61fb      	str	r3, [r7, #28]
 80042dc:	4b29      	ldr	r3, [pc, #164]	; (8004384 <HAL_RCC_ClockConfig+0x260>)
 80042de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e0:	2202      	movs	r2, #2
 80042e2:	61ba      	str	r2, [r7, #24]
 80042e4:	69ba      	ldr	r2, [r7, #24]
 80042e6:	fa92 f2a2 	rbit	r2, r2
 80042ea:	617a      	str	r2, [r7, #20]
  return result;
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	fab2 f282 	clz	r2, r2
 80042f2:	b2d2      	uxtb	r2, r2
 80042f4:	f042 0220 	orr.w	r2, r2, #32
 80042f8:	b2d2      	uxtb	r2, r2
 80042fa:	f002 021f 	and.w	r2, r2, #31
 80042fe:	2101      	movs	r1, #1
 8004300:	fa01 f202 	lsl.w	r2, r1, r2
 8004304:	4013      	ands	r3, r2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e079      	b.n	8004402 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800430e:	4b1d      	ldr	r3, [pc, #116]	; (8004384 <HAL_RCC_ClockConfig+0x260>)
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f023 0203 	bic.w	r2, r3, #3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	491a      	ldr	r1, [pc, #104]	; (8004384 <HAL_RCC_ClockConfig+0x260>)
 800431c:	4313      	orrs	r3, r2
 800431e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004320:	f7fe f828 	bl	8002374 <HAL_GetTick>
 8004324:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004326:	e00a      	b.n	800433e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004328:	f7fe f824 	bl	8002374 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	f241 3288 	movw	r2, #5000	; 0x1388
 8004336:	4293      	cmp	r3, r2
 8004338:	d901      	bls.n	800433e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e061      	b.n	8004402 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800433e:	4b11      	ldr	r3, [pc, #68]	; (8004384 <HAL_RCC_ClockConfig+0x260>)
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f003 020c 	and.w	r2, r3, #12
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	429a      	cmp	r2, r3
 800434e:	d1eb      	bne.n	8004328 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004350:	4b0b      	ldr	r3, [pc, #44]	; (8004380 <HAL_RCC_ClockConfig+0x25c>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0307 	and.w	r3, r3, #7
 8004358:	683a      	ldr	r2, [r7, #0]
 800435a:	429a      	cmp	r2, r3
 800435c:	d214      	bcs.n	8004388 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800435e:	4b08      	ldr	r3, [pc, #32]	; (8004380 <HAL_RCC_ClockConfig+0x25c>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f023 0207 	bic.w	r2, r3, #7
 8004366:	4906      	ldr	r1, [pc, #24]	; (8004380 <HAL_RCC_ClockConfig+0x25c>)
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	4313      	orrs	r3, r2
 800436c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800436e:	4b04      	ldr	r3, [pc, #16]	; (8004380 <HAL_RCC_ClockConfig+0x25c>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0307 	and.w	r3, r3, #7
 8004376:	683a      	ldr	r2, [r7, #0]
 8004378:	429a      	cmp	r2, r3
 800437a:	d005      	beq.n	8004388 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e040      	b.n	8004402 <HAL_RCC_ClockConfig+0x2de>
 8004380:	40022000 	.word	0x40022000
 8004384:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0304 	and.w	r3, r3, #4
 8004390:	2b00      	cmp	r3, #0
 8004392:	d008      	beq.n	80043a6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004394:	4b1d      	ldr	r3, [pc, #116]	; (800440c <HAL_RCC_ClockConfig+0x2e8>)
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	491a      	ldr	r1, [pc, #104]	; (800440c <HAL_RCC_ClockConfig+0x2e8>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0308 	and.w	r3, r3, #8
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d009      	beq.n	80043c6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043b2:	4b16      	ldr	r3, [pc, #88]	; (800440c <HAL_RCC_ClockConfig+0x2e8>)
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	00db      	lsls	r3, r3, #3
 80043c0:	4912      	ldr	r1, [pc, #72]	; (800440c <HAL_RCC_ClockConfig+0x2e8>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80043c6:	f000 f829 	bl	800441c <HAL_RCC_GetSysClockFreq>
 80043ca:	4601      	mov	r1, r0
 80043cc:	4b0f      	ldr	r3, [pc, #60]	; (800440c <HAL_RCC_ClockConfig+0x2e8>)
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043d4:	22f0      	movs	r2, #240	; 0xf0
 80043d6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	fa92 f2a2 	rbit	r2, r2
 80043de:	60fa      	str	r2, [r7, #12]
  return result;
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	fab2 f282 	clz	r2, r2
 80043e6:	b2d2      	uxtb	r2, r2
 80043e8:	40d3      	lsrs	r3, r2
 80043ea:	4a09      	ldr	r2, [pc, #36]	; (8004410 <HAL_RCC_ClockConfig+0x2ec>)
 80043ec:	5cd3      	ldrb	r3, [r2, r3]
 80043ee:	fa21 f303 	lsr.w	r3, r1, r3
 80043f2:	4a08      	ldr	r2, [pc, #32]	; (8004414 <HAL_RCC_ClockConfig+0x2f0>)
 80043f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80043f6:	4b08      	ldr	r3, [pc, #32]	; (8004418 <HAL_RCC_ClockConfig+0x2f4>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7fd ff76 	bl	80022ec <HAL_InitTick>
  
  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3778      	adds	r7, #120	; 0x78
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	40021000 	.word	0x40021000
 8004410:	08005490 	.word	0x08005490
 8004414:	20000008 	.word	0x20000008
 8004418:	2000000c 	.word	0x2000000c

0800441c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800441c:	b480      	push	{r7}
 800441e:	b08b      	sub	sp, #44	; 0x2c
 8004420:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004422:	2300      	movs	r3, #0
 8004424:	61fb      	str	r3, [r7, #28]
 8004426:	2300      	movs	r3, #0
 8004428:	61bb      	str	r3, [r7, #24]
 800442a:	2300      	movs	r3, #0
 800442c:	627b      	str	r3, [r7, #36]	; 0x24
 800442e:	2300      	movs	r3, #0
 8004430:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004432:	2300      	movs	r3, #0
 8004434:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004436:	4b2a      	ldr	r3, [pc, #168]	; (80044e0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	f003 030c 	and.w	r3, r3, #12
 8004442:	2b04      	cmp	r3, #4
 8004444:	d002      	beq.n	800444c <HAL_RCC_GetSysClockFreq+0x30>
 8004446:	2b08      	cmp	r3, #8
 8004448:	d003      	beq.n	8004452 <HAL_RCC_GetSysClockFreq+0x36>
 800444a:	e03f      	b.n	80044cc <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800444c:	4b25      	ldr	r3, [pc, #148]	; (80044e4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800444e:	623b      	str	r3, [r7, #32]
      break;
 8004450:	e03f      	b.n	80044d2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004458:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800445c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	fa92 f2a2 	rbit	r2, r2
 8004464:	607a      	str	r2, [r7, #4]
  return result;
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	fab2 f282 	clz	r2, r2
 800446c:	b2d2      	uxtb	r2, r2
 800446e:	40d3      	lsrs	r3, r2
 8004470:	4a1d      	ldr	r2, [pc, #116]	; (80044e8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004472:	5cd3      	ldrb	r3, [r2, r3]
 8004474:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004476:	4b1a      	ldr	r3, [pc, #104]	; (80044e0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447a:	f003 030f 	and.w	r3, r3, #15
 800447e:	220f      	movs	r2, #15
 8004480:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	fa92 f2a2 	rbit	r2, r2
 8004488:	60fa      	str	r2, [r7, #12]
  return result;
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	fab2 f282 	clz	r2, r2
 8004490:	b2d2      	uxtb	r2, r2
 8004492:	40d3      	lsrs	r3, r2
 8004494:	4a15      	ldr	r2, [pc, #84]	; (80044ec <HAL_RCC_GetSysClockFreq+0xd0>)
 8004496:	5cd3      	ldrb	r3, [r2, r3]
 8004498:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d008      	beq.n	80044b6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80044a4:	4a0f      	ldr	r2, [pc, #60]	; (80044e4 <HAL_RCC_GetSysClockFreq+0xc8>)
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	fb02 f303 	mul.w	r3, r2, r3
 80044b2:	627b      	str	r3, [r7, #36]	; 0x24
 80044b4:	e007      	b.n	80044c6 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80044b6:	4a0b      	ldr	r2, [pc, #44]	; (80044e4 <HAL_RCC_GetSysClockFreq+0xc8>)
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	fb02 f303 	mul.w	r3, r2, r3
 80044c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80044c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c8:	623b      	str	r3, [r7, #32]
      break;
 80044ca:	e002      	b.n	80044d2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80044cc:	4b05      	ldr	r3, [pc, #20]	; (80044e4 <HAL_RCC_GetSysClockFreq+0xc8>)
 80044ce:	623b      	str	r3, [r7, #32]
      break;
 80044d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044d2:	6a3b      	ldr	r3, [r7, #32]
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	372c      	adds	r7, #44	; 0x2c
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr
 80044e0:	40021000 	.word	0x40021000
 80044e4:	007a1200 	.word	0x007a1200
 80044e8:	080054a8 	.word	0x080054a8
 80044ec:	080054b8 	.word	0x080054b8

080044f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044f4:	4b03      	ldr	r3, [pc, #12]	; (8004504 <HAL_RCC_GetHCLKFreq+0x14>)
 80044f6:	681b      	ldr	r3, [r3, #0]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	20000008 	.word	0x20000008

08004508 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800450e:	f7ff ffef 	bl	80044f0 <HAL_RCC_GetHCLKFreq>
 8004512:	4601      	mov	r1, r0
 8004514:	4b0b      	ldr	r3, [pc, #44]	; (8004544 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800451c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004520:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	fa92 f2a2 	rbit	r2, r2
 8004528:	603a      	str	r2, [r7, #0]
  return result;
 800452a:	683a      	ldr	r2, [r7, #0]
 800452c:	fab2 f282 	clz	r2, r2
 8004530:	b2d2      	uxtb	r2, r2
 8004532:	40d3      	lsrs	r3, r2
 8004534:	4a04      	ldr	r2, [pc, #16]	; (8004548 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004536:	5cd3      	ldrb	r3, [r2, r3]
 8004538:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800453c:	4618      	mov	r0, r3
 800453e:	3708      	adds	r7, #8
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	40021000 	.word	0x40021000
 8004548:	080054a0 	.word	0x080054a0

0800454c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004552:	f7ff ffcd 	bl	80044f0 <HAL_RCC_GetHCLKFreq>
 8004556:	4601      	mov	r1, r0
 8004558:	4b0b      	ldr	r3, [pc, #44]	; (8004588 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004560:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004564:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	fa92 f2a2 	rbit	r2, r2
 800456c:	603a      	str	r2, [r7, #0]
  return result;
 800456e:	683a      	ldr	r2, [r7, #0]
 8004570:	fab2 f282 	clz	r2, r2
 8004574:	b2d2      	uxtb	r2, r2
 8004576:	40d3      	lsrs	r3, r2
 8004578:	4a04      	ldr	r2, [pc, #16]	; (800458c <HAL_RCC_GetPCLK2Freq+0x40>)
 800457a:	5cd3      	ldrb	r3, [r2, r3]
 800457c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004580:	4618      	mov	r0, r3
 8004582:	3708      	adds	r7, #8
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	40021000 	.word	0x40021000
 800458c:	080054a0 	.word	0x080054a0

08004590 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b092      	sub	sp, #72	; 0x48
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004598:	2300      	movs	r3, #0
 800459a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800459c:	2300      	movs	r3, #0
 800459e:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f000 80d7 	beq.w	800475c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80045ae:	2300      	movs	r3, #0
 80045b0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045b4:	4b4e      	ldr	r3, [pc, #312]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045b6:	69db      	ldr	r3, [r3, #28]
 80045b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d10e      	bne.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045c0:	4b4b      	ldr	r3, [pc, #300]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045c2:	69db      	ldr	r3, [r3, #28]
 80045c4:	4a4a      	ldr	r2, [pc, #296]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045ca:	61d3      	str	r3, [r2, #28]
 80045cc:	4b48      	ldr	r3, [pc, #288]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ce:	69db      	ldr	r3, [r3, #28]
 80045d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d4:	60bb      	str	r3, [r7, #8]
 80045d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045d8:	2301      	movs	r3, #1
 80045da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045de:	4b45      	ldr	r3, [pc, #276]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d118      	bne.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045ea:	4b42      	ldr	r3, [pc, #264]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a41      	ldr	r2, [pc, #260]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045f4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045f6:	f7fd febd 	bl	8002374 <HAL_GetTick>
 80045fa:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045fc:	e008      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045fe:	f7fd feb9 	bl	8002374 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	2b64      	cmp	r3, #100	; 0x64
 800460a:	d901      	bls.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e1d6      	b.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004610:	4b38      	ldr	r3, [pc, #224]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004618:	2b00      	cmp	r3, #0
 800461a:	d0f0      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800461c:	4b34      	ldr	r3, [pc, #208]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800461e:	6a1b      	ldr	r3, [r3, #32]
 8004620:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004624:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004628:	2b00      	cmp	r3, #0
 800462a:	f000 8084 	beq.w	8004736 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004636:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004638:	429a      	cmp	r2, r3
 800463a:	d07c      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800463c:	4b2c      	ldr	r3, [pc, #176]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800463e:	6a1b      	ldr	r3, [r3, #32]
 8004640:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004644:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004646:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800464a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800464c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464e:	fa93 f3a3 	rbit	r3, r3
 8004652:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004656:	fab3 f383 	clz	r3, r3
 800465a:	b2db      	uxtb	r3, r3
 800465c:	461a      	mov	r2, r3
 800465e:	4b26      	ldr	r3, [pc, #152]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004660:	4413      	add	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	461a      	mov	r2, r3
 8004666:	2301      	movs	r3, #1
 8004668:	6013      	str	r3, [r2, #0]
 800466a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800466e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004672:	fa93 f3a3 	rbit	r3, r3
 8004676:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800467a:	fab3 f383 	clz	r3, r3
 800467e:	b2db      	uxtb	r3, r3
 8004680:	461a      	mov	r2, r3
 8004682:	4b1d      	ldr	r3, [pc, #116]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004684:	4413      	add	r3, r2
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	461a      	mov	r2, r3
 800468a:	2300      	movs	r3, #0
 800468c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800468e:	4a18      	ldr	r2, [pc, #96]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004692:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	2b00      	cmp	r3, #0
 800469c:	d04b      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800469e:	f7fd fe69 	bl	8002374 <HAL_GetTick>
 80046a2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046a4:	e00a      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046a6:	f7fd fe65 	bl	8002374 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d901      	bls.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e180      	b.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80046bc:	2302      	movs	r3, #2
 80046be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c2:	fa93 f3a3 	rbit	r3, r3
 80046c6:	627b      	str	r3, [r7, #36]	; 0x24
 80046c8:	2302      	movs	r3, #2
 80046ca:	623b      	str	r3, [r7, #32]
 80046cc:	6a3b      	ldr	r3, [r7, #32]
 80046ce:	fa93 f3a3 	rbit	r3, r3
 80046d2:	61fb      	str	r3, [r7, #28]
  return result;
 80046d4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046d6:	fab3 f383 	clz	r3, r3
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	095b      	lsrs	r3, r3, #5
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	f043 0302 	orr.w	r3, r3, #2
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d108      	bne.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80046ea:	4b01      	ldr	r3, [pc, #4]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	e00d      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80046f0:	40021000 	.word	0x40021000
 80046f4:	40007000 	.word	0x40007000
 80046f8:	10908100 	.word	0x10908100
 80046fc:	2302      	movs	r3, #2
 80046fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	fa93 f3a3 	rbit	r3, r3
 8004706:	617b      	str	r3, [r7, #20]
 8004708:	4ba0      	ldr	r3, [pc, #640]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800470a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470c:	2202      	movs	r2, #2
 800470e:	613a      	str	r2, [r7, #16]
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	fa92 f2a2 	rbit	r2, r2
 8004716:	60fa      	str	r2, [r7, #12]
  return result;
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	fab2 f282 	clz	r2, r2
 800471e:	b2d2      	uxtb	r2, r2
 8004720:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004724:	b2d2      	uxtb	r2, r2
 8004726:	f002 021f 	and.w	r2, r2, #31
 800472a:	2101      	movs	r1, #1
 800472c:	fa01 f202 	lsl.w	r2, r1, r2
 8004730:	4013      	ands	r3, r2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d0b7      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004736:	4b95      	ldr	r3, [pc, #596]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	4992      	ldr	r1, [pc, #584]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004744:	4313      	orrs	r3, r2
 8004746:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004748:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800474c:	2b01      	cmp	r3, #1
 800474e:	d105      	bne.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004750:	4b8e      	ldr	r3, [pc, #568]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004752:	69db      	ldr	r3, [r3, #28]
 8004754:	4a8d      	ldr	r2, [pc, #564]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004756:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800475a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0301 	and.w	r3, r3, #1
 8004764:	2b00      	cmp	r3, #0
 8004766:	d008      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004768:	4b88      	ldr	r3, [pc, #544]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800476a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476c:	f023 0203 	bic.w	r2, r3, #3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	4985      	ldr	r1, [pc, #532]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004776:	4313      	orrs	r3, r2
 8004778:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	2b00      	cmp	r3, #0
 8004784:	d008      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004786:	4b81      	ldr	r3, [pc, #516]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	497e      	ldr	r1, [pc, #504]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004794:	4313      	orrs	r3, r2
 8004796:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0304 	and.w	r3, r3, #4
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d008      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047a4:	4b79      	ldr	r3, [pc, #484]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80047a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	4976      	ldr	r1, [pc, #472]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0320 	and.w	r3, r3, #32
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d008      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047c2:	4b72      	ldr	r3, [pc, #456]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80047c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c6:	f023 0210 	bic.w	r2, r3, #16
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	69db      	ldr	r3, [r3, #28]
 80047ce:	496f      	ldr	r1, [pc, #444]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d008      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80047e0:	4b6a      	ldr	r3, [pc, #424]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ec:	4967      	ldr	r1, [pc, #412]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d008      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047fe:	4b63      	ldr	r3, [pc, #396]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004802:	f023 0220 	bic.w	r2, r3, #32
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a1b      	ldr	r3, [r3, #32]
 800480a:	4960      	ldr	r1, [pc, #384]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800480c:	4313      	orrs	r3, r2
 800480e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d008      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800481c:	4b5b      	ldr	r3, [pc, #364]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800481e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004820:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004828:	4958      	ldr	r1, [pc, #352]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800482a:	4313      	orrs	r3, r2
 800482c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0308 	and.w	r3, r3, #8
 8004836:	2b00      	cmp	r3, #0
 8004838:	d008      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800483a:	4b54      	ldr	r3, [pc, #336]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800483c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	4951      	ldr	r1, [pc, #324]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004848:	4313      	orrs	r3, r2
 800484a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0310 	and.w	r3, r3, #16
 8004854:	2b00      	cmp	r3, #0
 8004856:	d008      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004858:	4b4c      	ldr	r3, [pc, #304]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800485a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	4949      	ldr	r1, [pc, #292]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004866:	4313      	orrs	r3, r2
 8004868:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004872:	2b00      	cmp	r3, #0
 8004874:	d008      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004876:	4b45      	ldr	r3, [pc, #276]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004882:	4942      	ldr	r1, [pc, #264]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004884:	4313      	orrs	r3, r2
 8004886:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004890:	2b00      	cmp	r3, #0
 8004892:	d008      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004894:	4b3d      	ldr	r3, [pc, #244]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004898:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a0:	493a      	ldr	r1, [pc, #232]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d008      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80048b2:	4b36      	ldr	r3, [pc, #216]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80048b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048be:	4933      	ldr	r1, [pc, #204]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d008      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80048d0:	4b2e      	ldr	r3, [pc, #184]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80048d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048dc:	492b      	ldr	r1, [pc, #172]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d008      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80048ee:	4b27      	ldr	r3, [pc, #156]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80048f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fa:	4924      	ldr	r1, [pc, #144]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d008      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800490c:	4b1f      	ldr	r3, [pc, #124]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800490e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004910:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004918:	491c      	ldr	r1, [pc, #112]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800491a:	4313      	orrs	r3, r2
 800491c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d008      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800492a:	4b18      	ldr	r3, [pc, #96]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800492c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004936:	4915      	ldr	r1, [pc, #84]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004938:	4313      	orrs	r3, r2
 800493a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d008      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004948:	4b10      	ldr	r3, [pc, #64]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800494a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004954:	490d      	ldr	r1, [pc, #52]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004956:	4313      	orrs	r3, r2
 8004958:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d008      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004966:	4b09      	ldr	r3, [pc, #36]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004972:	4906      	ldr	r1, [pc, #24]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004974:	4313      	orrs	r3, r2
 8004976:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00c      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004984:	4b01      	ldr	r3, [pc, #4]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004988:	e002      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800498a:	bf00      	nop
 800498c:	40021000 	.word	0x40021000
 8004990:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004998:	490b      	ldr	r1, [pc, #44]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800499a:	4313      	orrs	r3, r2
 800499c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d008      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80049aa:	4b07      	ldr	r3, [pc, #28]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80049ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ae:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049b6:	4904      	ldr	r1, [pc, #16]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3748      	adds	r7, #72	; 0x48
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	40021000 	.word	0x40021000

080049cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e040      	b.n	8004a60 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d106      	bne.n	80049f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f7fd fbb6 	bl	8002160 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2224      	movs	r2, #36	; 0x24
 80049f8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f022 0201 	bic.w	r2, r2, #1
 8004a08:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f98c 	bl	8004d28 <UART_SetConfig>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d101      	bne.n	8004a1a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e022      	b.n	8004a60 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d002      	beq.n	8004a28 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 fb9a 	bl	800515c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685a      	ldr	r2, [r3, #4]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	689a      	ldr	r2, [r3, #8]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f042 0201 	orr.w	r2, r2, #1
 8004a56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 fc21 	bl	80052a0 <UART_CheckIdleState>
 8004a5e:	4603      	mov	r3, r0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3708      	adds	r7, #8
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b08a      	sub	sp, #40	; 0x28
 8004a6c:	af02      	add	r7, sp, #8
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	603b      	str	r3, [r7, #0]
 8004a74:	4613      	mov	r3, r2
 8004a76:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a7c:	2b20      	cmp	r3, #32
 8004a7e:	f040 8081 	bne.w	8004b84 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d002      	beq.n	8004a8e <HAL_UART_Transmit+0x26>
 8004a88:	88fb      	ldrh	r3, [r7, #6]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e079      	b.n	8004b86 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d101      	bne.n	8004aa0 <HAL_UART_Transmit+0x38>
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	e072      	b.n	8004b86 <HAL_UART_Transmit+0x11e>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2221      	movs	r2, #33	; 0x21
 8004ab2:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004ab4:	f7fd fc5e 	bl	8002374 <HAL_GetTick>
 8004ab8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	88fa      	ldrh	r2, [r7, #6]
 8004abe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	88fa      	ldrh	r2, [r7, #6]
 8004ac6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ad2:	d108      	bne.n	8004ae6 <HAL_UART_Transmit+0x7e>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d104      	bne.n	8004ae6 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004adc:	2300      	movs	r3, #0
 8004ade:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	61bb      	str	r3, [r7, #24]
 8004ae4:	e003      	b.n	8004aee <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004aea:	2300      	movs	r3, #0
 8004aec:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004aee:	e02d      	b.n	8004b4c <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	9300      	str	r3, [sp, #0]
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	2200      	movs	r2, #0
 8004af8:	2180      	movs	r1, #128	; 0x80
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f000 fc15 	bl	800532a <UART_WaitOnFlagUntilTimeout>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d001      	beq.n	8004b0a <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e03d      	b.n	8004b86 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d10b      	bne.n	8004b28 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	881a      	ldrh	r2, [r3, #0]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b1c:	b292      	uxth	r2, r2
 8004b1e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	3302      	adds	r3, #2
 8004b24:	61bb      	str	r3, [r7, #24]
 8004b26:	e008      	b.n	8004b3a <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	781a      	ldrb	r2, [r3, #0]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	b292      	uxth	r2, r2
 8004b32:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	3301      	adds	r3, #1
 8004b38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	3b01      	subs	r3, #1
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1cb      	bne.n	8004af0 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	9300      	str	r3, [sp, #0]
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	2140      	movs	r1, #64	; 0x40
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f000 fbe1 	bl	800532a <UART_WaitOnFlagUntilTimeout>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d001      	beq.n	8004b72 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e009      	b.n	8004b86 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2220      	movs	r2, #32
 8004b76:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8004b80:	2300      	movs	r3, #0
 8004b82:	e000      	b.n	8004b86 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004b84:	2302      	movs	r3, #2
  }
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3720      	adds	r7, #32
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}

08004b8e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b8e:	b580      	push	{r7, lr}
 8004b90:	b08a      	sub	sp, #40	; 0x28
 8004b92:	af02      	add	r7, sp, #8
 8004b94:	60f8      	str	r0, [r7, #12]
 8004b96:	60b9      	str	r1, [r7, #8]
 8004b98:	603b      	str	r3, [r7, #0]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ba2:	2b20      	cmp	r3, #32
 8004ba4:	f040 80bb 	bne.w	8004d1e <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d002      	beq.n	8004bb4 <HAL_UART_Receive+0x26>
 8004bae:	88fb      	ldrh	r3, [r7, #6]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d101      	bne.n	8004bb8 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e0b3      	b.n	8004d20 <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d101      	bne.n	8004bc6 <HAL_UART_Receive+0x38>
 8004bc2:	2302      	movs	r3, #2
 8004bc4:	e0ac      	b.n	8004d20 <HAL_UART_Receive+0x192>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2222      	movs	r2, #34	; 0x22
 8004bd8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004bda:	f7fd fbcb 	bl	8002374 <HAL_GetTick>
 8004bde:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	88fa      	ldrh	r2, [r7, #6]
 8004be4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	88fa      	ldrh	r2, [r7, #6]
 8004bec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bf8:	d10e      	bne.n	8004c18 <HAL_UART_Receive+0x8a>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d105      	bne.n	8004c0e <HAL_UART_Receive+0x80>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004c08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c0c:	e02d      	b.n	8004c6a <HAL_UART_Receive+0xdc>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	22ff      	movs	r2, #255	; 0xff
 8004c12:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c16:	e028      	b.n	8004c6a <HAL_UART_Receive+0xdc>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d10d      	bne.n	8004c3c <HAL_UART_Receive+0xae>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d104      	bne.n	8004c32 <HAL_UART_Receive+0xa4>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	22ff      	movs	r2, #255	; 0xff
 8004c2c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c30:	e01b      	b.n	8004c6a <HAL_UART_Receive+0xdc>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	227f      	movs	r2, #127	; 0x7f
 8004c36:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c3a:	e016      	b.n	8004c6a <HAL_UART_Receive+0xdc>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c44:	d10d      	bne.n	8004c62 <HAL_UART_Receive+0xd4>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d104      	bne.n	8004c58 <HAL_UART_Receive+0xca>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	227f      	movs	r2, #127	; 0x7f
 8004c52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c56:	e008      	b.n	8004c6a <HAL_UART_Receive+0xdc>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	223f      	movs	r2, #63	; 0x3f
 8004c5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c60:	e003      	b.n	8004c6a <HAL_UART_Receive+0xdc>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004c70:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c7a:	d108      	bne.n	8004c8e <HAL_UART_Receive+0x100>
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d104      	bne.n	8004c8e <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8004c84:	2300      	movs	r3, #0
 8004c86:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	61bb      	str	r3, [r7, #24]
 8004c8c:	e003      	b.n	8004c96 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c92:	2300      	movs	r3, #0
 8004c94:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004c96:	e033      	b.n	8004d00 <HAL_UART_Receive+0x172>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	9300      	str	r3, [sp, #0]
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	2120      	movs	r1, #32
 8004ca2:	68f8      	ldr	r0, [r7, #12]
 8004ca4:	f000 fb41 	bl	800532a <UART_WaitOnFlagUntilTimeout>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d001      	beq.n	8004cb2 <HAL_UART_Receive+0x124>
      {
        return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e036      	b.n	8004d20 <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10c      	bne.n	8004cd2 <HAL_UART_Receive+0x144>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	8a7b      	ldrh	r3, [r7, #18]
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	3302      	adds	r3, #2
 8004cce:	61bb      	str	r3, [r7, #24]
 8004cd0:	e00d      	b.n	8004cee <HAL_UART_Receive+0x160>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	b2da      	uxtb	r2, r3
 8004cdc:	8a7b      	ldrh	r3, [r7, #18]
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	b2da      	uxtb	r2, r3
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	3301      	adds	r3, #1
 8004cec:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	b29a      	uxth	r2, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1c5      	bne.n	8004c98 <HAL_UART_Receive+0x10a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2220      	movs	r2, #32
 8004d10:	679a      	str	r2, [r3, #120]	; 0x78

    __HAL_UNLOCK(huart);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	e000      	b.n	8004d20 <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 8004d1e:	2302      	movs	r3, #2
  }
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3720      	adds	r7, #32
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b088      	sub	sp, #32
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004d30:	2300      	movs	r3, #0
 8004d32:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d34:	2300      	movs	r3, #0
 8004d36:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	689a      	ldr	r2, [r3, #8]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	431a      	orrs	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	431a      	orrs	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	69db      	ldr	r3, [r3, #28]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	4bac      	ldr	r3, [pc, #688]	; (8005008 <UART_SetConfig+0x2e0>)
 8004d58:	4013      	ands	r3, r2
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	6812      	ldr	r2, [r2, #0]
 8004d5e:	6939      	ldr	r1, [r7, #16]
 8004d60:	430b      	orrs	r3, r1
 8004d62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	68da      	ldr	r2, [r3, #12]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	430a      	orrs	r2, r1
 8004d78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a1b      	ldr	r3, [r3, #32]
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a9a      	ldr	r2, [pc, #616]	; (800500c <UART_SetConfig+0x2e4>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d121      	bne.n	8004dec <UART_SetConfig+0xc4>
 8004da8:	4b99      	ldr	r3, [pc, #612]	; (8005010 <UART_SetConfig+0x2e8>)
 8004daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dac:	f003 0303 	and.w	r3, r3, #3
 8004db0:	2b03      	cmp	r3, #3
 8004db2:	d817      	bhi.n	8004de4 <UART_SetConfig+0xbc>
 8004db4:	a201      	add	r2, pc, #4	; (adr r2, 8004dbc <UART_SetConfig+0x94>)
 8004db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dba:	bf00      	nop
 8004dbc:	08004dcd 	.word	0x08004dcd
 8004dc0:	08004dd9 	.word	0x08004dd9
 8004dc4:	08004ddf 	.word	0x08004ddf
 8004dc8:	08004dd3 	.word	0x08004dd3
 8004dcc:	2301      	movs	r3, #1
 8004dce:	77fb      	strb	r3, [r7, #31]
 8004dd0:	e0b2      	b.n	8004f38 <UART_SetConfig+0x210>
 8004dd2:	2302      	movs	r3, #2
 8004dd4:	77fb      	strb	r3, [r7, #31]
 8004dd6:	e0af      	b.n	8004f38 <UART_SetConfig+0x210>
 8004dd8:	2304      	movs	r3, #4
 8004dda:	77fb      	strb	r3, [r7, #31]
 8004ddc:	e0ac      	b.n	8004f38 <UART_SetConfig+0x210>
 8004dde:	2308      	movs	r3, #8
 8004de0:	77fb      	strb	r3, [r7, #31]
 8004de2:	e0a9      	b.n	8004f38 <UART_SetConfig+0x210>
 8004de4:	2310      	movs	r3, #16
 8004de6:	77fb      	strb	r3, [r7, #31]
 8004de8:	bf00      	nop
 8004dea:	e0a5      	b.n	8004f38 <UART_SetConfig+0x210>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a88      	ldr	r2, [pc, #544]	; (8005014 <UART_SetConfig+0x2ec>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d123      	bne.n	8004e3e <UART_SetConfig+0x116>
 8004df6:	4b86      	ldr	r3, [pc, #536]	; (8005010 <UART_SetConfig+0x2e8>)
 8004df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dfa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004dfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e02:	d012      	beq.n	8004e2a <UART_SetConfig+0x102>
 8004e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e08:	d802      	bhi.n	8004e10 <UART_SetConfig+0xe8>
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d007      	beq.n	8004e1e <UART_SetConfig+0xf6>
 8004e0e:	e012      	b.n	8004e36 <UART_SetConfig+0x10e>
 8004e10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e14:	d00c      	beq.n	8004e30 <UART_SetConfig+0x108>
 8004e16:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e1a:	d003      	beq.n	8004e24 <UART_SetConfig+0xfc>
 8004e1c:	e00b      	b.n	8004e36 <UART_SetConfig+0x10e>
 8004e1e:	2300      	movs	r3, #0
 8004e20:	77fb      	strb	r3, [r7, #31]
 8004e22:	e089      	b.n	8004f38 <UART_SetConfig+0x210>
 8004e24:	2302      	movs	r3, #2
 8004e26:	77fb      	strb	r3, [r7, #31]
 8004e28:	e086      	b.n	8004f38 <UART_SetConfig+0x210>
 8004e2a:	2304      	movs	r3, #4
 8004e2c:	77fb      	strb	r3, [r7, #31]
 8004e2e:	e083      	b.n	8004f38 <UART_SetConfig+0x210>
 8004e30:	2308      	movs	r3, #8
 8004e32:	77fb      	strb	r3, [r7, #31]
 8004e34:	e080      	b.n	8004f38 <UART_SetConfig+0x210>
 8004e36:	2310      	movs	r3, #16
 8004e38:	77fb      	strb	r3, [r7, #31]
 8004e3a:	bf00      	nop
 8004e3c:	e07c      	b.n	8004f38 <UART_SetConfig+0x210>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a75      	ldr	r2, [pc, #468]	; (8005018 <UART_SetConfig+0x2f0>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d123      	bne.n	8004e90 <UART_SetConfig+0x168>
 8004e48:	4b71      	ldr	r3, [pc, #452]	; (8005010 <UART_SetConfig+0x2e8>)
 8004e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004e50:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e54:	d012      	beq.n	8004e7c <UART_SetConfig+0x154>
 8004e56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e5a:	d802      	bhi.n	8004e62 <UART_SetConfig+0x13a>
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d007      	beq.n	8004e70 <UART_SetConfig+0x148>
 8004e60:	e012      	b.n	8004e88 <UART_SetConfig+0x160>
 8004e62:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004e66:	d00c      	beq.n	8004e82 <UART_SetConfig+0x15a>
 8004e68:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004e6c:	d003      	beq.n	8004e76 <UART_SetConfig+0x14e>
 8004e6e:	e00b      	b.n	8004e88 <UART_SetConfig+0x160>
 8004e70:	2300      	movs	r3, #0
 8004e72:	77fb      	strb	r3, [r7, #31]
 8004e74:	e060      	b.n	8004f38 <UART_SetConfig+0x210>
 8004e76:	2302      	movs	r3, #2
 8004e78:	77fb      	strb	r3, [r7, #31]
 8004e7a:	e05d      	b.n	8004f38 <UART_SetConfig+0x210>
 8004e7c:	2304      	movs	r3, #4
 8004e7e:	77fb      	strb	r3, [r7, #31]
 8004e80:	e05a      	b.n	8004f38 <UART_SetConfig+0x210>
 8004e82:	2308      	movs	r3, #8
 8004e84:	77fb      	strb	r3, [r7, #31]
 8004e86:	e057      	b.n	8004f38 <UART_SetConfig+0x210>
 8004e88:	2310      	movs	r3, #16
 8004e8a:	77fb      	strb	r3, [r7, #31]
 8004e8c:	bf00      	nop
 8004e8e:	e053      	b.n	8004f38 <UART_SetConfig+0x210>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a61      	ldr	r2, [pc, #388]	; (800501c <UART_SetConfig+0x2f4>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d123      	bne.n	8004ee2 <UART_SetConfig+0x1ba>
 8004e9a:	4b5d      	ldr	r3, [pc, #372]	; (8005010 <UART_SetConfig+0x2e8>)
 8004e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004ea2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ea6:	d012      	beq.n	8004ece <UART_SetConfig+0x1a6>
 8004ea8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004eac:	d802      	bhi.n	8004eb4 <UART_SetConfig+0x18c>
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d007      	beq.n	8004ec2 <UART_SetConfig+0x19a>
 8004eb2:	e012      	b.n	8004eda <UART_SetConfig+0x1b2>
 8004eb4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004eb8:	d00c      	beq.n	8004ed4 <UART_SetConfig+0x1ac>
 8004eba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ebe:	d003      	beq.n	8004ec8 <UART_SetConfig+0x1a0>
 8004ec0:	e00b      	b.n	8004eda <UART_SetConfig+0x1b2>
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	77fb      	strb	r3, [r7, #31]
 8004ec6:	e037      	b.n	8004f38 <UART_SetConfig+0x210>
 8004ec8:	2302      	movs	r3, #2
 8004eca:	77fb      	strb	r3, [r7, #31]
 8004ecc:	e034      	b.n	8004f38 <UART_SetConfig+0x210>
 8004ece:	2304      	movs	r3, #4
 8004ed0:	77fb      	strb	r3, [r7, #31]
 8004ed2:	e031      	b.n	8004f38 <UART_SetConfig+0x210>
 8004ed4:	2308      	movs	r3, #8
 8004ed6:	77fb      	strb	r3, [r7, #31]
 8004ed8:	e02e      	b.n	8004f38 <UART_SetConfig+0x210>
 8004eda:	2310      	movs	r3, #16
 8004edc:	77fb      	strb	r3, [r7, #31]
 8004ede:	bf00      	nop
 8004ee0:	e02a      	b.n	8004f38 <UART_SetConfig+0x210>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a4e      	ldr	r2, [pc, #312]	; (8005020 <UART_SetConfig+0x2f8>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d123      	bne.n	8004f34 <UART_SetConfig+0x20c>
 8004eec:	4b48      	ldr	r3, [pc, #288]	; (8005010 <UART_SetConfig+0x2e8>)
 8004eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004ef4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ef8:	d012      	beq.n	8004f20 <UART_SetConfig+0x1f8>
 8004efa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004efe:	d802      	bhi.n	8004f06 <UART_SetConfig+0x1de>
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d007      	beq.n	8004f14 <UART_SetConfig+0x1ec>
 8004f04:	e012      	b.n	8004f2c <UART_SetConfig+0x204>
 8004f06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f0a:	d00c      	beq.n	8004f26 <UART_SetConfig+0x1fe>
 8004f0c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f10:	d003      	beq.n	8004f1a <UART_SetConfig+0x1f2>
 8004f12:	e00b      	b.n	8004f2c <UART_SetConfig+0x204>
 8004f14:	2300      	movs	r3, #0
 8004f16:	77fb      	strb	r3, [r7, #31]
 8004f18:	e00e      	b.n	8004f38 <UART_SetConfig+0x210>
 8004f1a:	2302      	movs	r3, #2
 8004f1c:	77fb      	strb	r3, [r7, #31]
 8004f1e:	e00b      	b.n	8004f38 <UART_SetConfig+0x210>
 8004f20:	2304      	movs	r3, #4
 8004f22:	77fb      	strb	r3, [r7, #31]
 8004f24:	e008      	b.n	8004f38 <UART_SetConfig+0x210>
 8004f26:	2308      	movs	r3, #8
 8004f28:	77fb      	strb	r3, [r7, #31]
 8004f2a:	e005      	b.n	8004f38 <UART_SetConfig+0x210>
 8004f2c:	2310      	movs	r3, #16
 8004f2e:	77fb      	strb	r3, [r7, #31]
 8004f30:	bf00      	nop
 8004f32:	e001      	b.n	8004f38 <UART_SetConfig+0x210>
 8004f34:	2310      	movs	r3, #16
 8004f36:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	69db      	ldr	r3, [r3, #28]
 8004f3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f40:	f040 8090 	bne.w	8005064 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8004f44:	7ffb      	ldrb	r3, [r7, #31]
 8004f46:	2b08      	cmp	r3, #8
 8004f48:	d86c      	bhi.n	8005024 <UART_SetConfig+0x2fc>
 8004f4a:	a201      	add	r2, pc, #4	; (adr r2, 8004f50 <UART_SetConfig+0x228>)
 8004f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f50:	08004f75 	.word	0x08004f75
 8004f54:	08004f95 	.word	0x08004f95
 8004f58:	08004fb5 	.word	0x08004fb5
 8004f5c:	08005025 	.word	0x08005025
 8004f60:	08004fd1 	.word	0x08004fd1
 8004f64:	08005025 	.word	0x08005025
 8004f68:	08005025 	.word	0x08005025
 8004f6c:	08005025 	.word	0x08005025
 8004f70:	08004ff1 	.word	0x08004ff1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f74:	f7ff fac8 	bl	8004508 <HAL_RCC_GetPCLK1Freq>
 8004f78:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	005a      	lsls	r2, r3, #1
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	085b      	lsrs	r3, r3, #1
 8004f84:	441a      	add	r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	61bb      	str	r3, [r7, #24]
        break;
 8004f92:	e04a      	b.n	800502a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f94:	f7ff fada 	bl	800454c <HAL_RCC_GetPCLK2Freq>
 8004f98:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	005a      	lsls	r2, r3, #1
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	085b      	lsrs	r3, r3, #1
 8004fa4:	441a      	add	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	61bb      	str	r3, [r7, #24]
        break;
 8004fb2:	e03a      	b.n	800502a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	085b      	lsrs	r3, r3, #1
 8004fba:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004fbe:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	6852      	ldr	r2, [r2, #4]
 8004fc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	61bb      	str	r3, [r7, #24]
        break;
 8004fce:	e02c      	b.n	800502a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fd0:	f7ff fa24 	bl	800441c <HAL_RCC_GetSysClockFreq>
 8004fd4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	005a      	lsls	r2, r3, #1
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	085b      	lsrs	r3, r3, #1
 8004fe0:	441a      	add	r2, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	61bb      	str	r3, [r7, #24]
        break;
 8004fee:	e01c      	b.n	800502a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	085b      	lsrs	r3, r3, #1
 8004ff6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005002:	b29b      	uxth	r3, r3
 8005004:	61bb      	str	r3, [r7, #24]
        break;
 8005006:	e010      	b.n	800502a <UART_SetConfig+0x302>
 8005008:	efff69f3 	.word	0xefff69f3
 800500c:	40013800 	.word	0x40013800
 8005010:	40021000 	.word	0x40021000
 8005014:	40004400 	.word	0x40004400
 8005018:	40004800 	.word	0x40004800
 800501c:	40004c00 	.word	0x40004c00
 8005020:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	75fb      	strb	r3, [r7, #23]
        break;
 8005028:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	2b0f      	cmp	r3, #15
 800502e:	d916      	bls.n	800505e <UART_SetConfig+0x336>
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005036:	d212      	bcs.n	800505e <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	b29b      	uxth	r3, r3
 800503c:	f023 030f 	bic.w	r3, r3, #15
 8005040:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	085b      	lsrs	r3, r3, #1
 8005046:	b29b      	uxth	r3, r3
 8005048:	f003 0307 	and.w	r3, r3, #7
 800504c:	b29a      	uxth	r2, r3
 800504e:	897b      	ldrh	r3, [r7, #10]
 8005050:	4313      	orrs	r3, r2
 8005052:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	897a      	ldrh	r2, [r7, #10]
 800505a:	60da      	str	r2, [r3, #12]
 800505c:	e072      	b.n	8005144 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	75fb      	strb	r3, [r7, #23]
 8005062:	e06f      	b.n	8005144 <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 8005064:	7ffb      	ldrb	r3, [r7, #31]
 8005066:	2b08      	cmp	r3, #8
 8005068:	d85b      	bhi.n	8005122 <UART_SetConfig+0x3fa>
 800506a:	a201      	add	r2, pc, #4	; (adr r2, 8005070 <UART_SetConfig+0x348>)
 800506c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005070:	08005095 	.word	0x08005095
 8005074:	080050b3 	.word	0x080050b3
 8005078:	080050d1 	.word	0x080050d1
 800507c:	08005123 	.word	0x08005123
 8005080:	080050ed 	.word	0x080050ed
 8005084:	08005123 	.word	0x08005123
 8005088:	08005123 	.word	0x08005123
 800508c:	08005123 	.word	0x08005123
 8005090:	0800510b 	.word	0x0800510b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005094:	f7ff fa38 	bl	8004508 <HAL_RCC_GetPCLK1Freq>
 8005098:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	085a      	lsrs	r2, r3, #1
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	441a      	add	r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	61bb      	str	r3, [r7, #24]
        break;
 80050b0:	e03a      	b.n	8005128 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050b2:	f7ff fa4b 	bl	800454c <HAL_RCC_GetPCLK2Freq>
 80050b6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	085a      	lsrs	r2, r3, #1
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	441a      	add	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	61bb      	str	r3, [r7, #24]
        break;
 80050ce:	e02b      	b.n	8005128 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	085b      	lsrs	r3, r3, #1
 80050d6:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80050da:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	6852      	ldr	r2, [r2, #4]
 80050e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	61bb      	str	r3, [r7, #24]
        break;
 80050ea:	e01d      	b.n	8005128 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050ec:	f7ff f996 	bl	800441c <HAL_RCC_GetSysClockFreq>
 80050f0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	085a      	lsrs	r2, r3, #1
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	441a      	add	r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	fbb2 f3f3 	udiv	r3, r2, r3
 8005104:	b29b      	uxth	r3, r3
 8005106:	61bb      	str	r3, [r7, #24]
        break;
 8005108:	e00e      	b.n	8005128 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	085b      	lsrs	r3, r3, #1
 8005110:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	fbb2 f3f3 	udiv	r3, r2, r3
 800511c:	b29b      	uxth	r3, r3
 800511e:	61bb      	str	r3, [r7, #24]
        break;
 8005120:	e002      	b.n	8005128 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	75fb      	strb	r3, [r7, #23]
        break;
 8005126:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	2b0f      	cmp	r3, #15
 800512c:	d908      	bls.n	8005140 <UART_SetConfig+0x418>
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005134:	d204      	bcs.n	8005140 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	69ba      	ldr	r2, [r7, #24]
 800513c:	60da      	str	r2, [r3, #12]
 800513e:	e001      	b.n	8005144 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005150:	7dfb      	ldrb	r3, [r7, #23]
}
 8005152:	4618      	mov	r0, r3
 8005154:	3720      	adds	r7, #32
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop

0800515c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005168:	f003 0301 	and.w	r3, r3, #1
 800516c:	2b00      	cmp	r3, #0
 800516e:	d00a      	beq.n	8005186 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	430a      	orrs	r2, r1
 8005184:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518a:	f003 0302 	and.w	r3, r3, #2
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00a      	beq.n	80051a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	430a      	orrs	r2, r1
 80051a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ac:	f003 0304 	and.w	r3, r3, #4
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00a      	beq.n	80051ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	430a      	orrs	r2, r1
 80051c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ce:	f003 0308 	and.w	r3, r3, #8
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00a      	beq.n	80051ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	430a      	orrs	r2, r1
 80051ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f0:	f003 0310 	and.w	r3, r3, #16
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00a      	beq.n	800520e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	430a      	orrs	r2, r1
 800520c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005212:	f003 0320 	and.w	r3, r3, #32
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00a      	beq.n	8005230 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	430a      	orrs	r2, r1
 800522e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005238:	2b00      	cmp	r3, #0
 800523a:	d01a      	beq.n	8005272 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	430a      	orrs	r2, r1
 8005250:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005256:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800525a:	d10a      	bne.n	8005272 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	430a      	orrs	r2, r1
 8005270:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00a      	beq.n	8005294 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	430a      	orrs	r2, r1
 8005292:	605a      	str	r2, [r3, #4]
  }
}
 8005294:	bf00      	nop
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b086      	sub	sp, #24
 80052a4:	af02      	add	r7, sp, #8
 80052a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80052ae:	f7fd f861 	bl	8002374 <HAL_GetTick>
 80052b2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0308 	and.w	r3, r3, #8
 80052be:	2b08      	cmp	r3, #8
 80052c0:	d10e      	bne.n	80052e0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052c2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052c6:	9300      	str	r3, [sp, #0]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 f82a 	bl	800532a <UART_WaitOnFlagUntilTimeout>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d001      	beq.n	80052e0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	e020      	b.n	8005322 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0304 	and.w	r3, r3, #4
 80052ea:	2b04      	cmp	r3, #4
 80052ec:	d10e      	bne.n	800530c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052ee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052f2:	9300      	str	r3, [sp, #0]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f000 f814 	bl	800532a <UART_WaitOnFlagUntilTimeout>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d001      	beq.n	800530c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	e00a      	b.n	8005322 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2220      	movs	r2, #32
 8005310:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2220      	movs	r2, #32
 8005316:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3710      	adds	r7, #16
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}

0800532a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800532a:	b580      	push	{r7, lr}
 800532c:	b084      	sub	sp, #16
 800532e:	af00      	add	r7, sp, #0
 8005330:	60f8      	str	r0, [r7, #12]
 8005332:	60b9      	str	r1, [r7, #8]
 8005334:	603b      	str	r3, [r7, #0]
 8005336:	4613      	mov	r3, r2
 8005338:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800533a:	e05d      	b.n	80053f8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005342:	d059      	beq.n	80053f8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005344:	f7fd f816 	bl	8002374 <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	69ba      	ldr	r2, [r7, #24]
 8005350:	429a      	cmp	r2, r3
 8005352:	d302      	bcc.n	800535a <UART_WaitOnFlagUntilTimeout+0x30>
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d11b      	bne.n	8005392 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005368:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	689a      	ldr	r2, [r3, #8]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f022 0201 	bic.w	r2, r2, #1
 8005378:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2220      	movs	r2, #32
 800537e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2220      	movs	r2, #32
 8005384:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e042      	b.n	8005418 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0304 	and.w	r3, r3, #4
 800539c:	2b00      	cmp	r3, #0
 800539e:	d02b      	beq.n	80053f8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	69db      	ldr	r3, [r3, #28]
 80053a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053ae:	d123      	bne.n	80053f8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053b8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80053c8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	689a      	ldr	r2, [r3, #8]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f022 0201 	bic.w	r2, r2, #1
 80053d8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2220      	movs	r2, #32
 80053de:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2220      	movs	r2, #32
 80053e4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2220      	movs	r2, #32
 80053ea:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80053f4:	2303      	movs	r3, #3
 80053f6:	e00f      	b.n	8005418 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	69da      	ldr	r2, [r3, #28]
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	4013      	ands	r3, r2
 8005402:	68ba      	ldr	r2, [r7, #8]
 8005404:	429a      	cmp	r2, r3
 8005406:	bf0c      	ite	eq
 8005408:	2301      	moveq	r3, #1
 800540a:	2300      	movne	r3, #0
 800540c:	b2db      	uxtb	r3, r3
 800540e:	461a      	mov	r2, r3
 8005410:	79fb      	ldrb	r3, [r7, #7]
 8005412:	429a      	cmp	r2, r3
 8005414:	d092      	beq.n	800533c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3710      	adds	r7, #16
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <__libc_init_array>:
 8005420:	b570      	push	{r4, r5, r6, lr}
 8005422:	4e0d      	ldr	r6, [pc, #52]	; (8005458 <__libc_init_array+0x38>)
 8005424:	4c0d      	ldr	r4, [pc, #52]	; (800545c <__libc_init_array+0x3c>)
 8005426:	1ba4      	subs	r4, r4, r6
 8005428:	10a4      	asrs	r4, r4, #2
 800542a:	2500      	movs	r5, #0
 800542c:	42a5      	cmp	r5, r4
 800542e:	d109      	bne.n	8005444 <__libc_init_array+0x24>
 8005430:	4e0b      	ldr	r6, [pc, #44]	; (8005460 <__libc_init_array+0x40>)
 8005432:	4c0c      	ldr	r4, [pc, #48]	; (8005464 <__libc_init_array+0x44>)
 8005434:	f000 f820 	bl	8005478 <_init>
 8005438:	1ba4      	subs	r4, r4, r6
 800543a:	10a4      	asrs	r4, r4, #2
 800543c:	2500      	movs	r5, #0
 800543e:	42a5      	cmp	r5, r4
 8005440:	d105      	bne.n	800544e <__libc_init_array+0x2e>
 8005442:	bd70      	pop	{r4, r5, r6, pc}
 8005444:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005448:	4798      	blx	r3
 800544a:	3501      	adds	r5, #1
 800544c:	e7ee      	b.n	800542c <__libc_init_array+0xc>
 800544e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005452:	4798      	blx	r3
 8005454:	3501      	adds	r5, #1
 8005456:	e7f2      	b.n	800543e <__libc_init_array+0x1e>
 8005458:	080054c8 	.word	0x080054c8
 800545c:	080054c8 	.word	0x080054c8
 8005460:	080054c8 	.word	0x080054c8
 8005464:	080054cc 	.word	0x080054cc

08005468 <memset>:
 8005468:	4402      	add	r2, r0
 800546a:	4603      	mov	r3, r0
 800546c:	4293      	cmp	r3, r2
 800546e:	d100      	bne.n	8005472 <memset+0xa>
 8005470:	4770      	bx	lr
 8005472:	f803 1b01 	strb.w	r1, [r3], #1
 8005476:	e7f9      	b.n	800546c <memset+0x4>

08005478 <_init>:
 8005478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800547a:	bf00      	nop
 800547c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800547e:	bc08      	pop	{r3}
 8005480:	469e      	mov	lr, r3
 8005482:	4770      	bx	lr

08005484 <_fini>:
 8005484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005486:	bf00      	nop
 8005488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800548a:	bc08      	pop	{r3}
 800548c:	469e      	mov	lr, r3
 800548e:	4770      	bx	lr
